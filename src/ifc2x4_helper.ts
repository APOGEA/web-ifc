// This is a generated file, please see: gen_functional_types.js
export interface Handle<T> { expressID: number; }
export function Write<T>(obj: T): Handle<T> { return { expressID: 0 }; }
export type IfcAbsorbedDoseMeasure = number;
export type IfcAccelerationMeasure = number;
export type IfcAmountOfSubstanceMeasure = number;
export type IfcAngularVelocityMeasure = number;
export type IfcArcIndex = Array<IfcPositiveInteger>;
export type IfcAreaDensityMeasure = number;
export type IfcAreaMeasure = number;
export type IfcBinary = number;
export type IfcBoolean = boolean;
export type IfcBoxAlignment = IfcLabel;
export type IfcCardinalPointReference = number;
export type IfcComplexNumber = Array<number>;
export type IfcCompoundPlaneAngleMeasure = Array<number>;
export type IfcContextDependentMeasure = number;
export type IfcCountMeasure = number;
export type IfcCurvatureMeasure = number;
export type IfcDate = string;
export type IfcDateTime = string;
export type IfcDayInMonthNumber = number;
export type IfcDayInWeekNumber = number;
export type IfcDescriptiveMeasure = string;
export type IfcDimensionCount = number;
export type IfcDoseEquivalentMeasure = number;
export type IfcDuration = string;
export type IfcDynamicViscosityMeasure = number;
export type IfcElectricCapacitanceMeasure = number;
export type IfcElectricChargeMeasure = number;
export type IfcElectricConductanceMeasure = number;
export type IfcElectricCurrentMeasure = number;
export type IfcElectricResistanceMeasure = number;
export type IfcElectricVoltageMeasure = number;
export type IfcEnergyMeasure = number;
export type IfcFontStyle = string;
export type IfcFontVariant = string;
export type IfcFontWeight = string;
export type IfcForceMeasure = number;
export type IfcFrequencyMeasure = number;
export type IfcGloballyUniqueId = string;
export type IfcHeatFluxDensityMeasure = number;
export type IfcHeatingValueMeasure = number;
export type IfcIdentifier = string;
export type IfcIlluminanceMeasure = number;
export type IfcInductanceMeasure = number;
export type IfcInteger = number;
export type IfcIntegerCountRateMeasure = number;
export type IfcIonConcentrationMeasure = number;
export type IfcIsothermalMoistureCapacityMeasure = number;
export type IfcKinematicViscosityMeasure = number;
export type IfcLabel = string;
export type IfcLanguageId = IfcIdentifier;
export type IfcLengthMeasure = number;
export type IfcLineIndex = Array<IfcPositiveInteger>;
export type IfcLinearForceMeasure = number;
export type IfcLinearMomentMeasure = number;
export type IfcLinearStiffnessMeasure = number;
export type IfcLinearVelocityMeasure = number;
export type IfcLogical = boolean;
export type IfcLuminousFluxMeasure = number;
export type IfcLuminousIntensityDistributionMeasure = number;
export type IfcLuminousIntensityMeasure = number;
export type IfcMagneticFluxDensityMeasure = number;
export type IfcMagneticFluxMeasure = number;
export type IfcMassDensityMeasure = number;
export type IfcMassFlowRateMeasure = number;
export type IfcMassMeasure = number;
export type IfcMassPerLengthMeasure = number;
export type IfcModulusOfElasticityMeasure = number;
export type IfcModulusOfLinearSubgradeReactionMeasure = number;
export type IfcModulusOfRotationalSubgradeReactionMeasure = number;
export type IfcModulusOfSubgradeReactionMeasure = number;
export type IfcMoistureDiffusivityMeasure = number;
export type IfcMolecularWeightMeasure = number;
export type IfcMomentOfInertiaMeasure = number;
export type IfcMonetaryMeasure = number;
export type IfcMonthInYearNumber = number;
export type IfcNonNegativeLengthMeasure = IfcLengthMeasure;
export type IfcNormalisedRatioMeasure = IfcRatioMeasure;
export type IfcNumericMeasure = number;
export type IfcPHMeasure = number;
export type IfcParameterValue = number;
export type IfcPlanarForceMeasure = number;
export type IfcPlaneAngleMeasure = number;
export type IfcPositiveInteger = IfcInteger;
export type IfcPositiveLengthMeasure = IfcLengthMeasure;
export type IfcPositivePlaneAngleMeasure = IfcPlaneAngleMeasure;
export type IfcPositiveRatioMeasure = IfcRatioMeasure;
export type IfcPowerMeasure = number;
export type IfcPresentableText = string;
export type IfcPressureMeasure = number;
export type IfcPropertySetDefinitionSet = Array<IfcPropertySetDefinition>;
export type IfcRadioActivityMeasure = number;
export type IfcRatioMeasure = number;
export type IfcReal = number;
export type IfcRotationalFrequencyMeasure = number;
export type IfcRotationalMassMeasure = number;
export type IfcRotationalStiffnessMeasure = number;
export type IfcSectionModulusMeasure = number;
export type IfcSectionalAreaIntegralMeasure = number;
export type IfcShearModulusMeasure = number;
export type IfcSolidAngleMeasure = number;
export type IfcSoundPowerLevelMeasure = number;
export type IfcSoundPowerMeasure = number;
export type IfcSoundPressureLevelMeasure = number;
export type IfcSoundPressureMeasure = number;
export type IfcSpecificHeatCapacityMeasure = number;
export type IfcSpecularExponent = number;
export type IfcSpecularRoughness = number;
export type IfcTemperatureGradientMeasure = number;
export type IfcTemperatureRateOfChangeMeasure = number;
export type IfcText = string;
export type IfcTextAlignment = string;
export type IfcTextDecoration = string;
export type IfcTextFontName = string;
export type IfcTextTransformation = string;
export type IfcThermalAdmittanceMeasure = number;
export type IfcThermalConductivityMeasure = number;
export type IfcThermalExpansionCoefficientMeasure = number;
export type IfcThermalResistanceMeasure = number;
export type IfcThermalTransmittanceMeasure = number;
export type IfcThermodynamicTemperatureMeasure = number;
export type IfcTime = string;
export type IfcTimeMeasure = number;
export type IfcTimeStamp = number;
export type IfcTorqueMeasure = number;
export type IfcURIReference = string;
export type IfcVaporPermeabilityMeasure = number;
export type IfcVolumeMeasure = number;
export type IfcVolumetricFlowRateMeasure = number;
export type IfcWarpingConstantMeasure = number;
export type IfcWarpingMomentMeasure = number;
export enum IfcActionRequestTypeEnum {
	EMAIL,
	FAX,
	PHONE,
	POST,
	VERBAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcActionSourceTypeEnum {
	DEAD_LOAD_G,
	COMPLETION_G1,
	LIVE_LOAD_Q,
	SNOW_S,
	WIND_W,
	PRESTRESSING_P,
	SETTLEMENT_U,
	TEMPERATURE_T,
	EARTHQUAKE_E,
	FIRE,
	IMPULSE,
	IMPACT,
	TRANSPORT,
	ERECTION,
	PROPPING,
	SYSTEM_IMPERFECTION,
	SHRINKAGE,
	CREEP,
	LACK_OF_FIT,
	BUOYANCY,
	ICE,
	CURRENT,
	WAVE,
	RAIN,
	BRAKES,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcActionTypeEnum {
	PERMANENT_G,
	VARIABLE_Q,
	EXTRAORDINARY_A,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcActuatorTypeEnum {
	ELECTRICACTUATOR,
	HANDOPERATEDACTUATOR,
	HYDRAULICACTUATOR,
	PNEUMATICACTUATOR,
	THERMOSTATICACTUATOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAddressTypeEnum {
	OFFICE,
	SITE,
	HOME,
	DISTRIBUTIONPOINT,
	USERDEFINED
};
export enum IfcAirTerminalBoxTypeEnum {
	CONSTANTFLOW,
	VARIABLEFLOWPRESSUREDEPENDANT,
	VARIABLEFLOWPRESSUREINDEPENDANT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAirTerminalTypeEnum {
	DIFFUSER,
	GRILLE,
	LOUVRE,
	REGISTER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAirToAirHeatRecoveryTypeEnum {
	FIXEDPLATECOUNTERFLOWEXCHANGER,
	FIXEDPLATECROSSFLOWEXCHANGER,
	FIXEDPLATEPARALLELFLOWEXCHANGER,
	ROTARYWHEEL,
	RUNAROUNDCOILLOOP,
	HEATPIPE,
	TWINTOWERENTHALPYRECOVERYLOOPS,
	THERMOSIPHONSEALEDTUBEHEATEXCHANGERS,
	THERMOSIPHONCOILTYPEHEATEXCHANGERS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAlarmTypeEnum {
	BELL,
	BREAKGLASSBUTTON,
	LIGHT,
	MANUALPULLBOX,
	SIREN,
	WHISTLE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAlignmentTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAnalysisModelTypeEnum {
	IN_PLANE_LOADING_2D,
	OUT_PLANE_LOADING_2D,
	LOADING_3D,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcAnalysisTheoryTypeEnum {
	FIRST_ORDER_THEORY,
	SECOND_ORDER_THEORY,
	THIRD_ORDER_THEORY,
	FULL_NONLINEAR_THEORY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcArithmeticOperatorEnum {
	ADD,
	DIVIDE,
	MULTIPLY,
	SUBTRACT
};
export enum IfcAssemblyPlaceEnum {
	SITE,
	FACTORY,
	NOTDEFINED
};
export enum IfcAudioVisualApplianceTypeEnum {
	AMPLIFIER,
	CAMERA,
	DISPLAY,
	MICROPHONE,
	PLAYER,
	PROJECTOR,
	RECEIVER,
	SPEAKER,
	SWITCHER,
	TELEPHONE,
	TUNER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBSplineCurveForm {
	POLYLINE_FORM,
	CIRCULAR_ARC,
	ELLIPTIC_ARC,
	PARABOLIC_ARC,
	HYPERBOLIC_ARC,
	UNSPECIFIED
};
export enum IfcBSplineSurfaceForm {
	PLANE_SURF,
	CYLINDRICAL_SURF,
	CONICAL_SURF,
	SPHERICAL_SURF,
	TOROIDAL_SURF,
	SURF_OF_REVOLUTION,
	RULED_SURF,
	GENERALISED_CONE,
	QUADRIC_SURF,
	SURF_OF_LINEAR_EXTRUSION,
	UNSPECIFIED
};
export enum IfcBeamTypeEnum {
	BEAM,
	JOIST,
	HOLLOWCORE,
	LINTEL,
	SPANDREL,
	T_BEAM,
	GIRDER_SEGMENT,
	DIAPHRAGM,
	PIERCAP,
	HATSTONE,
	CORNICE,
	EDGEBEAM,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBearingTypeDisplacementEnum {
	FIXED_MOVEMENT,
	GUIDED_LONGITUDINAL,
	GUIDED_TRANSVERSAL,
	FREE_MOVEMENT,
	NOTDEFINED
};
export enum IfcBearingTypeEnum {
	CYLINDRICAL,
	SPHERICAL,
	ELASTOMERIC,
	POT,
	GUIDE,
	ROCKER,
	ROLLER,
	DISK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBenchmarkEnum {
	GREATERTHAN,
	GREATERTHANOREQUALTO,
	LESSTHAN,
	LESSTHANOREQUALTO,
	EQUALTO,
	NOTEQUALTO,
	INCLUDES,
	NOTINCLUDES,
	INCLUDEDIN,
	NOTINCLUDEDIN
};
export enum IfcBoilerTypeEnum {
	WATER,
	STEAM,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBooleanOperator {
	UNION,
	INTERSECTION,
	DIFFERENCE
};
export enum IfcBridgePartTypeEnum {
	ABUTMENT,
	DECK,
	DECK_SEGMENT,
	FOUNDATION,
	PIER,
	PIER_SEGMENT,
	PYLON,
	SUBSTRUCTURE,
	SUPERSTRUCTURE,
	SURFACESTRUCTURE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBridgeTypeEnum {
	ARCHED,
	CABLE_STAYED,
	CANTILEVER,
	CULVERT,
	FRAMEWORK,
	GIRDER,
	SUSPENSION,
	TRUSS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBuildingElementPartTypeEnum {
	INSULATION,
	PRECASTPANEL,
	APRON,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBuildingElementProxyTypeEnum {
	COMPLEX,
	ELEMENT,
	PARTIAL,
	PROVISIONFORVOID,
	PROVISIONFORSPACE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBuildingSystemTypeEnum {
	FENESTRATION,
	FOUNDATION,
	LOADBEARING,
	OUTERSHELL,
	SHADING,
	TRANSPORT,
	REINFORCING,
	PRESTRESSING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcBurnerTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCableCarrierFittingTypeEnum {
	BEND,
	CROSS,
	REDUCER,
	TEE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCableCarrierSegmentTypeEnum {
	CABLELADDERSEGMENT,
	CABLETRAYSEGMENT,
	CABLETRUNKINGSEGMENT,
	CONDUITSEGMENT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCableFittingTypeEnum {
	CONNECTOR,
	ENTRY,
	EXIT,
	JUNCTION,
	TRANSITION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCableSegmentTypeEnum {
	BUSBARSEGMENT,
	CABLESEGMENT,
	CONDUCTORSEGMENT,
	CORESEGMENT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCaissonFoundationTypeEnum {
	WELL,
	CAISSON,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcChangeActionEnum {
	NOCHANGE,
	MODIFIED,
	ADDED,
	DELETED,
	NOTDEFINED
};
export enum IfcChillerTypeEnum {
	AIRCOOLED,
	WATERCOOLED,
	HEATRECOVERY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcChimneyTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCoilTypeEnum {
	DXCOOLINGCOIL,
	ELECTRICHEATINGCOIL,
	GASHEATINGCOIL,
	HYDRONICCOIL,
	STEAMHEATINGCOIL,
	WATERCOOLINGCOIL,
	WATERHEATINGCOIL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcColumnTypeEnum {
	COLUMN,
	PILASTER,
	PIERSTEM,
	PIERSTEM_SEGMENT,
	STANDCOLUMN,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCommunicationsApplianceTypeEnum {
	ANTENNA,
	COMPUTER,
	FAX,
	GATEWAY,
	MODEM,
	NETWORKAPPLIANCE,
	NETWORKBRIDGE,
	NETWORKHUB,
	PRINTER,
	REPEATER,
	ROUTER,
	SCANNER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcComplexPropertyTemplateTypeEnum {
	P_COMPLEX,
	Q_COMPLEX
};
export enum IfcCompressorTypeEnum {
	DYNAMIC,
	RECIPROCATING,
	ROTARY,
	SCROLL,
	TROCHOIDAL,
	SINGLESTAGE,
	BOOSTER,
	OPENTYPE,
	HERMETIC,
	SEMIHERMETIC,
	WELDEDSHELLHERMETIC,
	ROLLINGPISTON,
	ROTARYVANE,
	SINGLESCREW,
	TWINSCREW,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCondenserTypeEnum {
	AIRCOOLED,
	EVAPORATIVECOOLED,
	WATERCOOLED,
	WATERCOOLEDBRAZEDPLATE,
	WATERCOOLEDSHELLCOIL,
	WATERCOOLEDSHELLTUBE,
	WATERCOOLEDTUBEINTUBE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcConnectionTypeEnum {
	ATPATH,
	ATSTART,
	ATEND,
	NOTDEFINED
};
export enum IfcConstraintEnum {
	HARD,
	SOFT,
	ADVISORY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcConstructionEquipmentResourceTypeEnum {
	DEMOLISHING,
	EARTHMOVING,
	ERECTING,
	HEATING,
	LIGHTING,
	PAVING,
	PUMPING,
	TRANSPORTING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcConstructionMaterialResourceTypeEnum {
	AGGREGATES,
	CONCRETE,
	DRYWALL,
	FUEL,
	GYPSUM,
	MASONRY,
	METAL,
	PLASTIC,
	WOOD,
	NOTDEFINED,
	USERDEFINED
};
export enum IfcConstructionProductResourceTypeEnum {
	ASSEMBLY,
	FORMWORK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcControllerTypeEnum {
	FLOATING,
	PROGRAMMABLE,
	PROPORTIONAL,
	MULTIPOSITION,
	TWOPOSITION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCooledBeamTypeEnum {
	ACTIVE,
	PASSIVE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCoolingTowerTypeEnum {
	NATURALDRAFT,
	MECHANICALINDUCEDDRAFT,
	MECHANICALFORCEDDRAFT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCostItemTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCostScheduleTypeEnum {
	BUDGET,
	COSTPLAN,
	ESTIMATE,
	TENDER,
	PRICEDBILLOFQUANTITIES,
	UNPRICEDBILLOFQUANTITIES,
	SCHEDULEOFRATES,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCoveringTypeEnum {
	CEILING,
	FLOORING,
	CLADDING,
	ROOFING,
	MOLDING,
	SKIRTINGBOARD,
	INSULATION,
	MEMBRANE,
	SLEEVING,
	WRAPPING,
	COPING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCrewResourceTypeEnum {
	OFFICE,
	SITE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCurtainWallTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcCurveInterpolationEnum {
	LINEAR,
	LOG_LINEAR,
	LOG_LOG,
	NOTDEFINED
};
export enum IfcDamperTypeEnum {
	BACKDRAFTDAMPER,
	BALANCINGDAMPER,
	BLASTDAMPER,
	CONTROLDAMPER,
	FIREDAMPER,
	FIRESMOKEDAMPER,
	FUMEHOODEXHAUST,
	GRAVITYDAMPER,
	GRAVITYRELIEFDAMPER,
	RELIEFDAMPER,
	SMOKEDAMPER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDataOriginEnum {
	MEASURED,
	PREDICTED,
	SIMULATED,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDerivedUnitEnum {
	ANGULARVELOCITYUNIT,
	AREADENSITYUNIT,
	COMPOUNDPLANEANGLEUNIT,
	DYNAMICVISCOSITYUNIT,
	HEATFLUXDENSITYUNIT,
	INTEGERCOUNTRATEUNIT,
	ISOTHERMALMOISTURECAPACITYUNIT,
	KINEMATICVISCOSITYUNIT,
	LINEARVELOCITYUNIT,
	MASSDENSITYUNIT,
	MASSFLOWRATEUNIT,
	MOISTUREDIFFUSIVITYUNIT,
	MOLECULARWEIGHTUNIT,
	SPECIFICHEATCAPACITYUNIT,
	THERMALADMITTANCEUNIT,
	THERMALCONDUCTANCEUNIT,
	THERMALRESISTANCEUNIT,
	THERMALTRANSMITTANCEUNIT,
	VAPORPERMEABILITYUNIT,
	VOLUMETRICFLOWRATEUNIT,
	ROTATIONALFREQUENCYUNIT,
	TORQUEUNIT,
	MOMENTOFINERTIAUNIT,
	LINEARMOMENTUNIT,
	LINEARFORCEUNIT,
	PLANARFORCEUNIT,
	MODULUSOFELASTICITYUNIT,
	SHEARMODULUSUNIT,
	LINEARSTIFFNESSUNIT,
	ROTATIONALSTIFFNESSUNIT,
	MODULUSOFSUBGRADEREACTIONUNIT,
	ACCELERATIONUNIT,
	CURVATUREUNIT,
	HEATINGVALUEUNIT,
	IONCONCENTRATIONUNIT,
	LUMINOUSINTENSITYDISTRIBUTIONUNIT,
	MASSPERLENGTHUNIT,
	MODULUSOFLINEARSUBGRADEREACTIONUNIT,
	MODULUSOFROTATIONALSUBGRADEREACTIONUNIT,
	PHUNIT,
	ROTATIONALMASSUNIT,
	SECTIONAREAINTEGRALUNIT,
	SECTIONMODULUSUNIT,
	SOUNDPOWERLEVELUNIT,
	SOUNDPOWERUNIT,
	SOUNDPRESSURELEVELUNIT,
	SOUNDPRESSUREUNIT,
	TEMPERATUREGRADIENTUNIT,
	TEMPERATURERATEOFCHANGEUNIT,
	THERMALEXPANSIONCOEFFICIENTUNIT,
	WARPINGCONSTANTUNIT,
	WARPINGMOMENTUNIT,
	USERDEFINED
};
export enum IfcDirectionSenseEnum {
	POSITIVE,
	NEGATIVE
};
export enum IfcDiscreteAccessoryTypeEnum {
	ANCHORPLATE,
	BRACKET,
	SHOE,
	EXPANSION_JOINT_DEVICE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDistributionChamberElementTypeEnum {
	FORMEDDUCT,
	INSPECTIONCHAMBER,
	INSPECTIONPIT,
	MANHOLE,
	METERCHAMBER,
	SUMP,
	TRENCH,
	VALVECHAMBER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDistributionPortTypeEnum {
	CABLE,
	CABLECARRIER,
	DUCT,
	PIPE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDistributionSystemEnum {
	AIRCONDITIONING,
	AUDIOVISUAL,
	CHEMICAL,
	CHILLEDWATER,
	COMMUNICATION,
	COMPRESSEDAIR,
	CONDENSERWATER,
	CONTROL,
	CONVEYING,
	DATA,
	DISPOSAL,
	DOMESTICCOLDWATER,
	DOMESTICHOTWATER,
	DRAINAGE,
	EARTHING,
	ELECTRICAL,
	ELECTROACOUSTIC,
	EXHAUST,
	FIREPROTECTION,
	FUEL,
	GAS,
	HAZARDOUS,
	HEATING,
	LIGHTING,
	LIGHTNINGPROTECTION,
	MUNICIPALSOLIDWASTE,
	OIL,
	OPERATIONAL,
	POWERGENERATION,
	RAINWATER,
	REFRIGERATION,
	SECURITY,
	SEWAGE,
	SIGNAL,
	STORMWATER,
	TELEPHONE,
	TV,
	VACUUM,
	VENT,
	VENTILATION,
	WASTEWATER,
	WATERSUPPLY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDocumentConfidentialityEnum {
	PUBLIC,
	RESTRICTED,
	CONFIDENTIAL,
	PERSONAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDocumentStatusEnum {
	DRAFT,
	FINALDRAFT,
	FINAL,
	REVISION,
	NOTDEFINED
};
export enum IfcDoorPanelOperationEnum {
	SWINGING,
	DOUBLE_ACTING,
	SLIDING,
	FOLDING,
	REVOLVING,
	ROLLINGUP,
	FIXEDPANEL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDoorPanelPositionEnum {
	LEFT,
	MIDDLE,
	RIGHT,
	NOTDEFINED
};
export enum IfcDoorStyleConstructionEnum {
	ALUMINIUM,
	HIGH_GRADE_STEEL,
	STEEL,
	WOOD,
	ALUMINIUM_WOOD,
	ALUMINIUM_PLASTIC,
	PLASTIC,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDoorStyleOperationEnum {
	SINGLE_SWING_LEFT,
	SINGLE_SWING_RIGHT,
	DOUBLE_DOOR_SINGLE_SWING,
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,
	DOUBLE_SWING_LEFT,
	DOUBLE_SWING_RIGHT,
	DOUBLE_DOOR_DOUBLE_SWING,
	SLIDING_TO_LEFT,
	SLIDING_TO_RIGHT,
	DOUBLE_DOOR_SLIDING,
	FOLDING_TO_LEFT,
	FOLDING_TO_RIGHT,
	DOUBLE_DOOR_FOLDING,
	REVOLVING,
	ROLLINGUP,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDoorTypeEnum {
	DOOR,
	GATE,
	TRAPDOOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDoorTypeOperationEnum {
	SINGLE_SWING_LEFT,
	SINGLE_SWING_RIGHT,
	DOUBLE_DOOR_SINGLE_SWING,
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT,
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT,
	DOUBLE_SWING_LEFT,
	DOUBLE_SWING_RIGHT,
	DOUBLE_DOOR_DOUBLE_SWING,
	SLIDING_TO_LEFT,
	SLIDING_TO_RIGHT,
	DOUBLE_DOOR_SLIDING,
	FOLDING_TO_LEFT,
	FOLDING_TO_RIGHT,
	DOUBLE_DOOR_FOLDING,
	REVOLVING,
	ROLLINGUP,
	SWING_FIXED_LEFT,
	SWING_FIXED_RIGHT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDuctFittingTypeEnum {
	BEND,
	CONNECTOR,
	ENTRY,
	EXIT,
	JUNCTION,
	OBSTRUCTION,
	TRANSITION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDuctSegmentTypeEnum {
	RIGIDSEGMENT,
	FLEXIBLESEGMENT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcDuctSilencerTypeEnum {
	FLATOVAL,
	RECTANGULAR,
	ROUND,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricApplianceTypeEnum {
	DISHWASHER,
	ELECTRICCOOKER,
	FREESTANDINGELECTRICHEATER,
	FREESTANDINGFAN,
	FREESTANDINGWATERHEATER,
	FREESTANDINGWATERCOOLER,
	FREEZER,
	FRIDGE_FREEZER,
	HANDDRYER,
	KITCHENMACHINE,
	MICROWAVE,
	PHOTOCOPIER,
	REFRIGERATOR,
	TUMBLEDRYER,
	VENDINGMACHINE,
	WASHINGMACHINE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricDistributionBoardTypeEnum {
	CONSUMERUNIT,
	DISTRIBUTIONBOARD,
	MOTORCONTROLCENTRE,
	SWITCHBOARD,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricFlowStorageDeviceTypeEnum {
	BATTERY,
	CAPACITORBANK,
	HARMONICFILTER,
	INDUCTORBANK,
	UPS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricGeneratorTypeEnum {
	CHP,
	ENGINEGENERATOR,
	STANDALONE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricMotorTypeEnum {
	DC,
	INDUCTION,
	POLYPHASE,
	RELUCTANCESYNCHRONOUS,
	SYNCHRONOUS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElectricTimeControlTypeEnum {
	TIMECLOCK,
	TIMEDELAY,
	RELAY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElementAssemblyTypeEnum {
	ACCESSORY_ASSEMBLY,
	ARCH,
	BEAM_GRID,
	BRACED_FRAME,
	GIRDER,
	REINFORCEMENT_UNIT,
	RIGID_FRAME,
	SLAB_FIELD,
	TRUSS,
	ABUTMENT,
	PIER,
	PYLON,
	CROSS_BRACING,
	DECK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcElementCompositionEnum {
	COMPLEX,
	ELEMENT,
	PARTIAL
};
export enum IfcEngineTypeEnum {
	EXTERNALCOMBUSTION,
	INTERNALCOMBUSTION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcEvaporativeCoolerTypeEnum {
	DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER,
	DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER,
	DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER,
	DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER,
	DIRECTEVAPORATIVEAIRWASHER,
	INDIRECTEVAPORATIVEPACKAGEAIRCOOLER,
	INDIRECTEVAPORATIVEWETCOIL,
	INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER,
	INDIRECTDIRECTCOMBINATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcEvaporatorTypeEnum {
	DIRECTEXPANSION,
	DIRECTEXPANSIONSHELLANDTUBE,
	DIRECTEXPANSIONTUBEINTUBE,
	DIRECTEXPANSIONBRAZEDPLATE,
	FLOODEDSHELLANDTUBE,
	SHELLANDCOIL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcEventTriggerTypeEnum {
	EVENTRULE,
	EVENTMESSAGE,
	EVENTTIME,
	EVENTCOMPLEX,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcEventTypeEnum {
	STARTEVENT,
	ENDEVENT,
	INTERMEDIATEEVENT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcExternalSpatialElementTypeEnum {
	EXTERNAL,
	EXTERNAL_EARTH,
	EXTERNAL_WATER,
	EXTERNAL_FIRE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFanTypeEnum {
	CENTRIFUGALFORWARDCURVED,
	CENTRIFUGALRADIAL,
	CENTRIFUGALBACKWARDINCLINEDCURVED,
	CENTRIFUGALAIRFOIL,
	TUBEAXIAL,
	VANEAXIAL,
	PROPELLORAXIAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFastenerTypeEnum {
	GLUE,
	MORTAR,
	WELD,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFilterTypeEnum {
	AIRPARTICLEFILTER,
	COMPRESSEDAIRFILTER,
	ODORFILTER,
	OILFILTER,
	STRAINER,
	WATERFILTER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFireSuppressionTerminalTypeEnum {
	BREECHINGINLET,
	FIREHYDRANT,
	HOSEREEL,
	SPRINKLER,
	SPRINKLERDEFLECTOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFlowDirectionEnum {
	SOURCE,
	SINK,
	SOURCEANDSINK,
	NOTDEFINED
};
export enum IfcFlowInstrumentTypeEnum {
	PRESSUREGAUGE,
	THERMOMETER,
	AMMETER,
	FREQUENCYMETER,
	POWERFACTORMETER,
	PHASEANGLEMETER,
	VOLTMETER_PEAK,
	VOLTMETER_RMS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFlowMeterTypeEnum {
	ENERGYMETER,
	GASMETER,
	OILMETER,
	WATERMETER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFootingTypeEnum {
	CAISSON_FOUNDATION,
	FOOTING_BEAM,
	PAD_FOOTING,
	PILE_CAP,
	STRIP_FOOTING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcFurnitureTypeEnum {
	CHAIR,
	TABLE,
	DESK,
	BED,
	FILECABINET,
	SHELF,
	SOFA,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcGeographicElementTypeEnum {
	TERRAIN,
	SOIL_BORING_POINT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcGeometricProjectionEnum {
	GRAPH_VIEW,
	SKETCH_VIEW,
	MODEL_VIEW,
	PLAN_VIEW,
	REFLECTED_PLAN_VIEW,
	SECTION_VIEW,
	ELEVATION_VIEW,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcGlobalOrLocalEnum {
	GLOBAL_COORDS,
	LOCAL_COORDS
};
export enum IfcGridTypeEnum {
	RECTANGULAR,
	RADIAL,
	TRIANGULAR,
	IRREGULAR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcHeatExchangerTypeEnum {
	PLATE,
	SHELLANDTUBE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcHumidifierTypeEnum {
	STEAMINJECTION,
	ADIABATICAIRWASHER,
	ADIABATICPAN,
	ADIABATICWETTEDELEMENT,
	ADIABATICATOMIZING,
	ADIABATICULTRASONIC,
	ADIABATICRIGIDMEDIA,
	ADIABATICCOMPRESSEDAIRNOZZLE,
	ASSISTEDELECTRIC,
	ASSISTEDNATURALGAS,
	ASSISTEDPROPANE,
	ASSISTEDBUTANE,
	ASSISTEDSTEAM,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcInterceptorTypeEnum {
	CYCLONIC,
	GREASE,
	OIL,
	PETROL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcInternalOrExternalEnum {
	INTERNAL,
	EXTERNAL,
	EXTERNAL_EARTH,
	EXTERNAL_WATER,
	EXTERNAL_FIRE,
	NOTDEFINED
};
export enum IfcInventoryTypeEnum {
	ASSETINVENTORY,
	SPACEINVENTORY,
	FURNITUREINVENTORY,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcJunctionBoxTypeEnum {
	DATA,
	POWER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcKnotType {
	UNIFORM_KNOTS,
	QUASI_UNIFORM_KNOTS,
	PIECEWISE_BEZIER_KNOTS,
	UNSPECIFIED
};
export enum IfcLaborResourceTypeEnum {
	ADMINISTRATION,
	CARPENTRY,
	CLEANING,
	CONCRETE,
	DRYWALL,
	ELECTRIC,
	FINISHING,
	FLOORING,
	GENERAL,
	HVAC,
	LANDSCAPING,
	MASONRY,
	PAINTING,
	PAVING,
	PLUMBING,
	ROOFING,
	SITEGRADING,
	STEELWORK,
	SURVEYING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcLampTypeEnum {
	COMPACTFLUORESCENT,
	FLUORESCENT,
	HALOGEN,
	HIGHPRESSUREMERCURY,
	HIGHPRESSURESODIUM,
	LED,
	METALHALIDE,
	OLED,
	TUNGSTENFILAMENT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcLayerSetDirectionEnum {
	AXIS1,
	AXIS2,
	AXIS3
};
export enum IfcLightDistributionCurveEnum {
	TYPE_A,
	TYPE_B,
	TYPE_C,
	NOTDEFINED
};
export enum IfcLightEmissionSourceEnum {
	COMPACTFLUORESCENT,
	FLUORESCENT,
	HIGHPRESSUREMERCURY,
	HIGHPRESSURESODIUM,
	LIGHTEMITTINGDIODE,
	LOWPRESSURESODIUM,
	LOWVOLTAGEHALOGEN,
	MAINVOLTAGEHALOGEN,
	METALHALIDE,
	TUNGSTENFILAMENT,
	NOTDEFINED
};
export enum IfcLightFixtureTypeEnum {
	POINTSOURCE,
	DIRECTIONSOURCE,
	SECURITYLIGHTING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcLoadGroupTypeEnum {
	LOAD_GROUP,
	LOAD_CASE,
	LOAD_COMBINATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcLogicalOperatorEnum {
	LOGICALAND,
	LOGICALOR,
	LOGICALXOR,
	LOGICALNOTAND,
	LOGICALNOTOR
};
export enum IfcMechanicalFastenerTypeEnum {
	ANCHORBOLT,
	BOLT,
	DOWEL,
	NAIL,
	NAILPLATE,
	RIVET,
	SCREW,
	SHEARCONNECTOR,
	STAPLE,
	STUDSHEARCONNECTOR,
	COUPLER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcMedicalDeviceTypeEnum {
	AIRSTATION,
	FEEDAIRUNIT,
	OXYGENGENERATOR,
	OXYGENPLANT,
	VACUUMSTATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcMemberTypeEnum {
	BRACE,
	CHORD,
	COLLAR,
	MEMBER,
	MULLION,
	PLATE,
	POST,
	PURLIN,
	RAFTER,
	STRINGER,
	STRUT,
	STUD,
	STIFFENING_RIB,
	ARCH_SEGMENT,
	SUSPENSION_CABLE,
	SUSPENDER,
	STAY_CABLE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcMotorConnectionTypeEnum {
	BELTDRIVE,
	COUPLING,
	DIRECTDRIVE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcNullStyle {
	NULL
};
export enum IfcObjectTypeEnum {
	PRODUCT,
	PROCESS,
	CONTROL,
	RESOURCE,
	ACTOR,
	GROUP,
	PROJECT,
	NOTDEFINED
};
export enum IfcObjectiveEnum {
	CODECOMPLIANCE,
	CODEWAIVER,
	DESIGNINTENT,
	EXTERNAL,
	HEALTHANDSAFETY,
	MERGECONFLICT,
	MODELVIEW,
	PARAMETER,
	REQUIREMENT,
	SPECIFICATION,
	TRIGGERCONDITION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcOccupantTypeEnum {
	ASSIGNEE,
	ASSIGNOR,
	LESSEE,
	LESSOR,
	LETTINGAGENT,
	OWNER,
	TENANT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcOpeningElementTypeEnum {
	OPENING,
	RECESS,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcOutletTypeEnum {
	AUDIOVISUALOUTLET,
	COMMUNICATIONSOUTLET,
	POWEROUTLET,
	DATAOUTLET,
	TELEPHONEOUTLET,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPerformanceHistoryTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPermeableCoveringOperationEnum {
	GRILL,
	LOUVER,
	SCREEN,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPermitTypeEnum {
	ACCESS,
	BUILDING,
	WORK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPhysicalOrVirtualEnum {
	PHYSICAL,
	VIRTUAL,
	NOTDEFINED
};
export enum IfcPileConstructionEnum {
	CAST_IN_PLACE,
	COMPOSITE,
	PRECAST_CONCRETE,
	PREFAB_STEEL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPileTypeEnum {
	BORED,
	DRIVEN,
	JETGROUTING,
	COHESION,
	FRICTION,
	SUPPORT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPipeFittingTypeEnum {
	BEND,
	CONNECTOR,
	ENTRY,
	EXIT,
	JUNCTION,
	OBSTRUCTION,
	TRANSITION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPipeSegmentTypeEnum {
	CULVERT,
	FLEXIBLESEGMENT,
	RIGIDSEGMENT,
	GUTTER,
	SPOOL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPlateTypeEnum {
	CURTAIN_PANEL,
	SHEET,
	FLANGE_PLATE,
	WEB_PLATE,
	STIFFENER_PLATE,
	GUSSET_PLATE,
	COVER_PLATE,
	SPLICE_PLATE,
	BASE_PLATE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPreferredSurfaceCurveRepresentation {
	CURVE3D,
	PCURVE_S1,
	PCURVE_S2
};
export enum IfcProcedureTypeEnum {
	ADVICE_CAUTION,
	ADVICE_NOTE,
	ADVICE_WARNING,
	CALIBRATION,
	DIAGNOSTIC,
	SHUTDOWN,
	STARTUP,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcProfileTypeEnum {
	CURVE,
	AREA
};
export enum IfcProjectOrderTypeEnum {
	CHANGEORDER,
	MAINTENANCEWORKORDER,
	MOVEORDER,
	PURCHASEORDER,
	WORKORDER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcProjectedOrTrueLengthEnum {
	PROJECTED_LENGTH,
	TRUE_LENGTH
};
export enum IfcProjectionElementTypeEnum {
	BLISTER,
	DEVIATOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPropertySetTemplateTypeEnum {
	PSET_TYPEDRIVENONLY,
	PSET_TYPEDRIVENOVERRIDE,
	PSET_OCCURRENCEDRIVEN,
	PSET_PERFORMANCEDRIVEN,
	QTO_TYPEDRIVENONLY,
	QTO_TYPEDRIVENOVERRIDE,
	QTO_OCCURRENCEDRIVEN,
	NOTDEFINED
};
export enum IfcProtectiveDeviceTrippingUnitTypeEnum {
	ELECTRONIC,
	ELECTROMAGNETIC,
	RESIDUALCURRENT,
	THERMAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcProtectiveDeviceTypeEnum {
	CIRCUITBREAKER,
	EARTHLEAKAGECIRCUITBREAKER,
	EARTHINGSWITCH,
	FUSEDISCONNECTOR,
	RESIDUALCURRENTCIRCUITBREAKER,
	RESIDUALCURRENTSWITCH,
	VARISTOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcPumpTypeEnum {
	CIRCULATOR,
	ENDSUCTION,
	SPLITCASE,
	SUBMERSIBLEPUMP,
	SUMPPUMP,
	VERTICALINLINE,
	VERTICALTURBINE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcRailingTypeEnum {
	HANDRAIL,
	GUARDRAIL,
	BALUSTRADE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcRampFlightTypeEnum {
	STRAIGHT,
	SPIRAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcRampTypeEnum {
	STRAIGHT_RUN_RAMP,
	TWO_STRAIGHT_RUN_RAMP,
	QUARTER_TURN_RAMP,
	TWO_QUARTER_TURN_RAMP,
	HALF_TURN_RAMP,
	SPIRAL_RAMP,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcRecurrenceTypeEnum {
	DAILY,
	WEEKLY,
	MONTHLY_BY_DAY_OF_MONTH,
	MONTHLY_BY_POSITION,
	BY_DAY_COUNT,
	BY_WEEKDAY_COUNT,
	YEARLY_BY_DAY_OF_MONTH,
	YEARLY_BY_POSITION
};
export enum IfcReferentTypeEnum {
	KILOPOINT,
	MILEPOINT,
	STATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcReflectanceMethodEnum {
	BLINN,
	FLAT,
	GLASS,
	MATT,
	METAL,
	MIRROR,
	PHONG,
	PLASTIC,
	STRAUSS,
	NOTDEFINED
};
export enum IfcReinforcingBarRoleEnum {
	MAIN,
	SHEAR,
	LIGATURE,
	STUD,
	PUNCHING,
	EDGE,
	RING,
	ANCHORING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcReinforcingBarSurfaceEnum {
	PLAIN,
	TEXTURED
};
export enum IfcReinforcingBarTypeEnum {
	ANCHORING,
	EDGE,
	LIGATURE,
	MAIN,
	PUNCHING,
	RING,
	SHEAR,
	STUD,
	SPACEBAR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcReinforcingMeshTypeEnum {
	USERDEFINED,
	NOTDEFINED
};
export enum IfcRoleEnum {
	SUPPLIER,
	MANUFACTURER,
	CONTRACTOR,
	SUBCONTRACTOR,
	ARCHITECT,
	STRUCTURALENGINEER,
	COSTENGINEER,
	CLIENT,
	BUILDINGOWNER,
	BUILDINGOPERATOR,
	MECHANICALENGINEER,
	ELECTRICALENGINEER,
	PROJECTMANAGER,
	FACILITIESMANAGER,
	CIVILENGINEER,
	COMMISSIONINGENGINEER,
	ENGINEER,
	OWNER,
	CONSULTANT,
	CONSTRUCTIONMANAGER,
	FIELDCONSTRUCTIONMANAGER,
	RESELLER,
	USERDEFINED
};
export enum IfcRoofTypeEnum {
	FLAT_ROOF,
	SHED_ROOF,
	GABLE_ROOF,
	HIP_ROOF,
	HIPPED_GABLE_ROOF,
	GAMBREL_ROOF,
	MANSARD_ROOF,
	BARREL_ROOF,
	RAINBOW_ROOF,
	BUTTERFLY_ROOF,
	PAVILION_ROOF,
	DOME_ROOF,
	FREEFORM,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSIPrefix {
	EXA,
	PETA,
	TERA,
	GIGA,
	MEGA,
	KILO,
	HECTO,
	DECA,
	DECI,
	CENTI,
	MILLI,
	MICRO,
	NANO,
	PICO,
	FEMTO,
	ATTO
};
export enum IfcSIUnitName {
	AMPERE,
	BECQUEREL,
	CANDELA,
	COULOMB,
	CUBIC_METRE,
	DEGREE_CELSIUS,
	FARAD,
	GRAM,
	GRAY,
	HENRY,
	HERTZ,
	JOULE,
	KELVIN,
	LUMEN,
	LUX,
	METRE,
	MOLE,
	NEWTON,
	OHM,
	PASCAL,
	RADIAN,
	SECOND,
	SIEMENS,
	SIEVERT,
	SQUARE_METRE,
	STERADIAN,
	TESLA,
	VOLT,
	WATT,
	WEBER
};
export enum IfcSanitaryTerminalTypeEnum {
	BATH,
	BIDET,
	CISTERN,
	SHOWER,
	SINK,
	SANITARYFOUNTAIN,
	TOILETPAN,
	URINAL,
	WASHHANDBASIN,
	WCSEAT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSectionTypeEnum {
	UNIFORM,
	TAPERED
};
export enum IfcSensorTypeEnum {
	COSENSOR,
	CO2SENSOR,
	CONDUCTANCESENSOR,
	CONTACTSENSOR,
	FIRESENSOR,
	FLOWSENSOR,
	FROSTSENSOR,
	GASSENSOR,
	HEATSENSOR,
	HUMIDITYSENSOR,
	IDENTIFIERSENSOR,
	IONCONCENTRATIONSENSOR,
	LEVELSENSOR,
	LIGHTSENSOR,
	MOISTURESENSOR,
	MOVEMENTSENSOR,
	PHSENSOR,
	PRESSURESENSOR,
	RADIATIONSENSOR,
	RADIOACTIVITYSENSOR,
	SMOKESENSOR,
	SOUNDSENSOR,
	TEMPERATURESENSOR,
	WINDSENSOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSequenceEnum {
	START_START,
	START_FINISH,
	FINISH_START,
	FINISH_FINISH,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcShadingDeviceTypeEnum {
	JALOUSIE,
	SHUTTER,
	AWNING,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSimplePropertyTemplateTypeEnum {
	P_SINGLEVALUE,
	P_ENUMERATEDVALUE,
	P_BOUNDEDVALUE,
	P_LISTVALUE,
	P_TABLEVALUE,
	P_REFERENCEVALUE,
	Q_LENGTH,
	Q_AREA,
	Q_VOLUME,
	Q_COUNT,
	Q_WEIGHT,
	Q_TIME
};
export enum IfcSlabTypeEnum {
	FLOOR,
	ROOF,
	LANDING,
	BASESLAB,
	APPROACH_SLAB,
	PAVING,
	WEARING,
	SIDEWALK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSolarDeviceTypeEnum {
	SOLARCOLLECTOR,
	SOLARPANEL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSpaceHeaterTypeEnum {
	CONVECTOR,
	RADIATOR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSpaceTypeEnum {
	SPACE,
	PARKING,
	GFA,
	INTERNAL,
	EXTERNAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSpatialZoneTypeEnum {
	CONSTRUCTION,
	FIRESAFETY,
	LIGHTING,
	OCCUPANCY,
	SECURITY,
	THERMAL,
	TRANSPORT,
	VENTILATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStackTerminalTypeEnum {
	BIRDCAGE,
	COWL,
	RAINWATERHOPPER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStairFlightTypeEnum {
	STRAIGHT,
	WINDER,
	SPIRAL,
	CURVED,
	FREEFORM,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStairTypeEnum {
	STRAIGHT_RUN_STAIR,
	TWO_STRAIGHT_RUN_STAIR,
	QUARTER_WINDING_STAIR,
	QUARTER_TURN_STAIR,
	HALF_WINDING_STAIR,
	HALF_TURN_STAIR,
	TWO_QUARTER_WINDING_STAIR,
	TWO_QUARTER_TURN_STAIR,
	THREE_QUARTER_WINDING_STAIR,
	THREE_QUARTER_TURN_STAIR,
	SPIRAL_STAIR,
	DOUBLE_RETURN_STAIR,
	CURVED_RUN_STAIR,
	TWO_CURVED_RUN_STAIR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStateEnum {
	READWRITE,
	READONLY,
	LOCKED,
	READWRITELOCKED,
	READONLYLOCKED
};
export enum IfcStructuralCurveActivityTypeEnum {
	CONST,
	LINEAR,
	POLYGONAL,
	EQUIDISTANT,
	SINUS,
	PARABOLA,
	DISCRETE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStructuralCurveMemberTypeEnum {
	RIGID_JOINED_MEMBER,
	PIN_JOINED_MEMBER,
	CABLE,
	TENSION_MEMBER,
	COMPRESSION_MEMBER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStructuralSurfaceActivityTypeEnum {
	CONST,
	BILINEAR,
	DISCRETE,
	ISOCONTOUR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcStructuralSurfaceMemberTypeEnum {
	BENDING_ELEMENT,
	MEMBRANE_ELEMENT,
	SHELL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSubContractResourceTypeEnum {
	PURCHASE,
	WORK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSurfaceFeatureTypeEnum {
	MARK,
	TAG,
	TREATMENT,
	DEFECT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSurfaceSide {
	POSITIVE,
	NEGATIVE,
	BOTH
};
export enum IfcSwitchingDeviceTypeEnum {
	CONTACTOR,
	DIMMERSWITCH,
	EMERGENCYSTOP,
	KEYPAD,
	MOMENTARYSWITCH,
	SELECTORSWITCH,
	STARTER,
	SWITCHDISCONNECTOR,
	TOGGLESWITCH,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcSystemFurnitureElementTypeEnum {
	PANEL,
	WORKSURFACE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTankTypeEnum {
	BASIN,
	BREAKPRESSURE,
	EXPANSION,
	FEEDANDEXPANSION,
	PRESSUREVESSEL,
	STORAGE,
	VESSEL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTaskDurationEnum {
	ELAPSEDTIME,
	WORKTIME,
	NOTDEFINED
};
export enum IfcTaskTypeEnum {
	ATTENDANCE,
	CONSTRUCTION,
	DEMOLITION,
	DISMANTLE,
	DISPOSAL,
	INSTALLATION,
	LOGISTIC,
	MAINTENANCE,
	MOVE,
	OPERATION,
	REMOVAL,
	RENOVATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTendonAnchorTypeEnum {
	COUPLER,
	FIXED_END,
	TENSIONING_END,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTendonConduitTypeEnum {
	DUCT,
	COUPLER,
	GROUTING_DUCT,
	TRUMPET,
	DIABOLO,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTendonTypeEnum {
	BAR,
	COATED,
	STRAND,
	WIRE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTextPath {
	LEFT,
	RIGHT,
	UP,
	DOWN
};
export enum IfcTimeSeriesDataTypeEnum {
	CONTINUOUS,
	DISCRETE,
	DISCRETEBINARY,
	PIECEWISEBINARY,
	PIECEWISECONSTANT,
	PIECEWISECONTINUOUS,
	NOTDEFINED
};
export enum IfcTransformerTypeEnum {
	CURRENT,
	FREQUENCY,
	INVERTER,
	RECTIFIER,
	VOLTAGE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTransitionCode {
	DISCONTINUOUS,
	CONTINUOUS,
	CONTSAMEGRADIENT,
	CONTSAMEGRADIENTSAMECURVATURE
};
export enum IfcTransitionCurveType {
	BIQUADRATICPARABOLA,
	BLOSSCURVE,
	CLOTHOIDCURVE,
	COSINECURVE,
	CUBICPARABOLA,
	SINECURVE
};
export enum IfcTransportElementTypeEnum {
	ELEVATOR,
	ESCALATOR,
	MOVINGWALKWAY,
	CRANEWAY,
	LIFTINGGEAR,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcTrimmingPreference {
	CARTESIAN,
	PARAMETER,
	UNSPECIFIED
};
export enum IfcTubeBundleTypeEnum {
	FINNED,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcUnitEnum {
	ABSORBEDDOSEUNIT,
	AMOUNTOFSUBSTANCEUNIT,
	AREAUNIT,
	DOSEEQUIVALENTUNIT,
	ELECTRICCAPACITANCEUNIT,
	ELECTRICCHARGEUNIT,
	ELECTRICCONDUCTANCEUNIT,
	ELECTRICCURRENTUNIT,
	ELECTRICRESISTANCEUNIT,
	ELECTRICVOLTAGEUNIT,
	ENERGYUNIT,
	FORCEUNIT,
	FREQUENCYUNIT,
	ILLUMINANCEUNIT,
	INDUCTANCEUNIT,
	LENGTHUNIT,
	LUMINOUSFLUXUNIT,
	LUMINOUSINTENSITYUNIT,
	MAGNETICFLUXDENSITYUNIT,
	MAGNETICFLUXUNIT,
	MASSUNIT,
	PLANEANGLEUNIT,
	POWERUNIT,
	PRESSUREUNIT,
	RADIOACTIVITYUNIT,
	SOLIDANGLEUNIT,
	THERMODYNAMICTEMPERATUREUNIT,
	TIMEUNIT,
	VOLUMEUNIT,
	USERDEFINED
};
export enum IfcUnitaryControlElementTypeEnum {
	ALARMPANEL,
	CONTROLPANEL,
	GASDETECTIONPANEL,
	INDICATORPANEL,
	MIMICPANEL,
	HUMIDISTAT,
	THERMOSTAT,
	WEATHERSTATION,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcUnitaryEquipmentTypeEnum {
	AIRHANDLER,
	AIRCONDITIONINGUNIT,
	DEHUMIDIFIER,
	SPLITSYSTEM,
	ROOFTOPUNIT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcValveTypeEnum {
	AIRRELEASE,
	ANTIVACUUM,
	CHANGEOVER,
	CHECK,
	COMMISSIONING,
	DIVERTING,
	DRAWOFFCOCK,
	DOUBLECHECK,
	DOUBLEREGULATING,
	FAUCET,
	FLUSHING,
	GASCOCK,
	GASTAP,
	ISOLATING,
	MIXING,
	PRESSUREREDUCING,
	PRESSURERELIEF,
	REGULATING,
	SAFETYCUTOFF,
	STEAMTRAP,
	STOPCOCK,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcVibrationDamperTypeEnum {
	BENDING_YIELD,
	SHEAR_YIELD,
	AXIAL_YIELD,
	FRICTION,
	VISCOUS,
	RUBBER,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcVibrationIsolatorTypeEnum {
	COMPRESSION,
	SPRING,
	BASE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcVoidingFeatureTypeEnum {
	CUTOUT,
	NOTCH,
	HOLE,
	MITER,
	CHAMFER,
	EDGE,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWallTypeEnum {
	MOVABLE,
	PARAPET,
	PARTITIONING,
	PLUMBINGWALL,
	SHEAR,
	SOLIDWALL,
	STANDARD,
	POLYGONAL,
	ELEMENTEDWALL,
	RETAININGWALL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWasteTerminalTypeEnum {
	FLOORTRAP,
	FLOORWASTE,
	GULLYSUMP,
	GULLYTRAP,
	ROOFDRAIN,
	WASTEDISPOSALUNIT,
	WASTETRAP,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWindowPanelOperationEnum {
	SIDEHUNGRIGHTHAND,
	SIDEHUNGLEFTHAND,
	TILTANDTURNRIGHTHAND,
	TILTANDTURNLEFTHAND,
	TOPHUNG,
	BOTTOMHUNG,
	PIVOTHORIZONTAL,
	PIVOTVERTICAL,
	SLIDINGHORIZONTAL,
	SLIDINGVERTICAL,
	REMOVABLECASEMENT,
	FIXEDCASEMENT,
	OTHEROPERATION,
	NOTDEFINED
};
export enum IfcWindowPanelPositionEnum {
	LEFT,
	MIDDLE,
	RIGHT,
	BOTTOM,
	TOP,
	NOTDEFINED
};
export enum IfcWindowStyleConstructionEnum {
	ALUMINIUM,
	HIGH_GRADE_STEEL,
	STEEL,
	WOOD,
	ALUMINIUM_WOOD,
	PLASTIC,
	OTHER_CONSTRUCTION,
	NOTDEFINED
};
export enum IfcWindowStyleOperationEnum {
	SINGLE_PANEL,
	DOUBLE_PANEL_VERTICAL,
	DOUBLE_PANEL_HORIZONTAL,
	TRIPLE_PANEL_VERTICAL,
	TRIPLE_PANEL_BOTTOM,
	TRIPLE_PANEL_TOP,
	TRIPLE_PANEL_LEFT,
	TRIPLE_PANEL_RIGHT,
	TRIPLE_PANEL_HORIZONTAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWindowTypeEnum {
	WINDOW,
	SKYLIGHT,
	LIGHTDOME,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWindowTypePartitioningEnum {
	SINGLE_PANEL,
	DOUBLE_PANEL_VERTICAL,
	DOUBLE_PANEL_HORIZONTAL,
	TRIPLE_PANEL_VERTICAL,
	TRIPLE_PANEL_BOTTOM,
	TRIPLE_PANEL_TOP,
	TRIPLE_PANEL_LEFT,
	TRIPLE_PANEL_RIGHT,
	TRIPLE_PANEL_HORIZONTAL,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWorkCalendarTypeEnum {
	FIRSTSHIFT,
	SECONDSHIFT,
	THIRDSHIFT,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWorkPlanTypeEnum {
	ACTUAL,
	BASELINE,
	PLANNED,
	USERDEFINED,
	NOTDEFINED
};
export enum IfcWorkScheduleTypeEnum {
	ACTUAL,
	BASELINE,
	PLANNED,
	USERDEFINED,
	NOTDEFINED
};
export type IfcActorSelect = 
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
;
export type IfcAppliedValueSelect = 
|IfcMeasureWithUnit
|IfcReference
|IfcValue
;
export type IfcAxis2Placement = 
|IfcAxis2Placement2D
|IfcAxis2Placement3D
;
export type IfcBendingParameterSelect = 
|IfcLengthMeasure
|IfcPlaneAngleMeasure
;
export type IfcBooleanOperand = 
|IfcBooleanResult
|IfcCsgPrimitive3D
|IfcHalfSpaceSolid
|IfcSolidModel
|IfcTessellatedFaceSet
;
export type IfcClassificationReferenceSelect = 
|IfcClassification
|IfcClassificationReference
;
export type IfcClassificationSelect = 
|IfcClassification
|IfcClassificationReference
;
export type IfcColour = 
|IfcColourSpecification
|IfcPreDefinedColour
;
export type IfcColourOrFactor = 
|IfcColourRgb
|IfcNormalisedRatioMeasure
;
export type IfcCoordinateReferenceSystemSelect = 
|IfcCoordinateReferenceSystem
|IfcGeometricRepresentationContext
;
export type IfcCsgSelect = 
|IfcBooleanResult
|IfcCsgPrimitive3D
;
export type IfcCurveFontOrScaledCurveFontSelect = 
|IfcCurveStyleFontAndScaling
|IfcCurveStyleFontSelect
;
export type IfcCurveOnSurface = 
|IfcCompositeCurveOnSurface
|IfcPcurve
|IfcSurfaceCurve
;
export type IfcCurveOrEdgeCurve = 
|IfcBoundedCurve
|IfcEdgeCurve
;
export type IfcCurveStyleFontSelect = 
|IfcCurveStyleFont
|IfcPreDefinedCurveFont
;
export type IfcDefinitionSelect = 
|IfcObjectDefinition
|IfcPropertyDefinition
;
export type IfcDerivedMeasureValue = 
|IfcAbsorbedDoseMeasure
|IfcAccelerationMeasure
|IfcAngularVelocityMeasure
|IfcAreaDensityMeasure
|IfcCompoundPlaneAngleMeasure
|IfcCurvatureMeasure
|IfcDoseEquivalentMeasure
|IfcDynamicViscosityMeasure
|IfcElectricCapacitanceMeasure
|IfcElectricChargeMeasure
|IfcElectricConductanceMeasure
|IfcElectricResistanceMeasure
|IfcElectricVoltageMeasure
|IfcEnergyMeasure
|IfcForceMeasure
|IfcFrequencyMeasure
|IfcHeatFluxDensityMeasure
|IfcHeatingValueMeasure
|IfcIlluminanceMeasure
|IfcInductanceMeasure
|IfcIntegerCountRateMeasure
|IfcIonConcentrationMeasure
|IfcIsothermalMoistureCapacityMeasure
|IfcKinematicViscosityMeasure
|IfcLinearForceMeasure
|IfcLinearMomentMeasure
|IfcLinearStiffnessMeasure
|IfcLinearVelocityMeasure
|IfcLuminousFluxMeasure
|IfcLuminousIntensityDistributionMeasure
|IfcMagneticFluxDensityMeasure
|IfcMagneticFluxMeasure
|IfcMassDensityMeasure
|IfcMassFlowRateMeasure
|IfcMassPerLengthMeasure
|IfcModulusOfElasticityMeasure
|IfcModulusOfLinearSubgradeReactionMeasure
|IfcModulusOfRotationalSubgradeReactionMeasure
|IfcModulusOfSubgradeReactionMeasure
|IfcMoistureDiffusivityMeasure
|IfcMolecularWeightMeasure
|IfcMomentOfInertiaMeasure
|IfcMonetaryMeasure
|IfcPHMeasure
|IfcPlanarForceMeasure
|IfcPowerMeasure
|IfcPressureMeasure
|IfcRadioActivityMeasure
|IfcRotationalFrequencyMeasure
|IfcRotationalMassMeasure
|IfcRotationalStiffnessMeasure
|IfcSectionModulusMeasure
|IfcSectionalAreaIntegralMeasure
|IfcShearModulusMeasure
|IfcSoundPowerLevelMeasure
|IfcSoundPowerMeasure
|IfcSoundPressureLevelMeasure
|IfcSoundPressureMeasure
|IfcSpecificHeatCapacityMeasure
|IfcTemperatureGradientMeasure
|IfcTemperatureRateOfChangeMeasure
|IfcThermalAdmittanceMeasure
|IfcThermalConductivityMeasure
|IfcThermalExpansionCoefficientMeasure
|IfcThermalResistanceMeasure
|IfcThermalTransmittanceMeasure
|IfcTorqueMeasure
|IfcVaporPermeabilityMeasure
|IfcVolumetricFlowRateMeasure
|IfcWarpingConstantMeasure
|IfcWarpingMomentMeasure
;
export type IfcDocumentSelect = 
|IfcDocumentInformation
|IfcDocumentReference
;
export type IfcFillStyleSelect = 
|IfcColour
|IfcExternallyDefinedHatchStyle
|IfcFillAreaStyleHatching
|IfcFillAreaStyleTiles
;
export type IfcGeometricSetSelect = 
|IfcCurve
|IfcPoint
|IfcSurface
;
export type IfcGridPlacementDirectionSelect = 
|IfcDirection
|IfcVirtualGridIntersection
;
export type IfcHatchLineDistanceSelect = 
|IfcPositiveLengthMeasure
|IfcVector
;
export type IfcLayeredItem = 
|IfcRepresentation
|IfcRepresentationItem
;
export type IfcLibrarySelect = 
|IfcLibraryInformation
|IfcLibraryReference
;
export type IfcLightDistributionDataSourceSelect = 
|IfcExternalReference
|IfcLightIntensityDistribution
;
export type IfcMaterialSelect = 
|IfcMaterialDefinition
|IfcMaterialList
|IfcMaterialUsageDefinition
;
export type IfcMeasureValue = 
|IfcAmountOfSubstanceMeasure
|IfcAreaMeasure
|IfcComplexNumber
|IfcContextDependentMeasure
|IfcCountMeasure
|IfcDescriptiveMeasure
|IfcElectricCurrentMeasure
|IfcLengthMeasure
|IfcLuminousIntensityMeasure
|IfcMassMeasure
|IfcNonNegativeLengthMeasure
|IfcNormalisedRatioMeasure
|IfcNumericMeasure
|IfcParameterValue
|IfcPlaneAngleMeasure
|IfcPositiveLengthMeasure
|IfcPositivePlaneAngleMeasure
|IfcPositiveRatioMeasure
|IfcRatioMeasure
|IfcSolidAngleMeasure
|IfcThermodynamicTemperatureMeasure
|IfcTimeMeasure
|IfcVolumeMeasure
;
export type IfcMetricValueSelect = 
|IfcAppliedValue
|IfcMeasureWithUnit
|IfcReference
|IfcTable
|IfcTimeSeries
|IfcValue
;
export type IfcModulusOfRotationalSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfRotationalSubgradeReactionMeasure
;
export type IfcModulusOfSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfSubgradeReactionMeasure
;
export type IfcModulusOfTranslationalSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfLinearSubgradeReactionMeasure
;
export type IfcObjectReferenceSelect = 
|IfcAddress
|IfcAppliedValue
|IfcExternalReference
|IfcMaterialDefinition
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
|IfcTable
|IfcTimeSeries
;
export type IfcPointOrVertexPoint = 
|IfcPoint
|IfcVertexPoint
;
export type IfcPresentationStyleSelect = 
|IfcCurveStyle
|IfcFillAreaStyle
|IfcNullStyle
|IfcSurfaceStyle
|IfcTextStyle
;
export type IfcProcessSelect = 
|IfcProcess
|IfcTypeProcess
;
export type IfcProductRepresentationSelect = 
|IfcProductDefinitionShape
|IfcRepresentationMap
;
export type IfcProductSelect = 
|IfcProduct
|IfcTypeProduct
;
export type IfcPropertySetDefinitionSelect = 
|IfcPropertySetDefinition
|IfcPropertySetDefinitionSet
;
export type IfcResourceObjectSelect = 
|IfcActorRole
|IfcAppliedValue
|IfcApproval
|IfcConstraint
|IfcContextDependentUnit
|IfcConversionBasedUnit
|IfcExternalInformation
|IfcExternalReference
|IfcMaterialDefinition
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
|IfcPhysicalQuantity
|IfcProfileDef
|IfcPropertyAbstraction
|IfcShapeAspect
|IfcTimeSeries
;
export type IfcResourceSelect = 
|IfcResource
|IfcTypeResource
;
export type IfcRotationalStiffnessSelect = 
|IfcBoolean
|IfcRotationalStiffnessMeasure
;
export type IfcSegmentIndexSelect = 
|IfcArcIndex
|IfcLineIndex
;
export type IfcShell = 
|IfcClosedShell
|IfcOpenShell
;
export type IfcSimpleValue = 
|IfcBinary
|IfcBoolean
|IfcDate
|IfcDateTime
|IfcDuration
|IfcIdentifier
|IfcInteger
|IfcLabel
|IfcLogical
|IfcPositiveInteger
|IfcReal
|IfcText
|IfcTime
|IfcTimeStamp
;
export type IfcSizeSelect = 
|IfcDescriptiveMeasure
|IfcLengthMeasure
|IfcNormalisedRatioMeasure
|IfcPositiveLengthMeasure
|IfcPositiveRatioMeasure
|IfcRatioMeasure
;
export type IfcSolidOrShell = 
|IfcClosedShell
|IfcSolidModel
;
export type IfcSpaceBoundarySelect = 
|IfcExternalSpatialElement
|IfcSpace
;
export type IfcSpecularHighlightSelect = 
|IfcSpecularExponent
|IfcSpecularRoughness
;
export type IfcStructuralActivityAssignmentSelect = 
|IfcElement
|IfcStructuralItem
;
export type IfcStyleAssignmentSelect = 
|IfcPresentationStyle
|IfcPresentationStyleAssignment
;
export type IfcSurfaceOrFaceSurface = 
|IfcFaceBasedSurfaceModel
|IfcFaceSurface
|IfcSurface
;
export type IfcSurfaceStyleElementSelect = 
|IfcExternallyDefinedSurfaceStyle
|IfcSurfaceStyleLighting
|IfcSurfaceStyleRefraction
|IfcSurfaceStyleShading
|IfcSurfaceStyleWithTextures
;
export type IfcTextFontSelect = 
|IfcExternallyDefinedTextFont
|IfcPreDefinedTextFont
;
export type IfcTimeOrRatioSelect = 
|IfcDuration
|IfcRatioMeasure
;
export type IfcTranslationalStiffnessSelect = 
|IfcBoolean
|IfcLinearStiffnessMeasure
;
export type IfcTrimmingSelect = 
|IfcCartesianPoint
|IfcParameterValue
;
export type IfcUnit = 
|IfcDerivedUnit
|IfcMonetaryUnit
|IfcNamedUnit
;
export type IfcValue = 
|IfcDerivedMeasureValue
|IfcMeasureValue
|IfcSimpleValue
;
export type IfcVectorOrDirection = 
|IfcDirection
|IfcVector
;
export type IfcWarpingStiffnessSelect = 
|IfcBoolean
|IfcWarpingMomentMeasure
;
export class IfcActionRequest {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcActionRequestTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcActionRequestTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcActor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheActor: IfcActorSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheActor: IfcActorSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcActorRole {
	constructor(Role: IfcRoleEnum , UserDefinedRole: IfcLabel | null, Description: IfcText | null)
	{
		this.Role = Role;
		this.UserDefinedRole = UserDefinedRole;
		this.Description = Description;
	}
	Role: IfcRoleEnum ;
	UserDefinedRole: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcActuator {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcActuatorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcActuatorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcActuatorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcActuatorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcActuatorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAddress {
	constructor(Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
	}
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAdvancedBrep {
	constructor(Outer: Handle<IfcClosedShell> )
	{
		this.Outer = Outer;
	}
	Outer: Handle<IfcClosedShell> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAdvancedBrepWithVoids {
	constructor(Outer: Handle<IfcClosedShell> , Voids: Handle<IfcClosedShell>[] )
	{
		this.Outer = Outer;
		this.Voids = Voids;
	}
	Outer: Handle<IfcClosedShell> ;
	Voids: Handle<IfcClosedShell>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAdvancedFace {
	constructor(Bounds: Handle<IfcFaceBound>[] , FaceSurface: Handle<IfcSurface> , SameSense: IfcBoolean )
	{
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	Bounds: Handle<IfcFaceBound>[] ;
	FaceSurface: Handle<IfcSurface> ;
	SameSense: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirTerminalTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirTerminalTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirTerminalBox {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirTerminalBoxTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirTerminalBoxTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirTerminalBoxType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirTerminalBoxTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirTerminalBoxTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirTerminalTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirTerminalTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirToAirHeatRecovery {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirToAirHeatRecoveryTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirToAirHeatRecoveryTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAirToAirHeatRecoveryType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirToAirHeatRecoveryTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirToAirHeatRecoveryTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlarm {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAlarmTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAlarmTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlarmType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAlarmTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAlarmTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Axis: Handle<IfcCurve> , PredefinedType: IfcAlignmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Axis: Handle<IfcCurve> ;
	PredefinedType: IfcAlignmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DHorizontal {
	constructor(StartDistAlong: IfcLengthMeasure | null, Segments: Handle<IfcAlignment2DHorizontalSegment> )
	{
		this.StartDistAlong = StartDistAlong;
		this.Segments = Segments;
	}
	StartDistAlong: IfcLengthMeasure | null;
	Segments: Handle<IfcAlignment2DHorizontalSegment> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DHorizontalSegment {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, CurveGeometry: Handle<IfcCurveSegment2D> )
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.CurveGeometry = CurveGeometry;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	CurveGeometry: Handle<IfcCurveSegment2D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DSegment {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null)
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DVerSegCircularArc {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure , Radius: IfcPositiveLengthMeasure , IsConvex: IfcBoolean )
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.Radius = Radius;
		this.IsConvex = IsConvex;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	IsConvex: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DVerSegLine {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure )
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DVerSegParabolicArc {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure , ParabolaConstant: IfcPositiveLengthMeasure , IsConvex: IfcBoolean )
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.ParabolaConstant = ParabolaConstant;
		this.IsConvex = IsConvex;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	ParabolaConstant: IfcPositiveLengthMeasure ;
	IsConvex: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DVertical {
	constructor(Segments: Handle<IfcAlignment2DVerticalSegment> )
	{
		this.Segments = Segments;
	}
	Segments: Handle<IfcAlignment2DVerticalSegment> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignment2DVerticalSegment {
	constructor(TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure )
	{
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAlignmentCurve {
	constructor(Horizontal: Handle<IfcAlignment2DHorizontal> , Vertical: Handle<IfcAlignment2DVertical> | null, Tag: IfcLabel | null)
	{
		this.Horizontal = Horizontal;
		this.Vertical = Vertical;
		this.Tag = Tag;
	}
	Horizontal: Handle<IfcAlignment2DHorizontal> ;
	Vertical: Handle<IfcAlignment2DVertical> | null;
	Tag: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAnnotation {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAnnotationFillArea {
	constructor(OuterBoundary: Handle<IfcCurve> , InnerBoundaries: Handle<IfcCurve>[] | null)
	{
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	OuterBoundary: Handle<IfcCurve> ;
	InnerBoundaries: Handle<IfcCurve>[] | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcApplication {
	constructor(ApplicationDeveloper: Handle<IfcOrganization> , Version: IfcLabel , ApplicationFullName: IfcLabel , ApplicationIdentifier: IfcIdentifier )
	{
		this.ApplicationDeveloper = ApplicationDeveloper;
		this.Version = Version;
		this.ApplicationFullName = ApplicationFullName;
		this.ApplicationIdentifier = ApplicationIdentifier;
	}
	ApplicationDeveloper: Handle<IfcOrganization> ;
	Version: IfcLabel ;
	ApplicationFullName: IfcLabel ;
	ApplicationIdentifier: IfcIdentifier ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAppliedValue {
	constructor(Name: IfcLabel | null, Description: IfcText | null, AppliedValue: IfcAppliedValueSelect | null, UnitBasis: Handle<IfcMeasureWithUnit> | null, ApplicableDate: IfcDate | null, FixedUntilDate: IfcDate | null, Category: IfcLabel | null, Condition: IfcLabel | null, ArithmeticOperator: IfcArithmeticOperatorEnum | null, Components: Handle<IfcAppliedValue> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	AppliedValue: IfcAppliedValueSelect | null;
	UnitBasis: Handle<IfcMeasureWithUnit> | null;
	ApplicableDate: IfcDate | null;
	FixedUntilDate: IfcDate | null;
	Category: IfcLabel | null;
	Condition: IfcLabel | null;
	ArithmeticOperator: IfcArithmeticOperatorEnum | null;
	Components: Handle<IfcAppliedValue> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcApproval {
	constructor(Identifier: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, TimeOfApproval: IfcDateTime | null, Status: IfcLabel | null, Level: IfcLabel | null, Qualifier: IfcText | null, RequestingApproval: IfcActorSelect | null, GivingApproval: IfcActorSelect | null)
	{
		this.Identifier = Identifier;
		this.Name = Name;
		this.Description = Description;
		this.TimeOfApproval = TimeOfApproval;
		this.Status = Status;
		this.Level = Level;
		this.Qualifier = Qualifier;
		this.RequestingApproval = RequestingApproval;
		this.GivingApproval = GivingApproval;
	}
	Identifier: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TimeOfApproval: IfcDateTime | null;
	Status: IfcLabel | null;
	Level: IfcLabel | null;
	Qualifier: IfcText | null;
	RequestingApproval: IfcActorSelect | null;
	GivingApproval: IfcActorSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcApprovalRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingApproval: Handle<IfcApproval> , RelatedApprovals: Handle<IfcApproval>[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingApproval = RelatingApproval;
		this.RelatedApprovals = RelatedApprovals;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingApproval: Handle<IfcApproval> ;
	RelatedApprovals: Handle<IfcApproval>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcArbitraryClosedProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, OuterCurve: Handle<IfcCurve> )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	OuterCurve: Handle<IfcCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcArbitraryOpenProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Curve: Handle<IfcBoundedCurve> )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Curve: Handle<IfcBoundedCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcArbitraryProfileDefWithVoids {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, OuterCurve: Handle<IfcCurve> , InnerCurves: Handle<IfcCurve>[] )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
		this.InnerCurves = InnerCurves;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	OuterCurve: Handle<IfcCurve> ;
	InnerCurves: Handle<IfcCurve>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAsset {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, OriginalValue: Handle<IfcCostValue> | null, CurrentValue: Handle<IfcCostValue> | null, TotalReplacementCost: Handle<IfcCostValue> | null, Owner: IfcActorSelect | null, User: IfcActorSelect | null, ResponsiblePerson: Handle<IfcPerson> | null, IncorporationDate: IfcDate | null, DepreciatedValue: Handle<IfcCostValue> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.OriginalValue = OriginalValue;
		this.CurrentValue = CurrentValue;
		this.TotalReplacementCost = TotalReplacementCost;
		this.Owner = Owner;
		this.User = User;
		this.ResponsiblePerson = ResponsiblePerson;
		this.IncorporationDate = IncorporationDate;
		this.DepreciatedValue = DepreciatedValue;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	OriginalValue: Handle<IfcCostValue> | null;
	CurrentValue: Handle<IfcCostValue> | null;
	TotalReplacementCost: Handle<IfcCostValue> | null;
	Owner: IfcActorSelect | null;
	User: IfcActorSelect | null;
	ResponsiblePerson: Handle<IfcPerson> | null;
	IncorporationDate: IfcDate | null;
	DepreciatedValue: Handle<IfcCostValue> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAsymmetricIShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, BottomFlangeWidth: IfcPositiveLengthMeasure , OverallDepth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , BottomFlangeThickness: IfcPositiveLengthMeasure , BottomFlangeFilletRadius: IfcNonNegativeLengthMeasure | null, TopFlangeWidth: IfcPositiveLengthMeasure , TopFlangeThickness: IfcPositiveLengthMeasure | null, TopFlangeFilletRadius: IfcNonNegativeLengthMeasure | null, BottomFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, BottomFlangeSlope: IfcPlaneAngleMeasure | null, TopFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, TopFlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomFlangeWidth = BottomFlangeWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.BottomFlangeThickness = BottomFlangeThickness;
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		this.BottomFlangeSlope = BottomFlangeSlope;
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		this.TopFlangeSlope = TopFlangeSlope;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	BottomFlangeWidth: IfcPositiveLengthMeasure ;
	OverallDepth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	BottomFlangeThickness: IfcPositiveLengthMeasure ;
	BottomFlangeFilletRadius: IfcNonNegativeLengthMeasure | null;
	TopFlangeWidth: IfcPositiveLengthMeasure ;
	TopFlangeThickness: IfcPositiveLengthMeasure | null;
	TopFlangeFilletRadius: IfcNonNegativeLengthMeasure | null;
	BottomFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	BottomFlangeSlope: IfcPlaneAngleMeasure | null;
	TopFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	TopFlangeSlope: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAudioVisualAppliance {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAudioVisualApplianceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAudioVisualApplianceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAudioVisualApplianceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAudioVisualApplianceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAudioVisualApplianceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAxis1Placement {
	constructor(Location: Handle<IfcCartesianPoint> , Axis: Handle<IfcDirection> | null)
	{
		this.Location = Location;
		this.Axis = Axis;
	}
	Location: Handle<IfcCartesianPoint> ;
	Axis: Handle<IfcDirection> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAxis2Placement2D {
	constructor(Location: Handle<IfcCartesianPoint> , RefDirection: Handle<IfcDirection> | null)
	{
		this.Location = Location;
		this.RefDirection = RefDirection;
	}
	Location: Handle<IfcCartesianPoint> ;
	RefDirection: Handle<IfcDirection> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcAxis2Placement3D {
	constructor(Location: Handle<IfcCartesianPoint> , Axis: Handle<IfcDirection> | null, RefDirection: Handle<IfcDirection> | null)
	{
		this.Location = Location;
		this.Axis = Axis;
		this.RefDirection = RefDirection;
	}
	Location: Handle<IfcCartesianPoint> ;
	Axis: Handle<IfcDirection> | null;
	RefDirection: Handle<IfcDirection> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBSplineCurve {
	constructor(Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical )
	{
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
	}
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBSplineCurveWithKnots {
	constructor(Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical , KnotMultiplicities: IfcInteger , Knots: IfcParameterValue , KnotSpec: IfcKnotType )
	{
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
	}
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	KnotMultiplicities: IfcInteger ;
	Knots: IfcParameterValue ;
	KnotSpec: IfcKnotType ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBSplineSurface {
	constructor(UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical )
	{
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
	}
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBSplineSurfaceWithKnots {
	constructor(UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical , UMultiplicities: IfcInteger , VMultiplicities: IfcInteger , UKnots: IfcParameterValue , VKnots: IfcParameterValue , KnotSpec: IfcKnotType )
	{
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
		this.UMultiplicities = UMultiplicities;
		this.VMultiplicities = VMultiplicities;
		this.UKnots = UKnots;
		this.VKnots = VKnots;
		this.KnotSpec = KnotSpec;
	}
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	UMultiplicities: IfcInteger ;
	VMultiplicities: IfcInteger ;
	UKnots: IfcParameterValue ;
	VKnots: IfcParameterValue ;
	KnotSpec: IfcKnotType ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBeam {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBeamTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBeamTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBeamStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBeamTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBeamTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBeamType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBeamTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBeamTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBearing {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBearingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBearingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBearingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBearingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBearingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBlobTexture {
	constructor(RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier | null, RasterFormat: IfcIdentifier , RasterCode: IfcBinary )
	{
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.RasterFormat = RasterFormat;
		this.RasterCode = RasterCode;
	}
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier | null;
	RasterFormat: IfcIdentifier ;
	RasterCode: IfcBinary ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBlock {
	constructor(Position: Handle<IfcAxis2Placement3D> , XLength: IfcPositiveLengthMeasure , YLength: IfcPositiveLengthMeasure , ZLength: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.XLength = XLength;
		this.YLength = YLength;
		this.ZLength = ZLength;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	XLength: IfcPositiveLengthMeasure ;
	YLength: IfcPositiveLengthMeasure ;
	ZLength: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoiler {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBoilerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBoilerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoilerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBoilerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBoilerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBooleanClippingResult {
	constructor(Operator: IfcBooleanOperator , FirstOperand: IfcBooleanOperand , SecondOperand: IfcBooleanOperand )
	{
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	Operator: IfcBooleanOperator ;
	FirstOperand: IfcBooleanOperand ;
	SecondOperand: IfcBooleanOperand ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBooleanResult {
	constructor(Operator: IfcBooleanOperator , FirstOperand: IfcBooleanOperand , SecondOperand: IfcBooleanOperand )
	{
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	Operator: IfcBooleanOperator ;
	FirstOperand: IfcBooleanOperand ;
	SecondOperand: IfcBooleanOperand ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryCondition {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryCurve {
	constructor(Segments: Handle<IfcCompositeCurveSegment> , SelfIntersect: IfcLogical )
	{
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	Segments: Handle<IfcCompositeCurveSegment> ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryEdgeCondition {
	constructor(Name: IfcLabel | null, TranslationalStiffnessByLengthX: IfcModulusOfTranslationalSubgradeReactionSelect | null, TranslationalStiffnessByLengthY: IfcModulusOfTranslationalSubgradeReactionSelect | null, TranslationalStiffnessByLengthZ: IfcModulusOfTranslationalSubgradeReactionSelect | null, RotationalStiffnessByLengthX: IfcModulusOfRotationalSubgradeReactionSelect | null, RotationalStiffnessByLengthY: IfcModulusOfRotationalSubgradeReactionSelect | null, RotationalStiffnessByLengthZ: IfcModulusOfRotationalSubgradeReactionSelect | null)
	{
		this.Name = Name;
		this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
		this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
		this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
		this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
		this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
		this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
	}
	Name: IfcLabel | null;
	TranslationalStiffnessByLengthX: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	TranslationalStiffnessByLengthY: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	TranslationalStiffnessByLengthZ: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthX: IfcModulusOfRotationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthY: IfcModulusOfRotationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthZ: IfcModulusOfRotationalSubgradeReactionSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryFaceCondition {
	constructor(Name: IfcLabel | null, TranslationalStiffnessByAreaX: IfcModulusOfSubgradeReactionSelect | null, TranslationalStiffnessByAreaY: IfcModulusOfSubgradeReactionSelect | null, TranslationalStiffnessByAreaZ: IfcModulusOfSubgradeReactionSelect | null)
	{
		this.Name = Name;
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
	}
	Name: IfcLabel | null;
	TranslationalStiffnessByAreaX: IfcModulusOfSubgradeReactionSelect | null;
	TranslationalStiffnessByAreaY: IfcModulusOfSubgradeReactionSelect | null;
	TranslationalStiffnessByAreaZ: IfcModulusOfSubgradeReactionSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryNodeCondition {
	constructor(Name: IfcLabel | null, TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null, RotationalStiffnessX: IfcRotationalStiffnessSelect | null, RotationalStiffnessY: IfcRotationalStiffnessSelect | null, RotationalStiffnessZ: IfcRotationalStiffnessSelect | null)
	{
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
	}
	Name: IfcLabel | null;
	TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null;
	RotationalStiffnessX: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessY: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessZ: IfcRotationalStiffnessSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundaryNodeConditionWarping {
	constructor(Name: IfcLabel | null, TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null, RotationalStiffnessX: IfcRotationalStiffnessSelect | null, RotationalStiffnessY: IfcRotationalStiffnessSelect | null, RotationalStiffnessZ: IfcRotationalStiffnessSelect | null, WarpingStiffness: IfcWarpingStiffnessSelect | null)
	{
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		this.WarpingStiffness = WarpingStiffness;
	}
	Name: IfcLabel | null;
	TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null;
	RotationalStiffnessX: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessY: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessZ: IfcRotationalStiffnessSelect | null;
	WarpingStiffness: IfcWarpingStiffnessSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundedCurve {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundedSurface {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoundingBox {
	constructor(Corner: Handle<IfcCartesianPoint> , XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , ZDim: IfcPositiveLengthMeasure )
	{
		this.Corner = Corner;
		this.XDim = XDim;
		this.YDim = YDim;
		this.ZDim = ZDim;
	}
	Corner: Handle<IfcCartesianPoint> ;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	ZDim: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBoxedHalfSpace {
	constructor(BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean , Enclosure: Handle<IfcBoundingBox> )
	{
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
		this.Enclosure = Enclosure;
	}
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	Enclosure: Handle<IfcBoundingBox> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBridge {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcBridgeTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcBridgeTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBridgePart {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcBridgePartTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcBridgePartTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuilding {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, ElevationOfRefHeight: IfcLengthMeasure | null, ElevationOfTerrain: IfcLengthMeasure | null, BuildingAddress: Handle<IfcPostalAddress> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		this.ElevationOfTerrain = ElevationOfTerrain;
		this.BuildingAddress = BuildingAddress;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	ElevationOfRefHeight: IfcLengthMeasure | null;
	ElevationOfTerrain: IfcLengthMeasure | null;
	BuildingAddress: Handle<IfcPostalAddress> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElementPart {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBuildingElementPartTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBuildingElementPartTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElementPartType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBuildingElementPartTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBuildingElementPartTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElementProxy {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBuildingElementProxyTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBuildingElementProxyTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElementProxyType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBuildingElementProxyTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBuildingElementProxyTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingStorey {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, Elevation: IfcLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.Elevation = Elevation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	Elevation: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBuildingSystem {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcBuildingSystemTypeEnum | null, LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcBuildingSystemTypeEnum | null;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBurner {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBurnerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBurnerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcBurnerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBurnerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBurnerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , Width: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure , Girth: IfcPositiveLengthMeasure , InternalFilletRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.WallThickness = WallThickness;
		this.Girth = Girth;
		this.InternalFilletRadius = InternalFilletRadius;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	Width: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	Girth: IfcPositiveLengthMeasure ;
	InternalFilletRadius: IfcNonNegativeLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableCarrierFitting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableCarrierFittingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableCarrierFittingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableCarrierFittingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableCarrierFittingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableCarrierFittingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableCarrierSegment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableCarrierSegmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableCarrierSegmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableCarrierSegmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableCarrierSegmentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableCarrierSegmentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableFitting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableFittingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableFittingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableFittingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableFittingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableFittingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableSegment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableSegmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableSegmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCableSegmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableSegmentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableSegmentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCaissonFoundation {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCaissonFoundationTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCaissonFoundationTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCaissonFoundationType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCaissonFoundationTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCaissonFoundationTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianPoint {
	constructor(Coordinates: IfcLengthMeasure )
	{
		this.Coordinates = Coordinates;
	}
	Coordinates: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianPointList {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianPointList2D {
	constructor(CoordList: IfcLengthMeasure , TagList: IfcLabel | null)
	{
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	CoordList: IfcLengthMeasure ;
	TagList: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianPointList3D {
	constructor(CoordList: IfcLengthMeasure , TagList: IfcLabel | null)
	{
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	CoordList: IfcLengthMeasure ;
	TagList: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianTransformationOperator {
	constructor(Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null)
	{
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianTransformationOperator2D {
	constructor(Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null)
	{
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianTransformationOperator2DnonUniform {
	constructor(Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Scale2: IfcReal | null)
	{
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Scale2 = Scale2;
	}
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Scale2: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianTransformationOperator3D {
	constructor(Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Axis3: Handle<IfcDirection> | null)
	{
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
	}
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Axis3: Handle<IfcDirection> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCartesianTransformationOperator3DnonUniform {
	constructor(Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Axis3: Handle<IfcDirection> | null, Scale2: IfcReal | null, Scale3: IfcReal | null)
	{
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
		this.Scale2 = Scale2;
		this.Scale3 = Scale3;
	}
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Axis3: Handle<IfcDirection> | null;
	Scale2: IfcReal | null;
	Scale3: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCenterLineProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Curve: Handle<IfcBoundedCurve> , Thickness: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
		this.Thickness = Thickness;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Curve: Handle<IfcBoundedCurve> ;
	Thickness: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcChiller {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcChillerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcChillerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcChillerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcChillerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcChillerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcChimney {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcChimneyTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcChimneyTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcChimneyType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcChimneyTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcChimneyTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCircle {
	constructor(Position: IfcAxis2Placement , Radius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Radius = Radius;
	}
	Position: IfcAxis2Placement ;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCircleHollowProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Radius: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
		this.WallThickness = WallThickness;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Radius: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCircleProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Radius: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCircularArcSegment2D {
	constructor(StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure , Radius: IfcPositiveLengthMeasure , IsCCW: IfcBoolean )
	{
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
		this.Radius = Radius;
		this.IsCCW = IsCCW;
	}
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	IsCCW: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCivilElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCivilElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcClassification {
	constructor(Source: IfcLabel | null, Edition: IfcLabel | null, EditionDate: IfcDate | null, Name: IfcLabel , Description: IfcText | null, Location: IfcURIReference | null, ReferenceTokens: IfcIdentifier | null)
	{
		this.Source = Source;
		this.Edition = Edition;
		this.EditionDate = EditionDate;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.ReferenceTokens = ReferenceTokens;
	}
	Source: IfcLabel | null;
	Edition: IfcLabel | null;
	EditionDate: IfcDate | null;
	Name: IfcLabel ;
	Description: IfcText | null;
	Location: IfcURIReference | null;
	ReferenceTokens: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcClassificationReference {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, ReferencedSource: IfcClassificationReferenceSelect | null, Description: IfcText | null, Sort: IfcIdentifier | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.ReferencedSource = ReferencedSource;
		this.Description = Description;
		this.Sort = Sort;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	ReferencedSource: IfcClassificationReferenceSelect | null;
	Description: IfcText | null;
	Sort: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcClosedShell {
	constructor(CfsFaces: Handle<IfcFace>[] )
	{
		this.CfsFaces = CfsFaces;
	}
	CfsFaces: Handle<IfcFace>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoil {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoilTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoilTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoilType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoilTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoilTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColourRgb {
	constructor(Name: IfcLabel | null, Red: IfcNormalisedRatioMeasure , Green: IfcNormalisedRatioMeasure , Blue: IfcNormalisedRatioMeasure )
	{
		this.Name = Name;
		this.Red = Red;
		this.Green = Green;
		this.Blue = Blue;
	}
	Name: IfcLabel | null;
	Red: IfcNormalisedRatioMeasure ;
	Green: IfcNormalisedRatioMeasure ;
	Blue: IfcNormalisedRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColourRgbList {
	constructor(ColourList: IfcNormalisedRatioMeasure )
	{
		this.ColourList = ColourList;
	}
	ColourList: IfcNormalisedRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColourSpecification {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColumn {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcColumnTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcColumnTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColumnStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcColumnTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcColumnTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcColumnType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcColumnTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcColumnTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCommunicationsAppliance {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCommunicationsApplianceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCommunicationsApplianceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCommunicationsApplianceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCommunicationsApplianceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCommunicationsApplianceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcComplexProperty {
	constructor(Name: IfcIdentifier , Description: IfcText | null, UsageName: IfcIdentifier , HasProperties: Handle<IfcProperty>[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.HasProperties = HasProperties;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UsageName: IfcIdentifier ;
	HasProperties: Handle<IfcProperty>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcComplexPropertyTemplate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, UsageName: IfcLabel | null, TemplateType: IfcComplexPropertyTemplateTypeEnum | null, HasPropertyTemplates: Handle<IfcPropertyTemplate>[] | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.TemplateType = TemplateType;
		this.HasPropertyTemplates = HasPropertyTemplates;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	UsageName: IfcLabel | null;
	TemplateType: IfcComplexPropertyTemplateTypeEnum | null;
	HasPropertyTemplates: Handle<IfcPropertyTemplate>[] | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompositeCurve {
	constructor(Segments: Handle<IfcCompositeCurveSegment> , SelfIntersect: IfcLogical )
	{
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	Segments: Handle<IfcCompositeCurveSegment> ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompositeCurveOnSurface {
	constructor(Segments: Handle<IfcCompositeCurveSegment> , SelfIntersect: IfcLogical )
	{
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	Segments: Handle<IfcCompositeCurveSegment> ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompositeCurveSegment {
	constructor(Transition: IfcTransitionCode , SameSense: IfcBoolean , ParentCurve: Handle<IfcCurve> )
	{
		this.Transition = Transition;
		this.SameSense = SameSense;
		this.ParentCurve = ParentCurve;
	}
	Transition: IfcTransitionCode ;
	SameSense: IfcBoolean ;
	ParentCurve: Handle<IfcCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompositeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Profiles: Handle<IfcProfileDef>[] , Label: IfcLabel | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Profiles = Profiles;
		this.Label = Label;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Profiles: Handle<IfcProfileDef>[] ;
	Label: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompressor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCompressorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCompressorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCompressorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCompressorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCompressorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCondenser {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCondenserTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCondenserTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCondenserType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCondenserTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCondenserTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConic {
	constructor(Position: IfcAxis2Placement )
	{
		this.Position = Position;
	}
	Position: IfcAxis2Placement ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectedFaceSet {
	constructor(CfsFaces: Handle<IfcFace>[] )
	{
		this.CfsFaces = CfsFaces;
	}
	CfsFaces: Handle<IfcFace>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionCurveGeometry {
	constructor(CurveOnRelatingElement: IfcCurveOrEdgeCurve , CurveOnRelatedElement: IfcCurveOrEdgeCurve | null)
	{
		this.CurveOnRelatingElement = CurveOnRelatingElement;
		this.CurveOnRelatedElement = CurveOnRelatedElement;
	}
	CurveOnRelatingElement: IfcCurveOrEdgeCurve ;
	CurveOnRelatedElement: IfcCurveOrEdgeCurve | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionGeometry {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionPointEccentricity {
	constructor(PointOnRelatingElement: IfcPointOrVertexPoint , PointOnRelatedElement: IfcPointOrVertexPoint | null, EccentricityInX: IfcLengthMeasure | null, EccentricityInY: IfcLengthMeasure | null, EccentricityInZ: IfcLengthMeasure | null)
	{
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
		this.EccentricityInX = EccentricityInX;
		this.EccentricityInY = EccentricityInY;
		this.EccentricityInZ = EccentricityInZ;
	}
	PointOnRelatingElement: IfcPointOrVertexPoint ;
	PointOnRelatedElement: IfcPointOrVertexPoint | null;
	EccentricityInX: IfcLengthMeasure | null;
	EccentricityInY: IfcLengthMeasure | null;
	EccentricityInZ: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionPointGeometry {
	constructor(PointOnRelatingElement: IfcPointOrVertexPoint , PointOnRelatedElement: IfcPointOrVertexPoint | null)
	{
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
	}
	PointOnRelatingElement: IfcPointOrVertexPoint ;
	PointOnRelatedElement: IfcPointOrVertexPoint | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionSurfaceGeometry {
	constructor(SurfaceOnRelatingElement: IfcSurfaceOrFaceSurface , SurfaceOnRelatedElement: IfcSurfaceOrFaceSurface | null)
	{
		this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
		this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
	}
	SurfaceOnRelatingElement: IfcSurfaceOrFaceSurface ;
	SurfaceOnRelatedElement: IfcSurfaceOrFaceSurface | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConnectionVolumeGeometry {
	constructor(VolumeOnRelatingElement: IfcSolidOrShell , VolumeOnRelatedElement: IfcSolidOrShell | null)
	{
		this.VolumeOnRelatingElement = VolumeOnRelatingElement;
		this.VolumeOnRelatedElement = VolumeOnRelatedElement;
	}
	VolumeOnRelatingElement: IfcSolidOrShell ;
	VolumeOnRelatedElement: IfcSolidOrShell | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstraint {
	constructor(Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionEquipmentResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionEquipmentResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionEquipmentResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionEquipmentResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionEquipmentResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionEquipmentResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionMaterialResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionMaterialResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionMaterialResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionMaterialResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionMaterialResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionMaterialResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionProductResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionProductResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionProductResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionProductResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionProductResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionProductResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConstructionResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcContext {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcContextDependentUnit {
	constructor(Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel )
	{
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
	}
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcControl {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcController {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcControllerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcControllerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcControllerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcControllerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcControllerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConversionBasedUnit {
	constructor(Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel , ConversionFactor: Handle<IfcMeasureWithUnit> )
	{
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
	}
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	ConversionFactor: Handle<IfcMeasureWithUnit> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcConversionBasedUnitWithOffset {
	constructor(Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel , ConversionFactor: Handle<IfcMeasureWithUnit> , ConversionOffset: IfcReal )
	{
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
		this.ConversionOffset = ConversionOffset;
	}
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	ConversionFactor: Handle<IfcMeasureWithUnit> ;
	ConversionOffset: IfcReal ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCooledBeam {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCooledBeamTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCooledBeamTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCooledBeamType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCooledBeamTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCooledBeamTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoolingTower {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoolingTowerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoolingTowerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoolingTowerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoolingTowerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoolingTowerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoordinateOperation {
	constructor(SourceCRS: IfcCoordinateReferenceSystemSelect , TargetCRS: Handle<IfcCoordinateReferenceSystem> )
	{
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
	}
	SourceCRS: IfcCoordinateReferenceSystemSelect ;
	TargetCRS: Handle<IfcCoordinateReferenceSystem> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoordinateReferenceSystem {
	constructor(Name: IfcLabel , Description: IfcText | null, GeodeticDatum: IfcIdentifier | null, VerticalDatum: IfcIdentifier | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.GeodeticDatum = GeodeticDatum;
		this.VerticalDatum = VerticalDatum;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	GeodeticDatum: IfcIdentifier | null;
	VerticalDatum: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCostItem {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcCostItemTypeEnum | null, CostValues: Handle<IfcCostValue> | null, CostQuantities: Handle<IfcPhysicalQuantity> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.CostValues = CostValues;
		this.CostQuantities = CostQuantities;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcCostItemTypeEnum | null;
	CostValues: Handle<IfcCostValue> | null;
	CostQuantities: Handle<IfcPhysicalQuantity> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCostSchedule {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcCostScheduleTypeEnum | null, Status: IfcLabel | null, SubmittedOn: IfcDateTime | null, UpdateDate: IfcDateTime | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.SubmittedOn = SubmittedOn;
		this.UpdateDate = UpdateDate;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcCostScheduleTypeEnum | null;
	Status: IfcLabel | null;
	SubmittedOn: IfcDateTime | null;
	UpdateDate: IfcDateTime | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCostValue {
	constructor(Name: IfcLabel | null, Description: IfcText | null, AppliedValue: IfcAppliedValueSelect | null, UnitBasis: Handle<IfcMeasureWithUnit> | null, ApplicableDate: IfcDate | null, FixedUntilDate: IfcDate | null, Category: IfcLabel | null, Condition: IfcLabel | null, ArithmeticOperator: IfcArithmeticOperatorEnum | null, Components: Handle<IfcAppliedValue> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	AppliedValue: IfcAppliedValueSelect | null;
	UnitBasis: Handle<IfcMeasureWithUnit> | null;
	ApplicableDate: IfcDate | null;
	FixedUntilDate: IfcDate | null;
	Category: IfcLabel | null;
	Condition: IfcLabel | null;
	ArithmeticOperator: IfcArithmeticOperatorEnum | null;
	Components: Handle<IfcAppliedValue> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCovering {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoveringTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoveringTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCoveringType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoveringTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoveringTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCrewResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcCrewResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcCrewResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCrewResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcCrewResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcCrewResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCsgPrimitive3D {
	constructor(Position: Handle<IfcAxis2Placement3D> )
	{
		this.Position = Position;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCsgSolid {
	constructor(TreeRootExpression: IfcCsgSelect )
	{
		this.TreeRootExpression = TreeRootExpression;
	}
	TreeRootExpression: IfcCsgSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurrencyRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingMonetaryUnit: Handle<IfcMonetaryUnit> , RelatedMonetaryUnit: Handle<IfcMonetaryUnit> , ExchangeRate: IfcPositiveRatioMeasure , RateDateTime: IfcDateTime | null, RateSource: Handle<IfcLibraryInformation> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingMonetaryUnit = RelatingMonetaryUnit;
		this.RelatedMonetaryUnit = RelatedMonetaryUnit;
		this.ExchangeRate = ExchangeRate;
		this.RateDateTime = RateDateTime;
		this.RateSource = RateSource;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingMonetaryUnit: Handle<IfcMonetaryUnit> ;
	RelatedMonetaryUnit: Handle<IfcMonetaryUnit> ;
	ExchangeRate: IfcPositiveRatioMeasure ;
	RateDateTime: IfcDateTime | null;
	RateSource: Handle<IfcLibraryInformation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurtainWall {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCurtainWallTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCurtainWallTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurtainWallType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCurtainWallTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCurtainWallTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurve {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveBoundedPlane {
	constructor(BasisSurface: Handle<IfcPlane> , OuterBoundary: Handle<IfcCurve> , InnerBoundaries: Handle<IfcCurve>[] )
	{
		this.BasisSurface = BasisSurface;
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	BasisSurface: Handle<IfcPlane> ;
	OuterBoundary: Handle<IfcCurve> ;
	InnerBoundaries: Handle<IfcCurve>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveBoundedSurface {
	constructor(BasisSurface: Handle<IfcSurface> , Boundaries: Handle<IfcBoundaryCurve>[] , ImplicitOuter: IfcBoolean )
	{
		this.BasisSurface = BasisSurface;
		this.Boundaries = Boundaries;
		this.ImplicitOuter = ImplicitOuter;
	}
	BasisSurface: Handle<IfcSurface> ;
	Boundaries: Handle<IfcBoundaryCurve>[] ;
	ImplicitOuter: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveSegment2D {
	constructor(StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure )
	{
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveStyle {
	constructor(Name: IfcLabel | null, CurveFont: IfcCurveFontOrScaledCurveFontSelect | null, CurveWidth: IfcSizeSelect | null, CurveColour: IfcColour | null, ModelOrDraughting: IfcBoolean | null)
	{
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveWidth = CurveWidth;
		this.CurveColour = CurveColour;
		this.ModelOrDraughting = ModelOrDraughting;
	}
	Name: IfcLabel | null;
	CurveFont: IfcCurveFontOrScaledCurveFontSelect | null;
	CurveWidth: IfcSizeSelect | null;
	CurveColour: IfcColour | null;
	ModelOrDraughting: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveStyleFont {
	constructor(Name: IfcLabel | null, PatternList: Handle<IfcCurveStyleFontPattern> )
	{
		this.Name = Name;
		this.PatternList = PatternList;
	}
	Name: IfcLabel | null;
	PatternList: Handle<IfcCurveStyleFontPattern> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveStyleFontAndScaling {
	constructor(Name: IfcLabel | null, CurveFont: IfcCurveStyleFontSelect , CurveFontScaling: IfcPositiveRatioMeasure )
	{
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveFontScaling = CurveFontScaling;
	}
	Name: IfcLabel | null;
	CurveFont: IfcCurveStyleFontSelect ;
	CurveFontScaling: IfcPositiveRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCurveStyleFontPattern {
	constructor(VisibleSegmentLength: IfcLengthMeasure , InvisibleSegmentLength: IfcPositiveLengthMeasure )
	{
		this.VisibleSegmentLength = VisibleSegmentLength;
		this.InvisibleSegmentLength = InvisibleSegmentLength;
	}
	VisibleSegmentLength: IfcLengthMeasure ;
	InvisibleSegmentLength: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcCylindricalSurface {
	constructor(Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Radius = Radius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDamper {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDamperTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDamperTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDamperType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDamperTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDamperTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDeepFoundation {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDeepFoundationType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDerivedProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, ParentProfile: Handle<IfcProfileDef> , Operator: Handle<IfcCartesianTransformationOperator2D> , Label: IfcLabel | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	ParentProfile: Handle<IfcProfileDef> ;
	Operator: Handle<IfcCartesianTransformationOperator2D> ;
	Label: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDerivedUnit {
	constructor(Elements: Handle<IfcDerivedUnitElement>[] , UnitType: IfcDerivedUnitEnum , UserDefinedType: IfcLabel | null)
	{
		this.Elements = Elements;
		this.UnitType = UnitType;
		this.UserDefinedType = UserDefinedType;
	}
	Elements: Handle<IfcDerivedUnitElement>[] ;
	UnitType: IfcDerivedUnitEnum ;
	UserDefinedType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDerivedUnitElement {
	constructor(Unit: Handle<IfcNamedUnit> , Exponent: Handle<number> )
	{
		this.Unit = Unit;
		this.Exponent = Exponent;
	}
	Unit: Handle<IfcNamedUnit> ;
	Exponent: Handle<number> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDimensionalExponents {
	constructor(LengthExponent: Handle<number> , MassExponent: Handle<number> , TimeExponent: Handle<number> , ElectricCurrentExponent: Handle<number> , ThermodynamicTemperatureExponent: Handle<number> , AmountOfSubstanceExponent: Handle<number> , LuminousIntensityExponent: Handle<number> )
	{
		this.LengthExponent = LengthExponent;
		this.MassExponent = MassExponent;
		this.TimeExponent = TimeExponent;
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		this.LuminousIntensityExponent = LuminousIntensityExponent;
	}
	LengthExponent: Handle<number> ;
	MassExponent: Handle<number> ;
	TimeExponent: Handle<number> ;
	ElectricCurrentExponent: Handle<number> ;
	ThermodynamicTemperatureExponent: Handle<number> ;
	AmountOfSubstanceExponent: Handle<number> ;
	LuminousIntensityExponent: Handle<number> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDirection {
	constructor(DirectionRatios: IfcReal )
	{
		this.DirectionRatios = DirectionRatios;
	}
	DirectionRatios: IfcReal ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDiscreteAccessory {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDiscreteAccessoryTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDiscreteAccessoryTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDiscreteAccessoryType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDiscreteAccessoryTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDiscreteAccessoryTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistanceExpression {
	constructor(DistanceAlong: IfcLengthMeasure , OffsetLateral: IfcLengthMeasure | null, OffsetVertical: IfcLengthMeasure | null, OffsetLongitudinal: IfcLengthMeasure | null, AlongHorizontal: IfcBoolean | null)
	{
		this.DistanceAlong = DistanceAlong;
		this.OffsetLateral = OffsetLateral;
		this.OffsetVertical = OffsetVertical;
		this.OffsetLongitudinal = OffsetLongitudinal;
		this.AlongHorizontal = AlongHorizontal;
	}
	DistanceAlong: IfcLengthMeasure ;
	OffsetLateral: IfcLengthMeasure | null;
	OffsetVertical: IfcLengthMeasure | null;
	OffsetLongitudinal: IfcLengthMeasure | null;
	AlongHorizontal: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionChamberElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDistributionChamberElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDistributionChamberElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionChamberElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDistributionChamberElementTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDistributionChamberElementTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionCircuit {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, PredefinedType: IfcDistributionSystemEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcDistributionSystemEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionControlElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionControlElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionFlowElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionFlowElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionPort {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, FlowDirection: IfcFlowDirectionEnum | null, PredefinedType: IfcDistributionPortTypeEnum | null, SystemType: IfcDistributionSystemEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.FlowDirection = FlowDirection;
		this.PredefinedType = PredefinedType;
		this.SystemType = SystemType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FlowDirection: IfcFlowDirectionEnum | null;
	PredefinedType: IfcDistributionPortTypeEnum | null;
	SystemType: IfcDistributionSystemEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDistributionSystem {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, PredefinedType: IfcDistributionSystemEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcDistributionSystemEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDocumentInformation {
	constructor(Identification: IfcIdentifier , Name: IfcLabel , Description: IfcText | null, Location: IfcURIReference | null, Purpose: IfcText | null, IntendedUse: IfcText | null, Scope: IfcText | null, Revision: IfcLabel | null, DocumentOwner: IfcActorSelect | null, Editors: IfcActorSelect[] | null, CreationTime: IfcDateTime | null, LastRevisionTime: IfcDateTime | null, ElectronicFormat: IfcIdentifier | null, ValidFrom: IfcDate | null, ValidUntil: IfcDate | null, Confidentiality: IfcDocumentConfidentialityEnum | null, Status: IfcDocumentStatusEnum | null)
	{
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.Purpose = Purpose;
		this.IntendedUse = IntendedUse;
		this.Scope = Scope;
		this.Revision = Revision;
		this.DocumentOwner = DocumentOwner;
		this.Editors = Editors;
		this.CreationTime = CreationTime;
		this.LastRevisionTime = LastRevisionTime;
		this.ElectronicFormat = ElectronicFormat;
		this.ValidFrom = ValidFrom;
		this.ValidUntil = ValidUntil;
		this.Confidentiality = Confidentiality;
		this.Status = Status;
	}
	Identification: IfcIdentifier ;
	Name: IfcLabel ;
	Description: IfcText | null;
	Location: IfcURIReference | null;
	Purpose: IfcText | null;
	IntendedUse: IfcText | null;
	Scope: IfcText | null;
	Revision: IfcLabel | null;
	DocumentOwner: IfcActorSelect | null;
	Editors: IfcActorSelect[] | null;
	CreationTime: IfcDateTime | null;
	LastRevisionTime: IfcDateTime | null;
	ElectronicFormat: IfcIdentifier | null;
	ValidFrom: IfcDate | null;
	ValidUntil: IfcDate | null;
	Confidentiality: IfcDocumentConfidentialityEnum | null;
	Status: IfcDocumentStatusEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDocumentInformationRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingDocument: Handle<IfcDocumentInformation> , RelatedDocuments: Handle<IfcDocumentInformation>[] , RelationshipType: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingDocument = RelatingDocument;
		this.RelatedDocuments = RelatedDocuments;
		this.RelationshipType = RelationshipType;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingDocument: Handle<IfcDocumentInformation> ;
	RelatedDocuments: Handle<IfcDocumentInformation>[] ;
	RelationshipType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDocumentReference {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, ReferencedDocument: Handle<IfcDocumentInformation> | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.ReferencedDocument = ReferencedDocument;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ReferencedDocument: Handle<IfcDocumentInformation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcDoorTypeEnum | null, OperationType: IfcDoorTypeOperationEnum | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcDoorTypeEnum | null;
	OperationType: IfcDoorTypeOperationEnum | null;
	UserDefinedOperationType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoorLiningProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, LiningDepth: IfcPositiveLengthMeasure | null, LiningThickness: IfcNonNegativeLengthMeasure | null, ThresholdDepth: IfcPositiveLengthMeasure | null, ThresholdThickness: IfcNonNegativeLengthMeasure | null, TransomThickness: IfcNonNegativeLengthMeasure | null, TransomOffset: IfcLengthMeasure | null, LiningOffset: IfcLengthMeasure | null, ThresholdOffset: IfcLengthMeasure | null, CasingThickness: IfcPositiveLengthMeasure | null, CasingDepth: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null, LiningToPanelOffsetX: IfcLengthMeasure | null, LiningToPanelOffsetY: IfcLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.ThresholdDepth = ThresholdDepth;
		this.ThresholdThickness = ThresholdThickness;
		this.TransomThickness = TransomThickness;
		this.TransomOffset = TransomOffset;
		this.LiningOffset = LiningOffset;
		this.ThresholdOffset = ThresholdOffset;
		this.CasingThickness = CasingThickness;
		this.CasingDepth = CasingDepth;
		this.ShapeAspectStyle = ShapeAspectStyle;
		this.LiningToPanelOffsetX = LiningToPanelOffsetX;
		this.LiningToPanelOffsetY = LiningToPanelOffsetY;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	LiningDepth: IfcPositiveLengthMeasure | null;
	LiningThickness: IfcNonNegativeLengthMeasure | null;
	ThresholdDepth: IfcPositiveLengthMeasure | null;
	ThresholdThickness: IfcNonNegativeLengthMeasure | null;
	TransomThickness: IfcNonNegativeLengthMeasure | null;
	TransomOffset: IfcLengthMeasure | null;
	LiningOffset: IfcLengthMeasure | null;
	ThresholdOffset: IfcLengthMeasure | null;
	CasingThickness: IfcPositiveLengthMeasure | null;
	CasingDepth: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	LiningToPanelOffsetX: IfcLengthMeasure | null;
	LiningToPanelOffsetY: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoorPanelProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, PanelDepth: IfcPositiveLengthMeasure | null, PanelOperation: IfcDoorPanelOperationEnum , PanelWidth: IfcNormalisedRatioMeasure | null, PanelPosition: IfcDoorPanelPositionEnum , ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.PanelDepth = PanelDepth;
		this.PanelOperation = PanelOperation;
		this.PanelWidth = PanelWidth;
		this.PanelPosition = PanelPosition;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	PanelDepth: IfcPositiveLengthMeasure | null;
	PanelOperation: IfcDoorPanelOperationEnum ;
	PanelWidth: IfcNormalisedRatioMeasure | null;
	PanelPosition: IfcDoorPanelPositionEnum ;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoorStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcDoorTypeEnum | null, OperationType: IfcDoorTypeOperationEnum | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcDoorTypeEnum | null;
	OperationType: IfcDoorTypeOperationEnum | null;
	UserDefinedOperationType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoorStyle {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, OperationType: IfcDoorStyleOperationEnum , ConstructionType: IfcDoorStyleConstructionEnum , ParameterTakesPrecedence: IfcBoolean , Sizeable: IfcBoolean )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.OperationType = OperationType;
		this.ConstructionType = ConstructionType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.Sizeable = Sizeable;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	OperationType: IfcDoorStyleOperationEnum ;
	ConstructionType: IfcDoorStyleConstructionEnum ;
	ParameterTakesPrecedence: IfcBoolean ;
	Sizeable: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDoorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDoorTypeEnum , OperationType: IfcDoorTypeOperationEnum , ParameterTakesPrecedence: IfcBoolean | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDoorTypeEnum ;
	OperationType: IfcDoorTypeOperationEnum ;
	ParameterTakesPrecedence: IfcBoolean | null;
	UserDefinedOperationType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDraughtingPreDefinedColour {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDraughtingPreDefinedCurveFont {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctFitting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctFittingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctFittingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctFittingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctFittingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctFittingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctSegment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctSegmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctSegmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctSegmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctSegmentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctSegmentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctSilencer {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctSilencerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctSilencerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcDuctSilencerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctSilencerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctSilencerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEdge {
	constructor(EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> )
	{
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
	}
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEdgeCurve {
	constructor(EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , EdgeGeometry: Handle<IfcCurve> , SameSense: IfcBoolean )
	{
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.EdgeGeometry = EdgeGeometry;
		this.SameSense = SameSense;
	}
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	EdgeGeometry: Handle<IfcCurve> ;
	SameSense: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEdgeLoop {
	constructor(EdgeList: Handle<IfcOrientedEdge> )
	{
		this.EdgeList = EdgeList;
	}
	EdgeList: Handle<IfcOrientedEdge> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricAppliance {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricApplianceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricApplianceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricApplianceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricApplianceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricApplianceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricDistributionBoard {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricDistributionBoardTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricDistributionBoardTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricDistributionBoardType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricDistributionBoardTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricDistributionBoardTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricFlowStorageDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricFlowStorageDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricFlowStorageDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricFlowStorageDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricFlowStorageDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricFlowStorageDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricGenerator {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricGeneratorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricGeneratorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricGeneratorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricGeneratorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricGeneratorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricMotor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricMotorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricMotorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricMotorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricMotorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricMotorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricTimeControl {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricTimeControlTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricTimeControlTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElectricTimeControlType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricTimeControlTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricTimeControlTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementAssembly {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, AssemblyPlace: IfcAssemblyPlaceEnum | null, PredefinedType: IfcElementAssemblyTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	AssemblyPlace: IfcAssemblyPlaceEnum | null;
	PredefinedType: IfcElementAssemblyTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementAssemblyType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElementAssemblyTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElementAssemblyTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementComponent {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementComponentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementQuantity {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, MethodOfMeasurement: IfcLabel | null, Quantities: Handle<IfcPhysicalQuantity>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.MethodOfMeasurement = MethodOfMeasurement;
		this.Quantities = Quantities;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	MethodOfMeasurement: IfcLabel | null;
	Quantities: Handle<IfcPhysicalQuantity>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcElementarySurface {
	constructor(Position: Handle<IfcAxis2Placement3D> )
	{
		this.Position = Position;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEllipse {
	constructor(Position: IfcAxis2Placement , SemiAxis1: IfcPositiveLengthMeasure , SemiAxis2: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	Position: IfcAxis2Placement ;
	SemiAxis1: IfcPositiveLengthMeasure ;
	SemiAxis2: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEllipseProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, SemiAxis1: IfcPositiveLengthMeasure , SemiAxis2: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	SemiAxis1: IfcPositiveLengthMeasure ;
	SemiAxis2: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEnergyConversionDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEnergyConversionDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEngine {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEngineTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEngineTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEngineType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEngineTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEngineTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEvaporativeCooler {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEvaporativeCoolerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEvaporativeCoolerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEvaporativeCoolerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEvaporativeCoolerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEvaporativeCoolerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEvaporator {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEvaporatorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEvaporatorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEvaporatorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEvaporatorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEvaporatorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEvent {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, PredefinedType: IfcEventTypeEnum | null, EventTriggerType: IfcEventTriggerTypeEnum | null, UserDefinedEventTriggerType: IfcLabel | null, EventOccurenceTime: Handle<IfcEventTime> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		this.EventOccurenceTime = EventOccurenceTime;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	PredefinedType: IfcEventTypeEnum | null;
	EventTriggerType: IfcEventTriggerTypeEnum | null;
	UserDefinedEventTriggerType: IfcLabel | null;
	EventOccurenceTime: Handle<IfcEventTime> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEventTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, ActualDate: IfcDateTime | null, EarlyDate: IfcDateTime | null, LateDate: IfcDateTime | null, ScheduleDate: IfcDateTime | null)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.ActualDate = ActualDate;
		this.EarlyDate = EarlyDate;
		this.LateDate = LateDate;
		this.ScheduleDate = ScheduleDate;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	ActualDate: IfcDateTime | null;
	EarlyDate: IfcDateTime | null;
	LateDate: IfcDateTime | null;
	ScheduleDate: IfcDateTime | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcEventType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcEventTypeEnum , EventTriggerType: IfcEventTriggerTypeEnum , UserDefinedEventTriggerType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcEventTypeEnum ;
	EventTriggerType: IfcEventTriggerTypeEnum ;
	UserDefinedEventTriggerType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExtendedProperties {
	constructor(Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
	}
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternalInformation {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternalReference {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternalReferenceRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingReference: Handle<IfcExternalReference> , RelatedResourceObjects: IfcResourceObjectSelect[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingReference = RelatingReference;
		this.RelatedResourceObjects = RelatedResourceObjects;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingReference: Handle<IfcExternalReference> ;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternalSpatialElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, PredefinedType: IfcExternalSpatialElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcExternalSpatialElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternalSpatialStructureElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternallyDefinedHatchStyle {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternallyDefinedSurfaceStyle {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExternallyDefinedTextFont {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExtrudedAreaSolid {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcPositiveLengthMeasure )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcExtrudedAreaSolidTapered {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcPositiveLengthMeasure , EndSweptArea: Handle<IfcProfileDef> )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
		this.EndSweptArea = EndSweptArea;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcPositiveLengthMeasure ;
	EndSweptArea: Handle<IfcProfileDef> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFace {
	constructor(Bounds: Handle<IfcFaceBound>[] )
	{
		this.Bounds = Bounds;
	}
	Bounds: Handle<IfcFaceBound>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFaceBasedSurfaceModel {
	constructor(FbsmFaces: Handle<IfcConnectedFaceSet>[] )
	{
		this.FbsmFaces = FbsmFaces;
	}
	FbsmFaces: Handle<IfcConnectedFaceSet>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFaceBound {
	constructor(Bound: Handle<IfcLoop> , Orientation: IfcBoolean )
	{
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	Bound: Handle<IfcLoop> ;
	Orientation: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFaceOuterBound {
	constructor(Bound: Handle<IfcLoop> , Orientation: IfcBoolean )
	{
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	Bound: Handle<IfcLoop> ;
	Orientation: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFaceSurface {
	constructor(Bounds: Handle<IfcFaceBound>[] , FaceSurface: Handle<IfcSurface> , SameSense: IfcBoolean )
	{
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	Bounds: Handle<IfcFaceBound>[] ;
	FaceSurface: Handle<IfcSurface> ;
	SameSense: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFacetedBrep {
	constructor(Outer: Handle<IfcClosedShell> )
	{
		this.Outer = Outer;
	}
	Outer: Handle<IfcClosedShell> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFacetedBrepWithVoids {
	constructor(Outer: Handle<IfcClosedShell> , Voids: Handle<IfcClosedShell>[] )
	{
		this.Outer = Outer;
		this.Voids = Voids;
	}
	Outer: Handle<IfcClosedShell> ;
	Voids: Handle<IfcClosedShell>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFacility {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFacilityPart {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFailureConnectionCondition {
	constructor(Name: IfcLabel | null, TensionFailureX: IfcForceMeasure | null, TensionFailureY: IfcForceMeasure | null, TensionFailureZ: IfcForceMeasure | null, CompressionFailureX: IfcForceMeasure | null, CompressionFailureY: IfcForceMeasure | null, CompressionFailureZ: IfcForceMeasure | null)
	{
		this.Name = Name;
		this.TensionFailureX = TensionFailureX;
		this.TensionFailureY = TensionFailureY;
		this.TensionFailureZ = TensionFailureZ;
		this.CompressionFailureX = CompressionFailureX;
		this.CompressionFailureY = CompressionFailureY;
		this.CompressionFailureZ = CompressionFailureZ;
	}
	Name: IfcLabel | null;
	TensionFailureX: IfcForceMeasure | null;
	TensionFailureY: IfcForceMeasure | null;
	TensionFailureZ: IfcForceMeasure | null;
	CompressionFailureX: IfcForceMeasure | null;
	CompressionFailureY: IfcForceMeasure | null;
	CompressionFailureZ: IfcForceMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFan {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFanTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFanTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFanType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFanTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFanTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFastener {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFastenerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFastenerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFastenerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFastenerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFastenerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFeatureElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFeatureElementAddition {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFeatureElementSubtraction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFillAreaStyle {
	constructor(Name: IfcLabel | null, FillStyles: IfcFillStyleSelect[] , ModelorDraughting: IfcBoolean | null)
	{
		this.Name = Name;
		this.FillStyles = FillStyles;
		this.ModelorDraughting = ModelorDraughting;
	}
	Name: IfcLabel | null;
	FillStyles: IfcFillStyleSelect[] ;
	ModelorDraughting: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFillAreaStyleHatching {
	constructor(HatchLineAppearance: Handle<IfcCurveStyle> , StartOfNextHatchLine: IfcHatchLineDistanceSelect , PointOfReferenceHatchLine: Handle<IfcCartesianPoint> | null, PatternStart: Handle<IfcCartesianPoint> | null, HatchLineAngle: IfcPlaneAngleMeasure )
	{
		this.HatchLineAppearance = HatchLineAppearance;
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		this.PatternStart = PatternStart;
		this.HatchLineAngle = HatchLineAngle;
	}
	HatchLineAppearance: Handle<IfcCurveStyle> ;
	StartOfNextHatchLine: IfcHatchLineDistanceSelect ;
	PointOfReferenceHatchLine: Handle<IfcCartesianPoint> | null;
	PatternStart: Handle<IfcCartesianPoint> | null;
	HatchLineAngle: IfcPlaneAngleMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFillAreaStyleTiles {
	constructor(TilingPattern: Handle<IfcVector> , Tiles: Handle<IfcStyledItem>[] , TilingScale: IfcPositiveRatioMeasure )
	{
		this.TilingPattern = TilingPattern;
		this.Tiles = Tiles;
		this.TilingScale = TilingScale;
	}
	TilingPattern: Handle<IfcVector> ;
	Tiles: Handle<IfcStyledItem>[] ;
	TilingScale: IfcPositiveRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFilter {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFilterTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFilterTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFilterType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFilterTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFilterTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFireSuppressionTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFireSuppressionTerminalTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFireSuppressionTerminalTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFireSuppressionTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFireSuppressionTerminalTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFireSuppressionTerminalTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFixedReferenceSweptAreaSolid {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Directrix: Handle<IfcCurve> , StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, FixedReference: Handle<IfcDirection> )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Directrix = Directrix;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.FixedReference = FixedReference;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Directrix: Handle<IfcCurve> ;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	FixedReference: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowController {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowControllerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowFitting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowFittingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowInstrument {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFlowInstrumentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFlowInstrumentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowInstrumentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFlowInstrumentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFlowInstrumentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowMeter {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFlowMeterTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFlowMeterTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowMeterType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFlowMeterTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFlowMeterTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowMovingDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowMovingDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowSegment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowSegmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowStorageDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowStorageDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowTreatmentDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFlowTreatmentDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFooting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFootingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFootingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFootingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFootingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFootingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFurnishingElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFurnishingElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFurniture {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFurnitureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFurnitureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcFurnitureType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, AssemblyPlace: IfcAssemblyPlaceEnum , PredefinedType: IfcFurnitureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	AssemblyPlace: IfcAssemblyPlaceEnum ;
	PredefinedType: IfcFurnitureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeographicElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcGeographicElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcGeographicElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeographicElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcGeographicElementTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcGeographicElementTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeometricCurveSet {
	constructor(Elements: IfcGeometricSetSelect[] )
	{
		this.Elements = Elements;
	}
	Elements: IfcGeometricSetSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeometricRepresentationContext {
	constructor(ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null, CoordinateSpaceDimension: IfcDimensionCount , Precision: IfcReal | null, WorldCoordinateSystem: IfcAxis2Placement , TrueNorth: Handle<IfcDirection> | null)
	{
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
	}
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	CoordinateSpaceDimension: IfcDimensionCount ;
	Precision: IfcReal | null;
	WorldCoordinateSystem: IfcAxis2Placement ;
	TrueNorth: Handle<IfcDirection> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeometricRepresentationItem {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeometricRepresentationSubContext {
	constructor(ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null, CoordinateSpaceDimension: IfcDimensionCount , Precision: IfcReal | null, WorldCoordinateSystem: IfcAxis2Placement , TrueNorth: Handle<IfcDirection> | null, ParentContext: Handle<IfcGeometricRepresentationContext> , TargetScale: IfcPositiveRatioMeasure | null, TargetView: IfcGeometricProjectionEnum , UserDefinedTargetView: IfcLabel | null)
	{
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
		this.ParentContext = ParentContext;
		this.TargetScale = TargetScale;
		this.TargetView = TargetView;
		this.UserDefinedTargetView = UserDefinedTargetView;
	}
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	CoordinateSpaceDimension: IfcDimensionCount ;
	Precision: IfcReal | null;
	WorldCoordinateSystem: IfcAxis2Placement ;
	TrueNorth: Handle<IfcDirection> | null;
	ParentContext: Handle<IfcGeometricRepresentationContext> ;
	TargetScale: IfcPositiveRatioMeasure | null;
	TargetView: IfcGeometricProjectionEnum ;
	UserDefinedTargetView: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGeometricSet {
	constructor(Elements: IfcGeometricSetSelect[] )
	{
		this.Elements = Elements;
	}
	Elements: IfcGeometricSetSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGrid {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, UAxes: Handle<IfcGridAxis> , VAxes: Handle<IfcGridAxis> , WAxes: Handle<IfcGridAxis> | null, PredefinedType: IfcGridTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.UAxes = UAxes;
		this.VAxes = VAxes;
		this.WAxes = WAxes;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	UAxes: Handle<IfcGridAxis> ;
	VAxes: Handle<IfcGridAxis> ;
	WAxes: Handle<IfcGridAxis> | null;
	PredefinedType: IfcGridTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGridAxis {
	constructor(AxisTag: IfcLabel | null, AxisCurve: Handle<IfcCurve> , SameSense: IfcBoolean )
	{
		this.AxisTag = AxisTag;
		this.AxisCurve = AxisCurve;
		this.SameSense = SameSense;
	}
	AxisTag: IfcLabel | null;
	AxisCurve: Handle<IfcCurve> ;
	SameSense: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGridPlacement {
	constructor(PlacementRelTo: Handle<IfcObjectPlacement> | null, PlacementLocation: Handle<IfcVirtualGridIntersection> , PlacementRefDirection: IfcGridPlacementDirectionSelect | null)
	{
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementLocation = PlacementLocation;
		this.PlacementRefDirection = PlacementRefDirection;
	}
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	PlacementLocation: Handle<IfcVirtualGridIntersection> ;
	PlacementRefDirection: IfcGridPlacementDirectionSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcGroup {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcHalfSpaceSolid {
	constructor(BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean )
	{
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
	}
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcHeatExchanger {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcHeatExchangerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcHeatExchangerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcHeatExchangerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcHeatExchangerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcHeatExchangerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcHumidifier {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcHumidifierTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcHumidifierTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcHumidifierType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcHumidifierTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcHumidifierTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, OverallWidth: IfcPositiveLengthMeasure , OverallDepth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.OverallWidth = OverallWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.FlangeEdgeRadius = FlangeEdgeRadius;
		this.FlangeSlope = FlangeSlope;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	OverallWidth: IfcPositiveLengthMeasure ;
	OverallDepth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcImageTexture {
	constructor(RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier | null, URLReference: IfcURIReference )
	{
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.URLReference = URLReference;
	}
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier | null;
	URLReference: IfcURIReference ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedColourMap {
	constructor(MappedTo: Handle<IfcTessellatedFaceSet> , Opacity: IfcNormalisedRatioMeasure | null, Colours: Handle<IfcColourRgbList> , ColourIndex: IfcPositiveInteger )
	{
		this.MappedTo = MappedTo;
		this.Opacity = Opacity;
		this.Colours = Colours;
		this.ColourIndex = ColourIndex;
	}
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	Opacity: IfcNormalisedRatioMeasure | null;
	Colours: Handle<IfcColourRgbList> ;
	ColourIndex: IfcPositiveInteger ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedPolyCurve {
	constructor(Points: Handle<IfcCartesianPointList> , Segments: IfcSegmentIndexSelect | null, SelfIntersect: IfcBoolean | null)
	{
		this.Points = Points;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	Points: Handle<IfcCartesianPointList> ;
	Segments: IfcSegmentIndexSelect | null;
	SelfIntersect: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedPolygonalFace {
	constructor(CoordIndex: IfcPositiveInteger )
	{
		this.CoordIndex = CoordIndex;
	}
	CoordIndex: IfcPositiveInteger ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedPolygonalFaceWithVoids {
	constructor(CoordIndex: IfcPositiveInteger , InnerCoordIndices: IfcPositiveInteger )
	{
		this.CoordIndex = CoordIndex;
		this.InnerCoordIndices = InnerCoordIndices;
	}
	CoordIndex: IfcPositiveInteger ;
	InnerCoordIndices: IfcPositiveInteger ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedTextureMap {
	constructor(Maps: Handle<IfcSurfaceTexture> , MappedTo: Handle<IfcTessellatedFaceSet> , TexCoords: Handle<IfcTextureVertexList> )
	{
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
	}
	Maps: Handle<IfcSurfaceTexture> ;
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	TexCoords: Handle<IfcTextureVertexList> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIndexedTriangleTextureMap {
	constructor(Maps: Handle<IfcSurfaceTexture> , MappedTo: Handle<IfcTessellatedFaceSet> , TexCoords: Handle<IfcTextureVertexList> , TexCoordIndex: IfcPositiveInteger | null)
	{
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
		this.TexCoordIndex = TexCoordIndex;
	}
	Maps: Handle<IfcSurfaceTexture> ;
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	TexCoords: Handle<IfcTextureVertexList> ;
	TexCoordIndex: IfcPositiveInteger | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcInterceptor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcInterceptorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcInterceptorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcInterceptorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcInterceptorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcInterceptorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIntersectionCurve {
	constructor(Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve> , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve> ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcInventory {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcInventoryTypeEnum | null, Jurisdiction: IfcActorSelect | null, ResponsiblePersons: Handle<IfcPerson>[] | null, LastUpdateDate: IfcDate | null, CurrentValue: Handle<IfcCostValue> | null, OriginalValue: Handle<IfcCostValue> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.Jurisdiction = Jurisdiction;
		this.ResponsiblePersons = ResponsiblePersons;
		this.LastUpdateDate = LastUpdateDate;
		this.CurrentValue = CurrentValue;
		this.OriginalValue = OriginalValue;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcInventoryTypeEnum | null;
	Jurisdiction: IfcActorSelect | null;
	ResponsiblePersons: Handle<IfcPerson>[] | null;
	LastUpdateDate: IfcDate | null;
	CurrentValue: Handle<IfcCostValue> | null;
	OriginalValue: Handle<IfcCostValue> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIrregularTimeSeries {
	constructor(Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null, Values: Handle<IfcIrregularTimeSeriesValue> )
	{
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
		this.Values = Values;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	Values: Handle<IfcIrregularTimeSeriesValue> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcIrregularTimeSeriesValue {
	constructor(TimeStamp: IfcDateTime , ListValues: IfcValue )
	{
		this.TimeStamp = TimeStamp;
		this.ListValues = ListValues;
	}
	TimeStamp: IfcDateTime ;
	ListValues: IfcValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcJunctionBox {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcJunctionBoxTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcJunctionBoxTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcJunctionBoxType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcJunctionBoxTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcJunctionBoxTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , Width: IfcPositiveLengthMeasure | null, Thickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null, LegSlope: IfcPlaneAngleMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.Thickness = Thickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
		this.LegSlope = LegSlope;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	Width: IfcPositiveLengthMeasure | null;
	Thickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	LegSlope: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLaborResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcLaborResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcLaborResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLaborResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcLaborResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcLaborResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLagTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, LagValue: IfcTimeOrRatioSelect , DurationType: IfcTaskDurationEnum )
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.LagValue = LagValue;
		this.DurationType = DurationType;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	LagValue: IfcTimeOrRatioSelect ;
	DurationType: IfcTaskDurationEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLamp {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcLampTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcLampTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLampType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcLampTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcLampTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLibraryInformation {
	constructor(Name: IfcLabel , Version: IfcLabel | null, Publisher: IfcActorSelect | null, VersionDate: IfcDateTime | null, Location: IfcURIReference | null, Description: IfcText | null)
	{
		this.Name = Name;
		this.Version = Version;
		this.Publisher = Publisher;
		this.VersionDate = VersionDate;
		this.Location = Location;
		this.Description = Description;
	}
	Name: IfcLabel ;
	Version: IfcLabel | null;
	Publisher: IfcActorSelect | null;
	VersionDate: IfcDateTime | null;
	Location: IfcURIReference | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLibraryReference {
	constructor(Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, Language: IfcLanguageId | null, ReferencedLibrary: Handle<IfcLibraryInformation> | null)
	{
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Language = Language;
		this.ReferencedLibrary = ReferencedLibrary;
	}
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Language: IfcLanguageId | null;
	ReferencedLibrary: Handle<IfcLibraryInformation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightDistributionData {
	constructor(MainPlaneAngle: IfcPlaneAngleMeasure , SecondaryPlaneAngle: IfcPlaneAngleMeasure , LuminousIntensity: IfcLuminousIntensityDistributionMeasure )
	{
		this.MainPlaneAngle = MainPlaneAngle;
		this.SecondaryPlaneAngle = SecondaryPlaneAngle;
		this.LuminousIntensity = LuminousIntensity;
	}
	MainPlaneAngle: IfcPlaneAngleMeasure ;
	SecondaryPlaneAngle: IfcPlaneAngleMeasure ;
	LuminousIntensity: IfcLuminousIntensityDistributionMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightFixture {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcLightFixtureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcLightFixtureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightFixtureType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcLightFixtureTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcLightFixtureTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightIntensityDistribution {
	constructor(LightDistributionCurve: IfcLightDistributionCurveEnum , DistributionData: Handle<IfcLightDistributionData> )
	{
		this.LightDistributionCurve = LightDistributionCurve;
		this.DistributionData = DistributionData;
	}
	LightDistributionCurve: IfcLightDistributionCurveEnum ;
	DistributionData: Handle<IfcLightDistributionData> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSource {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSourceAmbient {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null)
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSourceDirectional {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Orientation: Handle<IfcDirection> )
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Orientation = Orientation;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Orientation: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSourceGoniometric {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcAxis2Placement3D> , ColourAppearance: Handle<IfcColourRgb> | null, ColourTemperature: IfcThermodynamicTemperatureMeasure , LuminousFlux: IfcLuminousFluxMeasure , LightEmissionSource: IfcLightEmissionSourceEnum , LightDistributionDataSource: IfcLightDistributionDataSourceSelect )
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.ColourAppearance = ColourAppearance;
		this.ColourTemperature = ColourTemperature;
		this.LuminousFlux = LuminousFlux;
		this.LightEmissionSource = LightEmissionSource;
		this.LightDistributionDataSource = LightDistributionDataSource;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcAxis2Placement3D> ;
	ColourAppearance: Handle<IfcColourRgb> | null;
	ColourTemperature: IfcThermodynamicTemperatureMeasure ;
	LuminousFlux: IfcLuminousFluxMeasure ;
	LightEmissionSource: IfcLightEmissionSourceEnum ;
	LightDistributionDataSource: IfcLightDistributionDataSourceSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSourcePositional {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcCartesianPoint> , Radius: IfcPositiveLengthMeasure , ConstantAttenuation: IfcReal , DistanceAttenuation: IfcReal , QuadricAttenuation: IfcReal )
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcCartesianPoint> ;
	Radius: IfcPositiveLengthMeasure ;
	ConstantAttenuation: IfcReal ;
	DistanceAttenuation: IfcReal ;
	QuadricAttenuation: IfcReal ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLightSourceSpot {
	constructor(Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcCartesianPoint> , Radius: IfcPositiveLengthMeasure , ConstantAttenuation: IfcReal , DistanceAttenuation: IfcReal , QuadricAttenuation: IfcReal , Orientation: Handle<IfcDirection> , ConcentrationExponent: IfcReal | null, SpreadAngle: IfcPositivePlaneAngleMeasure , BeamWidthAngle: IfcPositivePlaneAngleMeasure )
	{
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
		this.Orientation = Orientation;
		this.ConcentrationExponent = ConcentrationExponent;
		this.SpreadAngle = SpreadAngle;
		this.BeamWidthAngle = BeamWidthAngle;
	}
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcCartesianPoint> ;
	Radius: IfcPositiveLengthMeasure ;
	ConstantAttenuation: IfcReal ;
	DistanceAttenuation: IfcReal ;
	QuadricAttenuation: IfcReal ;
	Orientation: Handle<IfcDirection> ;
	ConcentrationExponent: IfcReal | null;
	SpreadAngle: IfcPositivePlaneAngleMeasure ;
	BeamWidthAngle: IfcPositivePlaneAngleMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLine {
	constructor(Pnt: Handle<IfcCartesianPoint> , Dir: Handle<IfcVector> )
	{
		this.Pnt = Pnt;
		this.Dir = Dir;
	}
	Pnt: Handle<IfcCartesianPoint> ;
	Dir: Handle<IfcVector> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLineSegment2D {
	constructor(StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure )
	{
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLinearPlacement {
	constructor(PlacementRelTo: Handle<IfcObjectPlacement> | null, PlacementMeasuredAlong: Handle<IfcCurve> , Distance: Handle<IfcDistanceExpression> , Orientation: Handle<IfcOrientationExpression> | null, CartesianPosition: Handle<IfcAxis2Placement3D> | null)
	{
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementMeasuredAlong = PlacementMeasuredAlong;
		this.Distance = Distance;
		this.Orientation = Orientation;
		this.CartesianPosition = CartesianPosition;
	}
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	PlacementMeasuredAlong: Handle<IfcCurve> ;
	Distance: Handle<IfcDistanceExpression> ;
	Orientation: Handle<IfcOrientationExpression> | null;
	CartesianPosition: Handle<IfcAxis2Placement3D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLinearPositioningElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Axis: Handle<IfcCurve> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Axis: Handle<IfcCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLocalPlacement {
	constructor(PlacementRelTo: Handle<IfcObjectPlacement> | null, RelativePlacement: IfcAxis2Placement )
	{
		this.PlacementRelTo = PlacementRelTo;
		this.RelativePlacement = RelativePlacement;
	}
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	RelativePlacement: IfcAxis2Placement ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcLoop {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcManifoldSolidBrep {
	constructor(Outer: Handle<IfcClosedShell> )
	{
		this.Outer = Outer;
	}
	Outer: Handle<IfcClosedShell> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMapConversion {
	constructor(SourceCRS: IfcCoordinateReferenceSystemSelect , TargetCRS: Handle<IfcCoordinateReferenceSystem> , Eastings: IfcLengthMeasure , Northings: IfcLengthMeasure , OrthogonalHeight: IfcLengthMeasure , XAxisAbscissa: IfcReal | null, XAxisOrdinate: IfcReal | null, Scale: IfcReal | null)
	{
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
		this.Eastings = Eastings;
		this.Northings = Northings;
		this.OrthogonalHeight = OrthogonalHeight;
		this.XAxisAbscissa = XAxisAbscissa;
		this.XAxisOrdinate = XAxisOrdinate;
		this.Scale = Scale;
	}
	SourceCRS: IfcCoordinateReferenceSystemSelect ;
	TargetCRS: Handle<IfcCoordinateReferenceSystem> ;
	Eastings: IfcLengthMeasure ;
	Northings: IfcLengthMeasure ;
	OrthogonalHeight: IfcLengthMeasure ;
	XAxisAbscissa: IfcReal | null;
	XAxisOrdinate: IfcReal | null;
	Scale: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMappedItem {
	constructor(MappingSource: Handle<IfcRepresentationMap> , MappingTarget: Handle<IfcCartesianTransformationOperator> )
	{
		this.MappingSource = MappingSource;
		this.MappingTarget = MappingTarget;
	}
	MappingSource: Handle<IfcRepresentationMap> ;
	MappingTarget: Handle<IfcCartesianTransformationOperator> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterial {
	constructor(Name: IfcLabel , Description: IfcText | null, Category: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Category: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialClassificationRelationship {
	constructor(MaterialClassifications: IfcClassificationSelect[] , ClassifiedMaterial: Handle<IfcMaterial> )
	{
		this.MaterialClassifications = MaterialClassifications;
		this.ClassifiedMaterial = ClassifiedMaterial;
	}
	MaterialClassifications: IfcClassificationSelect[] ;
	ClassifiedMaterial: Handle<IfcMaterial> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialConstituent {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> , Fraction: IfcNormalisedRatioMeasure | null, Category: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Fraction = Fraction;
		this.Category = Category;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> ;
	Fraction: IfcNormalisedRatioMeasure | null;
	Category: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialConstituentSet {
	constructor(Name: IfcLabel | null, Description: IfcText | null, MaterialConstituents: Handle<IfcMaterialConstituent>[] | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.MaterialConstituents = MaterialConstituents;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	MaterialConstituents: Handle<IfcMaterialConstituent>[] | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialDefinition {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialDefinitionRepresentation {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation> , RepresentedMaterial: Handle<IfcMaterial> )
	{
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
		this.RepresentedMaterial = RepresentedMaterial;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation> ;
	RepresentedMaterial: Handle<IfcMaterial> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialLayer {
	constructor(Material: Handle<IfcMaterial> | null, LayerThickness: IfcNonNegativeLengthMeasure , IsVentilated: IfcLogical | null, Name: IfcLabel | null, Description: IfcText | null, Category: IfcLabel | null, Priority: IfcInteger | null)
	{
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
	}
	Material: Handle<IfcMaterial> | null;
	LayerThickness: IfcNonNegativeLengthMeasure ;
	IsVentilated: IfcLogical | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Category: IfcLabel | null;
	Priority: IfcInteger | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialLayerSet {
	constructor(MaterialLayers: Handle<IfcMaterialLayer> , LayerSetName: IfcLabel | null, Description: IfcText | null)
	{
		this.MaterialLayers = MaterialLayers;
		this.LayerSetName = LayerSetName;
		this.Description = Description;
	}
	MaterialLayers: Handle<IfcMaterialLayer> ;
	LayerSetName: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialLayerSetUsage {
	constructor(ForLayerSet: Handle<IfcMaterialLayerSet> , LayerSetDirection: IfcLayerSetDirectionEnum , DirectionSense: IfcDirectionSenseEnum , OffsetFromReferenceLine: IfcLengthMeasure , ReferenceExtent: IfcPositiveLengthMeasure | null)
	{
		this.ForLayerSet = ForLayerSet;
		this.LayerSetDirection = LayerSetDirection;
		this.DirectionSense = DirectionSense;
		this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		this.ReferenceExtent = ReferenceExtent;
	}
	ForLayerSet: Handle<IfcMaterialLayerSet> ;
	LayerSetDirection: IfcLayerSetDirectionEnum ;
	DirectionSense: IfcDirectionSenseEnum ;
	OffsetFromReferenceLine: IfcLengthMeasure ;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialLayerWithOffsets {
	constructor(Material: Handle<IfcMaterial> | null, LayerThickness: IfcNonNegativeLengthMeasure , IsVentilated: IfcLogical | null, Name: IfcLabel | null, Description: IfcText | null, Category: IfcLabel | null, Priority: IfcInteger | null, OffsetDirection: IfcLayerSetDirectionEnum , OffsetValues: IfcLengthMeasure )
	{
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
		this.OffsetDirection = OffsetDirection;
		this.OffsetValues = OffsetValues;
	}
	Material: Handle<IfcMaterial> | null;
	LayerThickness: IfcNonNegativeLengthMeasure ;
	IsVentilated: IfcLogical | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Category: IfcLabel | null;
	Priority: IfcInteger | null;
	OffsetDirection: IfcLayerSetDirectionEnum ;
	OffsetValues: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialList {
	constructor(Materials: Handle<IfcMaterial> )
	{
		this.Materials = Materials;
	}
	Materials: Handle<IfcMaterial> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProfile {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> | null, Profile: Handle<IfcProfileDef> , Priority: IfcInteger | null, Category: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> | null;
	Profile: Handle<IfcProfileDef> ;
	Priority: IfcInteger | null;
	Category: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProfileSet {
	constructor(Name: IfcLabel | null, Description: IfcText | null, MaterialProfiles: Handle<IfcMaterialProfile> , CompositeProfile: Handle<IfcCompositeProfileDef> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.MaterialProfiles = MaterialProfiles;
		this.CompositeProfile = CompositeProfile;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	MaterialProfiles: Handle<IfcMaterialProfile> ;
	CompositeProfile: Handle<IfcCompositeProfileDef> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProfileSetUsage {
	constructor(ForProfileSet: Handle<IfcMaterialProfileSet> , CardinalPoint: IfcCardinalPointReference | null, ReferenceExtent: IfcPositiveLengthMeasure | null)
	{
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
	}
	ForProfileSet: Handle<IfcMaterialProfileSet> ;
	CardinalPoint: IfcCardinalPointReference | null;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProfileSetUsageTapering {
	constructor(ForProfileSet: Handle<IfcMaterialProfileSet> , CardinalPoint: IfcCardinalPointReference | null, ReferenceExtent: IfcPositiveLengthMeasure | null, ForProfileEndSet: Handle<IfcMaterialProfileSet> , CardinalEndPoint: IfcCardinalPointReference | null)
	{
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
		this.ForProfileEndSet = ForProfileEndSet;
		this.CardinalEndPoint = CardinalEndPoint;
	}
	ForProfileSet: Handle<IfcMaterialProfileSet> ;
	CardinalPoint: IfcCardinalPointReference | null;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	ForProfileEndSet: Handle<IfcMaterialProfileSet> ;
	CardinalEndPoint: IfcCardinalPointReference | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProfileWithOffsets {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> | null, Profile: Handle<IfcProfileDef> , Priority: IfcInteger | null, Category: IfcLabel | null, OffsetValues: IfcLengthMeasure )
	{
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
		this.OffsetValues = OffsetValues;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> | null;
	Profile: Handle<IfcProfileDef> ;
	Priority: IfcInteger | null;
	Category: IfcLabel | null;
	OffsetValues: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialProperties {
	constructor(Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] , Material: Handle<IfcMaterialDefinition> )
	{
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
		this.Material = Material;
	}
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	Material: Handle<IfcMaterialDefinition> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingMaterial: Handle<IfcMaterial> , RelatedMaterials: Handle<IfcMaterial>[] , Expression: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingMaterial = RelatingMaterial;
		this.RelatedMaterials = RelatedMaterials;
		this.Expression = Expression;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingMaterial: Handle<IfcMaterial> ;
	RelatedMaterials: Handle<IfcMaterial>[] ;
	Expression: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMaterialUsageDefinition {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMeasureWithUnit {
	constructor(ValueComponent: IfcValue , UnitComponent: IfcUnit )
	{
		this.ValueComponent = ValueComponent;
		this.UnitComponent = UnitComponent;
	}
	ValueComponent: IfcValue ;
	UnitComponent: IfcUnit ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMechanicalFastener {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, NominalDiameter: IfcPositiveLengthMeasure | null, NominalLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcMechanicalFastenerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	NominalLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcMechanicalFastenerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMechanicalFastenerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMechanicalFastenerTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, NominalLength: IfcPositiveLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMechanicalFastenerTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	NominalLength: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMedicalDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMedicalDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMedicalDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMedicalDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMedicalDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMedicalDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMember {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMemberTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMemberTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMemberStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMemberTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMemberTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMemberType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMemberTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMemberTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMetric {
	constructor(Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null, Benchmark: IfcBenchmarkEnum , ValueSource: IfcLabel | null, DataValue: IfcMetricValueSelect | null, ReferencePath: Handle<IfcReference> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.Benchmark = Benchmark;
		this.ValueSource = ValueSource;
		this.DataValue = DataValue;
		this.ReferencePath = ReferencePath;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	Benchmark: IfcBenchmarkEnum ;
	ValueSource: IfcLabel | null;
	DataValue: IfcMetricValueSelect | null;
	ReferencePath: Handle<IfcReference> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMirroredProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, ParentProfile: Handle<IfcProfileDef> , Operator: Handle<IfcCartesianTransformationOperator2D> , Label: IfcLabel | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	ParentProfile: Handle<IfcProfileDef> ;
	Operator: Handle<IfcCartesianTransformationOperator2D> ;
	Label: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMonetaryUnit {
	constructor(Currency: IfcLabel )
	{
		this.Currency = Currency;
	}
	Currency: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMotorConnection {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMotorConnectionTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMotorConnectionTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcMotorConnectionType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMotorConnectionTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMotorConnectionTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcNamedUnit {
	constructor(Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum )
	{
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
	}
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcObject {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcObjectDefinition {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcObjectPlacement {
	constructor(PlacementRelTo: Handle<IfcObjectPlacement> | null)
	{
		this.PlacementRelTo = PlacementRelTo;
	}
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcObjective {
	constructor(Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null, BenchmarkValues: Handle<IfcConstraint> | null, LogicalAggregator: IfcLogicalOperatorEnum | null, ObjectiveQualifier: IfcObjectiveEnum , UserDefinedQualifier: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.BenchmarkValues = BenchmarkValues;
		this.LogicalAggregator = LogicalAggregator;
		this.ObjectiveQualifier = ObjectiveQualifier;
		this.UserDefinedQualifier = UserDefinedQualifier;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	BenchmarkValues: Handle<IfcConstraint> | null;
	LogicalAggregator: IfcLogicalOperatorEnum | null;
	ObjectiveQualifier: IfcObjectiveEnum ;
	UserDefinedQualifier: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOccupant {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheActor: IfcActorSelect , PredefinedType: IfcOccupantTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheActor: IfcActorSelect ;
	PredefinedType: IfcOccupantTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOffsetCurve {
	constructor(BasisCurve: Handle<IfcCurve> )
	{
		this.BasisCurve = BasisCurve;
	}
	BasisCurve: Handle<IfcCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOffsetCurve2D {
	constructor(BasisCurve: Handle<IfcCurve> , Distance: IfcLengthMeasure , SelfIntersect: IfcLogical )
	{
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
	}
	BasisCurve: Handle<IfcCurve> ;
	Distance: IfcLengthMeasure ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOffsetCurve3D {
	constructor(BasisCurve: Handle<IfcCurve> , Distance: IfcLengthMeasure , SelfIntersect: IfcLogical , RefDirection: Handle<IfcDirection> )
	{
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
		this.RefDirection = RefDirection;
	}
	BasisCurve: Handle<IfcCurve> ;
	Distance: IfcLengthMeasure ;
	SelfIntersect: IfcLogical ;
	RefDirection: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOffsetCurveByDistances {
	constructor(BasisCurve: Handle<IfcCurve> , OffsetValues: Handle<IfcDistanceExpression> , Tag: IfcLabel | null)
	{
		this.BasisCurve = BasisCurve;
		this.OffsetValues = OffsetValues;
		this.Tag = Tag;
	}
	BasisCurve: Handle<IfcCurve> ;
	OffsetValues: Handle<IfcDistanceExpression> ;
	Tag: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOpenShell {
	constructor(CfsFaces: Handle<IfcFace>[] )
	{
		this.CfsFaces = CfsFaces;
	}
	CfsFaces: Handle<IfcFace>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOpeningElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOpeningElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOpeningElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOpeningStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOpeningElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOpeningElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOrganization {
	constructor(Identification: IfcIdentifier | null, Name: IfcLabel , Description: IfcText | null, Roles: Handle<IfcActorRole> | null, Addresses: Handle<IfcAddress> | null)
	{
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Roles = Roles;
		this.Addresses = Addresses;
	}
	Identification: IfcIdentifier | null;
	Name: IfcLabel ;
	Description: IfcText | null;
	Roles: Handle<IfcActorRole> | null;
	Addresses: Handle<IfcAddress> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOrganizationRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingOrganization: Handle<IfcOrganization> , RelatedOrganizations: Handle<IfcOrganization>[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingOrganization = RelatingOrganization;
		this.RelatedOrganizations = RelatedOrganizations;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingOrganization: Handle<IfcOrganization> ;
	RelatedOrganizations: Handle<IfcOrganization>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOrientationExpression {
	constructor(LateralAxisDirection: Handle<IfcDirection> , VerticalAxisDirection: Handle<IfcDirection> )
	{
		this.LateralAxisDirection = LateralAxisDirection;
		this.VerticalAxisDirection = VerticalAxisDirection;
	}
	LateralAxisDirection: Handle<IfcDirection> ;
	VerticalAxisDirection: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOrientedEdge {
	constructor(EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , EdgeElement: Handle<IfcEdge> , Orientation: IfcBoolean )
	{
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.EdgeElement = EdgeElement;
		this.Orientation = Orientation;
	}
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	EdgeElement: Handle<IfcEdge> ;
	Orientation: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOuterBoundaryCurve {
	constructor(Segments: Handle<IfcCompositeCurveSegment> , SelfIntersect: IfcLogical )
	{
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	Segments: Handle<IfcCompositeCurveSegment> ;
	SelfIntersect: IfcLogical ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOutlet {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOutletTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOutletTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOutletType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcOutletTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcOutletTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcOwnerHistory {
	constructor(OwningUser: Handle<IfcPersonAndOrganization> , OwningApplication: Handle<IfcApplication> , State: IfcStateEnum | null, ChangeAction: IfcChangeActionEnum | null, LastModifiedDate: IfcTimeStamp | null, LastModifyingUser: Handle<IfcPersonAndOrganization> | null, LastModifyingApplication: Handle<IfcApplication> | null, CreationDate: IfcTimeStamp )
	{
		this.OwningUser = OwningUser;
		this.OwningApplication = OwningApplication;
		this.State = State;
		this.ChangeAction = ChangeAction;
		this.LastModifiedDate = LastModifiedDate;
		this.LastModifyingUser = LastModifyingUser;
		this.LastModifyingApplication = LastModifyingApplication;
		this.CreationDate = CreationDate;
	}
	OwningUser: Handle<IfcPersonAndOrganization> ;
	OwningApplication: Handle<IfcApplication> ;
	State: IfcStateEnum | null;
	ChangeAction: IfcChangeActionEnum | null;
	LastModifiedDate: IfcTimeStamp | null;
	LastModifyingUser: Handle<IfcPersonAndOrganization> | null;
	LastModifyingApplication: Handle<IfcApplication> | null;
	CreationDate: IfcTimeStamp ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcParameterizedProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPath {
	constructor(EdgeList: Handle<IfcOrientedEdge> )
	{
		this.EdgeList = EdgeList;
	}
	EdgeList: Handle<IfcOrientedEdge> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPcurve {
	constructor(BasisSurface: Handle<IfcSurface> , ReferenceCurve: Handle<IfcCurve> )
	{
		this.BasisSurface = BasisSurface;
		this.ReferenceCurve = ReferenceCurve;
	}
	BasisSurface: Handle<IfcSurface> ;
	ReferenceCurve: Handle<IfcCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPerformanceHistory {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LifeCyclePhase: IfcLabel , PredefinedType: IfcPerformanceHistoryTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LifeCyclePhase = LifeCyclePhase;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LifeCyclePhase: IfcLabel ;
	PredefinedType: IfcPerformanceHistoryTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPermeableCoveringProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, OperationType: IfcPermeableCoveringOperationEnum , PanelPosition: IfcWindowPanelPositionEnum , FrameDepth: IfcPositiveLengthMeasure | null, FrameThickness: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.OperationType = OperationType;
		this.PanelPosition = PanelPosition;
		this.FrameDepth = FrameDepth;
		this.FrameThickness = FrameThickness;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	OperationType: IfcPermeableCoveringOperationEnum ;
	PanelPosition: IfcWindowPanelPositionEnum ;
	FrameDepth: IfcPositiveLengthMeasure | null;
	FrameThickness: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPermit {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcPermitTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcPermitTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPerson {
	constructor(Identification: IfcIdentifier | null, FamilyName: IfcLabel | null, GivenName: IfcLabel | null, MiddleNames: IfcLabel | null, PrefixTitles: IfcLabel | null, SuffixTitles: IfcLabel | null, Roles: Handle<IfcActorRole> | null, Addresses: Handle<IfcAddress> | null)
	{
		this.Identification = Identification;
		this.FamilyName = FamilyName;
		this.GivenName = GivenName;
		this.MiddleNames = MiddleNames;
		this.PrefixTitles = PrefixTitles;
		this.SuffixTitles = SuffixTitles;
		this.Roles = Roles;
		this.Addresses = Addresses;
	}
	Identification: IfcIdentifier | null;
	FamilyName: IfcLabel | null;
	GivenName: IfcLabel | null;
	MiddleNames: IfcLabel | null;
	PrefixTitles: IfcLabel | null;
	SuffixTitles: IfcLabel | null;
	Roles: Handle<IfcActorRole> | null;
	Addresses: Handle<IfcAddress> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPersonAndOrganization {
	constructor(ThePerson: Handle<IfcPerson> , TheOrganization: Handle<IfcOrganization> , Roles: Handle<IfcActorRole> | null)
	{
		this.ThePerson = ThePerson;
		this.TheOrganization = TheOrganization;
		this.Roles = Roles;
	}
	ThePerson: Handle<IfcPerson> ;
	TheOrganization: Handle<IfcOrganization> ;
	Roles: Handle<IfcActorRole> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPhysicalComplexQuantity {
	constructor(Name: IfcLabel , Description: IfcText | null, HasQuantities: Handle<IfcPhysicalQuantity>[] , Discrimination: IfcLabel , Quality: IfcLabel | null, Usage: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.HasQuantities = HasQuantities;
		this.Discrimination = Discrimination;
		this.Quality = Quality;
		this.Usage = Usage;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	HasQuantities: Handle<IfcPhysicalQuantity>[] ;
	Discrimination: IfcLabel ;
	Quality: IfcLabel | null;
	Usage: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPhysicalQuantity {
	constructor(Name: IfcLabel , Description: IfcText | null)
	{
		this.Name = Name;
		this.Description = Description;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPhysicalSimpleQuantity {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPile {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPileTypeEnum | null, ConstructionType: IfcPileConstructionEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
		this.ConstructionType = ConstructionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPileTypeEnum | null;
	ConstructionType: IfcPileConstructionEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPileType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPileTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPileTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPipeFitting {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPipeFittingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPipeFittingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPipeFittingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPipeFittingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPipeFittingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPipeSegment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPipeSegmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPipeSegmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPipeSegmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPipeSegmentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPipeSegmentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPixelTexture {
	constructor(RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier | null, Width: IfcInteger , Height: IfcInteger , ColourComponents: IfcInteger , Pixel: IfcBinary )
	{
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.Width = Width;
		this.Height = Height;
		this.ColourComponents = ColourComponents;
		this.Pixel = Pixel;
	}
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier | null;
	Width: IfcInteger ;
	Height: IfcInteger ;
	ColourComponents: IfcInteger ;
	Pixel: IfcBinary ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlacement {
	constructor(Location: Handle<IfcCartesianPoint> )
	{
		this.Location = Location;
	}
	Location: Handle<IfcCartesianPoint> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlanarBox {
	constructor(SizeInX: IfcLengthMeasure , SizeInY: IfcLengthMeasure , Placement: IfcAxis2Placement )
	{
		this.SizeInX = SizeInX;
		this.SizeInY = SizeInY;
		this.Placement = Placement;
	}
	SizeInX: IfcLengthMeasure ;
	SizeInY: IfcLengthMeasure ;
	Placement: IfcAxis2Placement ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlanarExtent {
	constructor(SizeInX: IfcLengthMeasure , SizeInY: IfcLengthMeasure )
	{
		this.SizeInX = SizeInX;
		this.SizeInY = SizeInY;
	}
	SizeInX: IfcLengthMeasure ;
	SizeInY: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlane {
	constructor(Position: Handle<IfcAxis2Placement3D> )
	{
		this.Position = Position;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPlateTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPlateTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlateStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPlateTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPlateTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPlateType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPlateTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPlateTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPoint {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPointOnCurve {
	constructor(BasisCurve: Handle<IfcCurve> , PointParameter: IfcParameterValue )
	{
		this.BasisCurve = BasisCurve;
		this.PointParameter = PointParameter;
	}
	BasisCurve: Handle<IfcCurve> ;
	PointParameter: IfcParameterValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPointOnSurface {
	constructor(BasisSurface: Handle<IfcSurface> , PointParameterU: IfcParameterValue , PointParameterV: IfcParameterValue )
	{
		this.BasisSurface = BasisSurface;
		this.PointParameterU = PointParameterU;
		this.PointParameterV = PointParameterV;
	}
	BasisSurface: Handle<IfcSurface> ;
	PointParameterU: IfcParameterValue ;
	PointParameterV: IfcParameterValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPolyLoop {
	constructor(Polygon: Handle<IfcCartesianPoint> )
	{
		this.Polygon = Polygon;
	}
	Polygon: Handle<IfcCartesianPoint> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPolygonalBoundedHalfSpace {
	constructor(BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean , Position: Handle<IfcAxis2Placement3D> , PolygonalBoundary: Handle<IfcBoundedCurve> )
	{
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
		this.Position = Position;
		this.PolygonalBoundary = PolygonalBoundary;
	}
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	Position: Handle<IfcAxis2Placement3D> ;
	PolygonalBoundary: Handle<IfcBoundedCurve> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPolygonalFaceSet {
	constructor(Coordinates: Handle<IfcCartesianPointList3D> , Closed: IfcBoolean | null, Faces: Handle<IfcIndexedPolygonalFace> , PnIndex: IfcPositiveInteger | null)
	{
		this.Coordinates = Coordinates;
		this.Closed = Closed;
		this.Faces = Faces;
		this.PnIndex = PnIndex;
	}
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Closed: IfcBoolean | null;
	Faces: Handle<IfcIndexedPolygonalFace> ;
	PnIndex: IfcPositiveInteger | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPolyline {
	constructor(Points: Handle<IfcCartesianPoint> )
	{
		this.Points = Points;
	}
	Points: Handle<IfcCartesianPoint> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPort {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPositioningElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPostalAddress {
	constructor(Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null, InternalLocation: IfcLabel | null, AddressLines: IfcLabel | null, PostalBox: IfcLabel | null, Town: IfcLabel | null, Region: IfcLabel | null, PostalCode: IfcLabel | null, Country: IfcLabel | null)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.InternalLocation = InternalLocation;
		this.AddressLines = AddressLines;
		this.PostalBox = PostalBox;
		this.Town = Town;
		this.Region = Region;
		this.PostalCode = PostalCode;
		this.Country = Country;
	}
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	InternalLocation: IfcLabel | null;
	AddressLines: IfcLabel | null;
	PostalBox: IfcLabel | null;
	Town: IfcLabel | null;
	Region: IfcLabel | null;
	PostalCode: IfcLabel | null;
	Country: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedColour {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedCurveFont {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedItem {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedProperties {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedPropertySet {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPreDefinedTextFont {
	constructor(Name: IfcLabel )
	{
		this.Name = Name;
	}
	Name: IfcLabel ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPresentationItem {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPresentationLayerAssignment {
	constructor(Name: IfcLabel , Description: IfcText | null, AssignedItems: IfcLayeredItem[] , Identifier: IfcIdentifier | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	AssignedItems: IfcLayeredItem[] ;
	Identifier: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPresentationLayerWithStyle {
	constructor(Name: IfcLabel , Description: IfcText | null, AssignedItems: IfcLayeredItem[] , Identifier: IfcIdentifier | null, LayerOn: IfcLogical , LayerFrozen: IfcLogical , LayerBlocked: IfcLogical , LayerStyles: Handle<IfcPresentationStyle>[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
		this.LayerOn = LayerOn;
		this.LayerFrozen = LayerFrozen;
		this.LayerBlocked = LayerBlocked;
		this.LayerStyles = LayerStyles;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	AssignedItems: IfcLayeredItem[] ;
	Identifier: IfcIdentifier | null;
	LayerOn: IfcLogical ;
	LayerFrozen: IfcLogical ;
	LayerBlocked: IfcLogical ;
	LayerStyles: Handle<IfcPresentationStyle>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPresentationStyle {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPresentationStyleAssignment {
	constructor(Styles: IfcPresentationStyleSelect[] )
	{
		this.Styles = Styles;
	}
	Styles: IfcPresentationStyleSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProcedure {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, PredefinedType: IfcProcedureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	PredefinedType: IfcProcedureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProcedureType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcProcedureTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcProcedureTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProcess {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProduct {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProductDefinitionShape {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation> )
	{
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProductRepresentation {
	constructor(Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation> )
	{
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProfileProperties {
	constructor(Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] , ProfileDefinition: Handle<IfcProfileDef> )
	{
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
		this.ProfileDefinition = ProfileDefinition;
	}
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	ProfileDefinition: Handle<IfcProfileDef> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProject {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProjectLibrary {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProjectOrder {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcProjectOrderTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcProjectOrderTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProjectedCRS {
	constructor(Name: IfcLabel , Description: IfcText | null, GeodeticDatum: IfcIdentifier | null, VerticalDatum: IfcIdentifier | null, MapProjection: IfcIdentifier | null, MapZone: IfcIdentifier | null, MapUnit: Handle<IfcNamedUnit> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.GeodeticDatum = GeodeticDatum;
		this.VerticalDatum = VerticalDatum;
		this.MapProjection = MapProjection;
		this.MapZone = MapZone;
		this.MapUnit = MapUnit;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	GeodeticDatum: IfcIdentifier | null;
	VerticalDatum: IfcIdentifier | null;
	MapProjection: IfcIdentifier | null;
	MapZone: IfcIdentifier | null;
	MapUnit: Handle<IfcNamedUnit> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProjectionElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProjectionElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProjectionElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProperty {
	constructor(Name: IfcIdentifier , Description: IfcText | null)
	{
		this.Name = Name;
		this.Description = Description;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyAbstraction {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyBoundedValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, UpperBoundValue: IfcValue | null, LowerBoundValue: IfcValue | null, Unit: IfcUnit | null, SetPointValue: IfcValue | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.UpperBoundValue = UpperBoundValue;
		this.LowerBoundValue = LowerBoundValue;
		this.Unit = Unit;
		this.SetPointValue = SetPointValue;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UpperBoundValue: IfcValue | null;
	LowerBoundValue: IfcValue | null;
	Unit: IfcUnit | null;
	SetPointValue: IfcValue | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyDefinition {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyDependencyRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, DependingProperty: Handle<IfcProperty> , DependantProperty: Handle<IfcProperty> , Expression: IfcText | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.DependingProperty = DependingProperty;
		this.DependantProperty = DependantProperty;
		this.Expression = Expression;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	DependingProperty: Handle<IfcProperty> ;
	DependantProperty: Handle<IfcProperty> ;
	Expression: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyEnumeratedValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, EnumerationValues: IfcValue | null, EnumerationReference: Handle<IfcPropertyEnumeration> | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.EnumerationValues = EnumerationValues;
		this.EnumerationReference = EnumerationReference;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	EnumerationValues: IfcValue | null;
	EnumerationReference: Handle<IfcPropertyEnumeration> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyEnumeration {
	constructor(Name: IfcLabel , EnumerationValues: IfcValue , Unit: IfcUnit | null)
	{
		this.Name = Name;
		this.EnumerationValues = EnumerationValues;
		this.Unit = Unit;
	}
	Name: IfcLabel ;
	EnumerationValues: IfcValue ;
	Unit: IfcUnit | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyListValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, ListValues: IfcValue | null, Unit: IfcUnit | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.ListValues = ListValues;
		this.Unit = Unit;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	ListValues: IfcValue | null;
	Unit: IfcUnit | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyReferenceValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, UsageName: IfcText | null, PropertyReference: IfcObjectReferenceSelect | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.PropertyReference = PropertyReference;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UsageName: IfcText | null;
	PropertyReference: IfcObjectReferenceSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertySet {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, HasProperties: Handle<IfcProperty>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.HasProperties = HasProperties;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	HasProperties: Handle<IfcProperty>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertySetDefinition {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertySetTemplate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, TemplateType: IfcPropertySetTemplateTypeEnum | null, ApplicableEntity: IfcIdentifier | null, HasPropertyTemplates: Handle<IfcPropertyTemplate>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.TemplateType = TemplateType;
		this.ApplicableEntity = ApplicableEntity;
		this.HasPropertyTemplates = HasPropertyTemplates;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TemplateType: IfcPropertySetTemplateTypeEnum | null;
	ApplicableEntity: IfcIdentifier | null;
	HasPropertyTemplates: Handle<IfcPropertyTemplate>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertySingleValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, NominalValue: IfcValue | null, Unit: IfcUnit | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.NominalValue = NominalValue;
		this.Unit = Unit;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	NominalValue: IfcValue | null;
	Unit: IfcUnit | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyTableValue {
	constructor(Name: IfcIdentifier , Description: IfcText | null, DefiningValues: IfcValue | null, DefinedValues: IfcValue | null, Expression: IfcText | null, DefiningUnit: IfcUnit | null, DefinedUnit: IfcUnit | null, CurveInterpolation: IfcCurveInterpolationEnum | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.DefiningValues = DefiningValues;
		this.DefinedValues = DefinedValues;
		this.Expression = Expression;
		this.DefiningUnit = DefiningUnit;
		this.DefinedUnit = DefinedUnit;
		this.CurveInterpolation = CurveInterpolation;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	DefiningValues: IfcValue | null;
	DefinedValues: IfcValue | null;
	Expression: IfcText | null;
	DefiningUnit: IfcUnit | null;
	DefinedUnit: IfcUnit | null;
	CurveInterpolation: IfcCurveInterpolationEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyTemplate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPropertyTemplateDefinition {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProtectiveDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProtectiveDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProtectiveDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProtectiveDeviceTrippingUnit {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProtectiveDeviceTrippingUnitType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProtectiveDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcProtectiveDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcProtectiveDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcProxy {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, ProxyType: IfcObjectTypeEnum , Tag: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.ProxyType = ProxyType;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	ProxyType: IfcObjectTypeEnum ;
	Tag: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPump {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPumpTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPumpTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcPumpType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPumpTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPumpTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityArea {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, AreaValue: IfcAreaMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.AreaValue = AreaValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	AreaValue: IfcAreaMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityCount {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, CountValue: IfcCountMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.CountValue = CountValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	CountValue: IfcCountMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityLength {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, LengthValue: IfcLengthMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.LengthValue = LengthValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	LengthValue: IfcLengthMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantitySet {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityTime {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, TimeValue: IfcTimeMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.TimeValue = TimeValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	TimeValue: IfcTimeMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityVolume {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, VolumeValue: IfcVolumeMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.VolumeValue = VolumeValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	VolumeValue: IfcVolumeMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcQuantityWeight {
	constructor(Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, WeightValue: IfcMassMeasure , Formula: IfcLabel | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.WeightValue = WeightValue;
		this.Formula = Formula;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	WeightValue: IfcMassMeasure ;
	Formula: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRailing {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRailingTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRailingTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRailingType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRailingTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRailingTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRamp {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRampTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRampTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRampFlight {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRampFlightTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRampFlightTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRampFlightType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRampFlightTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRampFlightTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRampType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRampTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRampTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRationalBSplineCurveWithKnots {
	constructor(Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical , KnotMultiplicities: IfcInteger , Knots: IfcParameterValue , KnotSpec: IfcKnotType , WeightsData: IfcReal )
	{
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
		this.WeightsData = WeightsData;
	}
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	KnotMultiplicities: IfcInteger ;
	Knots: IfcParameterValue ;
	KnotSpec: IfcKnotType ;
	WeightsData: IfcReal ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRationalBSplineSurfaceWithKnots {
	constructor(UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint> , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical , UMultiplicities: IfcInteger , VMultiplicities: IfcInteger , UKnots: IfcParameterValue , VKnots: IfcParameterValue , KnotSpec: IfcKnotType , WeightsData: IfcReal )
	{
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
		this.UMultiplicities = UMultiplicities;
		this.VMultiplicities = VMultiplicities;
		this.UKnots = UKnots;
		this.VKnots = VKnots;
		this.KnotSpec = KnotSpec;
		this.WeightsData = WeightsData;
	}
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint> ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	UMultiplicities: IfcInteger ;
	VMultiplicities: IfcInteger ;
	UKnots: IfcParameterValue ;
	VKnots: IfcParameterValue ;
	KnotSpec: IfcKnotType ;
	WeightsData: IfcReal ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRectangleHollowProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure , InnerFilletRadius: IfcNonNegativeLengthMeasure | null, OuterFilletRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
		this.WallThickness = WallThickness;
		this.InnerFilletRadius = InnerFilletRadius;
		this.OuterFilletRadius = OuterFilletRadius;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	InnerFilletRadius: IfcNonNegativeLengthMeasure | null;
	OuterFilletRadius: IfcNonNegativeLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRectangleProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRectangularPyramid {
	constructor(Position: Handle<IfcAxis2Placement3D> , XLength: IfcPositiveLengthMeasure , YLength: IfcPositiveLengthMeasure , Height: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.XLength = XLength;
		this.YLength = YLength;
		this.Height = Height;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	XLength: IfcPositiveLengthMeasure ;
	YLength: IfcPositiveLengthMeasure ;
	Height: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRectangularTrimmedSurface {
	constructor(BasisSurface: Handle<IfcSurface> , U1: IfcParameterValue , V1: IfcParameterValue , U2: IfcParameterValue , V2: IfcParameterValue , Usense: IfcBoolean , Vsense: IfcBoolean )
	{
		this.BasisSurface = BasisSurface;
		this.U1 = U1;
		this.V1 = V1;
		this.U2 = U2;
		this.V2 = V2;
		this.Usense = Usense;
		this.Vsense = Vsense;
	}
	BasisSurface: Handle<IfcSurface> ;
	U1: IfcParameterValue ;
	V1: IfcParameterValue ;
	U2: IfcParameterValue ;
	V2: IfcParameterValue ;
	Usense: IfcBoolean ;
	Vsense: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRecurrencePattern {
	constructor(RecurrenceType: IfcRecurrenceTypeEnum , DayComponent: IfcDayInMonthNumber[] | null, WeekdayComponent: IfcDayInWeekNumber[] | null, MonthComponent: IfcMonthInYearNumber[] | null, Position: IfcInteger | null, Interval: IfcInteger | null, Occurrences: IfcInteger | null, TimePeriods: Handle<IfcTimePeriod> | null)
	{
		this.RecurrenceType = RecurrenceType;
		this.DayComponent = DayComponent;
		this.WeekdayComponent = WeekdayComponent;
		this.MonthComponent = MonthComponent;
		this.Position = Position;
		this.Interval = Interval;
		this.Occurrences = Occurrences;
		this.TimePeriods = TimePeriods;
	}
	RecurrenceType: IfcRecurrenceTypeEnum ;
	DayComponent: IfcDayInMonthNumber[] | null;
	WeekdayComponent: IfcDayInWeekNumber[] | null;
	MonthComponent: IfcMonthInYearNumber[] | null;
	Position: IfcInteger | null;
	Interval: IfcInteger | null;
	Occurrences: IfcInteger | null;
	TimePeriods: Handle<IfcTimePeriod> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReference {
	constructor(TypeIdentifier: IfcIdentifier | null, AttributeIdentifier: IfcIdentifier | null, InstanceName: IfcLabel | null, ListPositions: IfcInteger | null, InnerReference: Handle<IfcReference> | null)
	{
		this.TypeIdentifier = TypeIdentifier;
		this.AttributeIdentifier = AttributeIdentifier;
		this.InstanceName = InstanceName;
		this.ListPositions = ListPositions;
		this.InnerReference = InnerReference;
	}
	TypeIdentifier: IfcIdentifier | null;
	AttributeIdentifier: IfcIdentifier | null;
	InstanceName: IfcLabel | null;
	ListPositions: IfcInteger | null;
	InnerReference: Handle<IfcReference> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReferent {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcReferentTypeEnum | null, RestartDistance: IfcLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.RestartDistance = RestartDistance;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcReferentTypeEnum | null;
	RestartDistance: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRegularTimeSeries {
	constructor(Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null, TimeStep: IfcTimeMeasure , Values: Handle<IfcTimeSeriesValue> )
	{
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
		this.TimeStep = TimeStep;
		this.Values = Values;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	TimeStep: IfcTimeMeasure ;
	Values: Handle<IfcTimeSeriesValue> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcementBarProperties {
	constructor(TotalCrossSectionArea: IfcAreaMeasure , SteelGrade: IfcLabel , BarSurface: IfcReinforcingBarSurfaceEnum | null, EffectiveDepth: IfcLengthMeasure | null, NominalBarDiameter: IfcPositiveLengthMeasure | null, BarCount: IfcCountMeasure | null)
	{
		this.TotalCrossSectionArea = TotalCrossSectionArea;
		this.SteelGrade = SteelGrade;
		this.BarSurface = BarSurface;
		this.EffectiveDepth = EffectiveDepth;
		this.NominalBarDiameter = NominalBarDiameter;
		this.BarCount = BarCount;
	}
	TotalCrossSectionArea: IfcAreaMeasure ;
	SteelGrade: IfcLabel ;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	EffectiveDepth: IfcLengthMeasure | null;
	NominalBarDiameter: IfcPositiveLengthMeasure | null;
	BarCount: IfcCountMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcementDefinitionProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, DefinitionType: IfcLabel | null, ReinforcementSectionDefinitions: Handle<IfcSectionReinforcementProperties> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.DefinitionType = DefinitionType;
		this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	DefinitionType: IfcLabel | null;
	ReinforcementSectionDefinitions: Handle<IfcSectionReinforcementProperties> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingBar {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, BarLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcReinforcingBarTypeEnum | null, BarSurface: IfcReinforcingBarSurfaceEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.BarLength = BarLength;
		this.PredefinedType = PredefinedType;
		this.BarSurface = BarSurface;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	BarLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcReinforcingBarTypeEnum | null;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingBarType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcReinforcingBarTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, BarLength: IfcPositiveLengthMeasure | null, BarSurface: IfcReinforcingBarSurfaceEnum | null, BendingShapeCode: IfcLabel | null, BendingParameters: IfcBendingParameterSelect | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.BarLength = BarLength;
		this.BarSurface = BarSurface;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcReinforcingBarTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	BarLength: IfcPositiveLengthMeasure | null;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	BendingShapeCode: IfcLabel | null;
	BendingParameters: IfcBendingParameterSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingMesh {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, MeshLength: IfcPositiveLengthMeasure | null, MeshWidth: IfcPositiveLengthMeasure | null, LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null, TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null, LongitudinalBarCrossSectionArea: IfcAreaMeasure | null, TransverseBarCrossSectionArea: IfcAreaMeasure | null, LongitudinalBarSpacing: IfcPositiveLengthMeasure | null, TransverseBarSpacing: IfcPositiveLengthMeasure | null, PredefinedType: IfcReinforcingMeshTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	MeshLength: IfcPositiveLengthMeasure | null;
	MeshWidth: IfcPositiveLengthMeasure | null;
	LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null;
	TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null;
	LongitudinalBarCrossSectionArea: IfcAreaMeasure | null;
	TransverseBarCrossSectionArea: IfcAreaMeasure | null;
	LongitudinalBarSpacing: IfcPositiveLengthMeasure | null;
	TransverseBarSpacing: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcReinforcingMeshTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReinforcingMeshType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcReinforcingMeshTypeEnum , MeshLength: IfcPositiveLengthMeasure | null, MeshWidth: IfcPositiveLengthMeasure | null, LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null, TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null, LongitudinalBarCrossSectionArea: IfcAreaMeasure | null, TransverseBarCrossSectionArea: IfcAreaMeasure | null, LongitudinalBarSpacing: IfcPositiveLengthMeasure | null, TransverseBarSpacing: IfcPositiveLengthMeasure | null, BendingShapeCode: IfcLabel | null, BendingParameters: IfcBendingParameterSelect | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcReinforcingMeshTypeEnum ;
	MeshLength: IfcPositiveLengthMeasure | null;
	MeshWidth: IfcPositiveLengthMeasure | null;
	LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null;
	TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null;
	LongitudinalBarCrossSectionArea: IfcAreaMeasure | null;
	TransverseBarCrossSectionArea: IfcAreaMeasure | null;
	LongitudinalBarSpacing: IfcPositiveLengthMeasure | null;
	TransverseBarSpacing: IfcPositiveLengthMeasure | null;
	BendingShapeCode: IfcLabel | null;
	BendingParameters: IfcBendingParameterSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAggregates {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingObject: Handle<IfcObjectDefinition> , RelatedObjects: Handle<IfcObjectDefinition>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingObject = RelatingObject;
		this.RelatedObjects = RelatedObjects;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingObject: Handle<IfcObjectDefinition> ;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssigns {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToActor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingActor: Handle<IfcActor> , ActingRole: Handle<IfcActorRole> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingActor = RelatingActor;
		this.ActingRole = ActingRole;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingActor: Handle<IfcActor> ;
	ActingRole: Handle<IfcActorRole> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToControl {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingControl: Handle<IfcControl> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingControl = RelatingControl;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingControl: Handle<IfcControl> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToGroup {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingGroup: Handle<IfcGroup> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingGroup = RelatingGroup;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingGroup: Handle<IfcGroup> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToGroupByFactor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingGroup: Handle<IfcGroup> , Factor: IfcRatioMeasure )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingGroup = RelatingGroup;
		this.Factor = Factor;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingGroup: Handle<IfcGroup> ;
	Factor: IfcRatioMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToProcess {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingProcess: IfcProcessSelect , QuantityInProcess: Handle<IfcMeasureWithUnit> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingProcess = RelatingProcess;
		this.QuantityInProcess = QuantityInProcess;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingProcess: IfcProcessSelect ;
	QuantityInProcess: Handle<IfcMeasureWithUnit> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToProduct {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingProduct: IfcProductSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingProduct = RelatingProduct;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingProduct: IfcProductSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssignsToResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingResource: IfcResourceSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingResource = RelatingResource;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingResource: IfcResourceSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociates {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesApproval {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingApproval: Handle<IfcApproval> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingApproval = RelatingApproval;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingApproval: Handle<IfcApproval> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesClassification {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingClassification: IfcClassificationSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingClassification = RelatingClassification;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingClassification: IfcClassificationSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesConstraint {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , Intent: IfcLabel | null, RelatingConstraint: Handle<IfcConstraint> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.Intent = Intent;
		this.RelatingConstraint = RelatingConstraint;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	Intent: IfcLabel | null;
	RelatingConstraint: Handle<IfcConstraint> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesDocument {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingDocument: IfcDocumentSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingDocument = RelatingDocument;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingDocument: IfcDocumentSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesLibrary {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingLibrary: IfcLibrarySelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingLibrary = RelatingLibrary;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingLibrary: IfcLibrarySelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelAssociatesMaterial {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingMaterial: IfcMaterialSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingMaterial = RelatingMaterial;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingMaterial: IfcMaterialSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnects {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsPathElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , RelatingPriorities: IfcInteger , RelatedPriorities: IfcInteger , RelatedConnectionType: IfcConnectionTypeEnum , RelatingConnectionType: IfcConnectionTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.RelatingPriorities = RelatingPriorities;
		this.RelatedPriorities = RelatedPriorities;
		this.RelatedConnectionType = RelatedConnectionType;
		this.RelatingConnectionType = RelatingConnectionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	RelatingPriorities: IfcInteger ;
	RelatedPriorities: IfcInteger ;
	RelatedConnectionType: IfcConnectionTypeEnum ;
	RelatingConnectionType: IfcConnectionTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsPortToElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPort: Handle<IfcPort> , RelatedElement: Handle<IfcDistributionElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPort = RelatingPort;
		this.RelatedElement = RelatedElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPort: Handle<IfcPort> ;
	RelatedElement: Handle<IfcDistributionElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsPorts {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPort: Handle<IfcPort> , RelatedPort: Handle<IfcPort> , RealizingElement: Handle<IfcElement> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPort = RelatingPort;
		this.RelatedPort = RelatedPort;
		this.RealizingElement = RealizingElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPort: Handle<IfcPort> ;
	RelatedPort: Handle<IfcPort> ;
	RealizingElement: Handle<IfcElement> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsStructuralActivity {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: IfcStructuralActivityAssignmentSelect , RelatedStructuralActivity: Handle<IfcStructuralActivity> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedStructuralActivity = RelatedStructuralActivity;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: IfcStructuralActivityAssignmentSelect ;
	RelatedStructuralActivity: Handle<IfcStructuralActivity> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsStructuralMember {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingStructuralMember: Handle<IfcStructuralMember> , RelatedStructuralConnection: Handle<IfcStructuralConnection> , AppliedCondition: Handle<IfcBoundaryCondition> | null, AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null, SupportedLength: IfcLengthMeasure | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingStructuralMember = RelatingStructuralMember;
		this.RelatedStructuralConnection = RelatedStructuralConnection;
		this.AppliedCondition = AppliedCondition;
		this.AdditionalConditions = AdditionalConditions;
		this.SupportedLength = SupportedLength;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingStructuralMember: Handle<IfcStructuralMember> ;
	RelatedStructuralConnection: Handle<IfcStructuralConnection> ;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null;
	SupportedLength: IfcLengthMeasure | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsWithEccentricity {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingStructuralMember: Handle<IfcStructuralMember> , RelatedStructuralConnection: Handle<IfcStructuralConnection> , AppliedCondition: Handle<IfcBoundaryCondition> | null, AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null, SupportedLength: IfcLengthMeasure | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null, ConnectionConstraint: Handle<IfcConnectionGeometry> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingStructuralMember = RelatingStructuralMember;
		this.RelatedStructuralConnection = RelatedStructuralConnection;
		this.AppliedCondition = AppliedCondition;
		this.AdditionalConditions = AdditionalConditions;
		this.SupportedLength = SupportedLength;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		this.ConnectionConstraint = ConnectionConstraint;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingStructuralMember: Handle<IfcStructuralMember> ;
	RelatedStructuralConnection: Handle<IfcStructuralConnection> ;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null;
	SupportedLength: IfcLengthMeasure | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	ConnectionConstraint: Handle<IfcConnectionGeometry> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelConnectsWithRealizingElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , RealizingElements: Handle<IfcElement>[] , ConnectionType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.RealizingElements = RealizingElements;
		this.ConnectionType = ConnectionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	RealizingElements: Handle<IfcElement>[] ;
	ConnectionType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelContainedInSpatialStructure {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedElements: Handle<IfcProduct>[] , RelatingStructure: Handle<IfcSpatialElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedElements = RelatedElements;
		this.RelatingStructure = RelatingStructure;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedElements: Handle<IfcProduct>[] ;
	RelatingStructure: Handle<IfcSpatialElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelCoversBldgElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingBuildingElement: Handle<IfcElement> , RelatedCoverings: Handle<IfcCovering>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingBuildingElement = RelatingBuildingElement;
		this.RelatedCoverings = RelatedCoverings;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingBuildingElement: Handle<IfcElement> ;
	RelatedCoverings: Handle<IfcCovering>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelCoversSpaces {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: Handle<IfcSpace> , RelatedCoverings: Handle<IfcCovering>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedCoverings = RelatedCoverings;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: Handle<IfcSpace> ;
	RelatedCoverings: Handle<IfcCovering>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDeclares {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingContext: Handle<IfcContext> , RelatedDefinitions: IfcDefinitionSelect[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingContext = RelatingContext;
		this.RelatedDefinitions = RelatedDefinitions;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingContext: Handle<IfcContext> ;
	RelatedDefinitions: IfcDefinitionSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDecomposes {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDefines {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDefinesByObject {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObject>[] , RelatingObject: Handle<IfcObject> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingObject = RelatingObject;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObject>[] ;
	RelatingObject: Handle<IfcObject> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDefinesByProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatingPropertyDefinition: IfcPropertySetDefinitionSelect )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingPropertyDefinition = RelatingPropertyDefinition;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatingPropertyDefinition: IfcPropertySetDefinitionSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDefinesByTemplate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedPropertySets: Handle<IfcPropertySetDefinition>[] , RelatingTemplate: Handle<IfcPropertySetTemplate> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedPropertySets = RelatedPropertySets;
		this.RelatingTemplate = RelatingTemplate;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedPropertySets: Handle<IfcPropertySetDefinition>[] ;
	RelatingTemplate: Handle<IfcPropertySetTemplate> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelDefinesByType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObject>[] , RelatingType: Handle<IfcTypeObject> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingType = RelatingType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObject>[] ;
	RelatingType: Handle<IfcTypeObject> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelFillsElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingOpeningElement: Handle<IfcOpeningElement> , RelatedBuildingElement: Handle<IfcElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingOpeningElement = RelatingOpeningElement;
		this.RelatedBuildingElement = RelatedBuildingElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingOpeningElement: Handle<IfcOpeningElement> ;
	RelatedBuildingElement: Handle<IfcElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelFlowControlElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedControlElements: Handle<IfcDistributionControlElement>[] , RelatingFlowElement: Handle<IfcDistributionFlowElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedControlElements = RelatedControlElements;
		this.RelatingFlowElement = RelatingFlowElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedControlElements: Handle<IfcDistributionControlElement>[] ;
	RelatingFlowElement: Handle<IfcDistributionFlowElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelInterferesElements {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , InterferenceGeometry: Handle<IfcConnectionGeometry> | null, InterferenceType: IfcIdentifier | null, ImpliedOrder: Handle<boolean> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.InterferenceGeometry = InterferenceGeometry;
		this.InterferenceType = InterferenceType;
		this.ImpliedOrder = ImpliedOrder;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	InterferenceGeometry: Handle<IfcConnectionGeometry> | null;
	InterferenceType: IfcIdentifier | null;
	ImpliedOrder: Handle<boolean> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelNests {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingObject: Handle<IfcObjectDefinition> , RelatedObjects: Handle<IfcObjectDefinition> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingObject = RelatingObject;
		this.RelatedObjects = RelatedObjects;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingObject: Handle<IfcObjectDefinition> ;
	RelatedObjects: Handle<IfcObjectDefinition> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelPositions {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPositioningElement: Handle<IfcPositioningElement> , RelatedProducts: Handle<IfcProduct>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPositioningElement = RelatingPositioningElement;
		this.RelatedProducts = RelatedProducts;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPositioningElement: Handle<IfcPositioningElement> ;
	RelatedProducts: Handle<IfcProduct>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelProjectsElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: Handle<IfcElement> , RelatedFeatureElement: Handle<IfcFeatureElementAddition> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedFeatureElement = RelatedFeatureElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedFeatureElement: Handle<IfcFeatureElementAddition> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelReferencedInSpatialStructure {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedElements: Handle<IfcProduct>[] , RelatingStructure: Handle<IfcSpatialElement> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedElements = RelatedElements;
		this.RelatingStructure = RelatingStructure;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedElements: Handle<IfcProduct>[] ;
	RelatingStructure: Handle<IfcSpatialElement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelSequence {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingProcess: Handle<IfcProcess> , RelatedProcess: Handle<IfcProcess> , TimeLag: Handle<IfcLagTime> | null, SequenceType: IfcSequenceEnum | null, UserDefinedSequenceType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingProcess = RelatingProcess;
		this.RelatedProcess = RelatedProcess;
		this.TimeLag = TimeLag;
		this.SequenceType = SequenceType;
		this.UserDefinedSequenceType = UserDefinedSequenceType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingProcess: Handle<IfcProcess> ;
	RelatedProcess: Handle<IfcProcess> ;
	TimeLag: Handle<IfcLagTime> | null;
	SequenceType: IfcSequenceEnum | null;
	UserDefinedSequenceType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelServicesBuildings {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSystem: Handle<IfcSystem> , RelatedBuildings: Handle<IfcSpatialElement>[] )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSystem = RelatingSystem;
		this.RelatedBuildings = RelatedBuildings;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSystem: Handle<IfcSystem> ;
	RelatedBuildings: Handle<IfcSpatialElement>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelSpaceBoundary {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelSpaceBoundary1stLevel {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum , ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		this.ParentBoundary = ParentBoundary;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelSpaceBoundary2ndLevel {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum , ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null, CorrespondingBoundary: Handle<IfcRelSpaceBoundary2ndLevel> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		this.ParentBoundary = ParentBoundary;
		this.CorrespondingBoundary = CorrespondingBoundary;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null;
	CorrespondingBoundary: Handle<IfcRelSpaceBoundary2ndLevel> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelVoidsElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingBuildingElement: Handle<IfcElement> , RelatedOpeningElement: Handle<IfcFeatureElementSubtraction> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingBuildingElement = RelatingBuildingElement;
		this.RelatedOpeningElement = RelatedOpeningElement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingBuildingElement: Handle<IfcElement> ;
	RelatedOpeningElement: Handle<IfcFeatureElementSubtraction> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRelationship {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcReparametrisedCompositeCurveSegment {
	constructor(Transition: IfcTransitionCode , SameSense: IfcBoolean , ParentCurve: Handle<IfcCurve> , ParamLength: IfcParameterValue )
	{
		this.Transition = Transition;
		this.SameSense = SameSense;
		this.ParentCurve = ParentCurve;
		this.ParamLength = ParamLength;
	}
	Transition: IfcTransitionCode ;
	SameSense: IfcBoolean ;
	ParentCurve: Handle<IfcCurve> ;
	ParamLength: IfcParameterValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRepresentation {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRepresentationContext {
	constructor(ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null)
	{
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
	}
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRepresentationItem {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRepresentationMap {
	constructor(MappingOrigin: IfcAxis2Placement , MappedRepresentation: Handle<IfcRepresentation> )
	{
		this.MappingOrigin = MappingOrigin;
		this.MappedRepresentation = MappedRepresentation;
	}
	MappingOrigin: IfcAxis2Placement ;
	MappedRepresentation: Handle<IfcRepresentation> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcResourceApprovalRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatedResourceObjects: IfcResourceObjectSelect[] , RelatingApproval: Handle<IfcApproval> )
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatedResourceObjects = RelatedResourceObjects;
		this.RelatingApproval = RelatingApproval;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	RelatingApproval: Handle<IfcApproval> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcResourceConstraintRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null, RelatingConstraint: Handle<IfcConstraint> , RelatedResourceObjects: IfcResourceObjectSelect[] )
	{
		this.Name = Name;
		this.Description = Description;
		this.RelatingConstraint = RelatingConstraint;
		this.RelatedResourceObjects = RelatedResourceObjects;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingConstraint: Handle<IfcConstraint> ;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcResourceLevelRelationship {
	constructor(Name: IfcLabel | null, Description: IfcText | null)
	{
		this.Name = Name;
		this.Description = Description;
	}
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcResourceTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, ScheduleWork: IfcDuration | null, ScheduleUsage: IfcPositiveRatioMeasure | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, ScheduleContour: IfcLabel | null, LevelingDelay: IfcDuration | null, IsOverAllocated: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualWork: IfcDuration | null, ActualUsage: IfcPositiveRatioMeasure | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingWork: IfcDuration | null, RemainingUsage: IfcPositiveRatioMeasure | null, Completion: IfcPositiveRatioMeasure | null)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.ScheduleWork = ScheduleWork;
		this.ScheduleUsage = ScheduleUsage;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.ScheduleContour = ScheduleContour;
		this.LevelingDelay = LevelingDelay;
		this.IsOverAllocated = IsOverAllocated;
		this.StatusTime = StatusTime;
		this.ActualWork = ActualWork;
		this.ActualUsage = ActualUsage;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingWork = RemainingWork;
		this.RemainingUsage = RemainingUsage;
		this.Completion = Completion;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	ScheduleWork: IfcDuration | null;
	ScheduleUsage: IfcPositiveRatioMeasure | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	ScheduleContour: IfcLabel | null;
	LevelingDelay: IfcDuration | null;
	IsOverAllocated: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualWork: IfcDuration | null;
	ActualUsage: IfcPositiveRatioMeasure | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingWork: IfcDuration | null;
	RemainingUsage: IfcPositiveRatioMeasure | null;
	Completion: IfcPositiveRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRevolvedAreaSolid {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Axis: Handle<IfcAxis1Placement> , Angle: IfcPlaneAngleMeasure )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Axis = Axis;
		this.Angle = Angle;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Axis: Handle<IfcAxis1Placement> ;
	Angle: IfcPlaneAngleMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRevolvedAreaSolidTapered {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Axis: Handle<IfcAxis1Placement> , Angle: IfcPlaneAngleMeasure , EndSweptArea: Handle<IfcProfileDef> )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Axis = Axis;
		this.Angle = Angle;
		this.EndSweptArea = EndSweptArea;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Axis: Handle<IfcAxis1Placement> ;
	Angle: IfcPlaneAngleMeasure ;
	EndSweptArea: Handle<IfcProfileDef> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRightCircularCone {
	constructor(Position: Handle<IfcAxis2Placement3D> , Height: IfcPositiveLengthMeasure , BottomRadius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Height = Height;
		this.BottomRadius = BottomRadius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	Height: IfcPositiveLengthMeasure ;
	BottomRadius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRightCircularCylinder {
	constructor(Position: Handle<IfcAxis2Placement3D> , Height: IfcPositiveLengthMeasure , Radius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Height = Height;
		this.Radius = Radius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	Height: IfcPositiveLengthMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRoof {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRoofTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRoofTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRoofType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRoofTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRoofTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRoot {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcRoundedRectangleProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , RoundingRadius: IfcPositiveLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
		this.RoundingRadius = RoundingRadius;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	RoundingRadius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSIUnit {
	constructor(Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Prefix: IfcSIPrefix | null, Name: IfcSIUnitName )
	{
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Prefix = Prefix;
		this.Name = Name;
	}
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Prefix: IfcSIPrefix | null;
	Name: IfcSIUnitName ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSanitaryTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSanitaryTerminalTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSanitaryTerminalTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSanitaryTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSanitaryTerminalTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSanitaryTerminalTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSchedulingTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSeamCurve {
	constructor(Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve> , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve> ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSectionProperties {
	constructor(SectionType: IfcSectionTypeEnum , StartProfile: Handle<IfcProfileDef> , EndProfile: Handle<IfcProfileDef> | null)
	{
		this.SectionType = SectionType;
		this.StartProfile = StartProfile;
		this.EndProfile = EndProfile;
	}
	SectionType: IfcSectionTypeEnum ;
	StartProfile: Handle<IfcProfileDef> ;
	EndProfile: Handle<IfcProfileDef> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSectionReinforcementProperties {
	constructor(LongitudinalStartPosition: IfcLengthMeasure , LongitudinalEndPosition: IfcLengthMeasure , TransversePosition: IfcLengthMeasure | null, ReinforcementRole: IfcReinforcingBarRoleEnum , SectionDefinition: Handle<IfcSectionProperties> , CrossSectionReinforcementDefinitions: Handle<IfcReinforcementBarProperties>[] )
	{
		this.LongitudinalStartPosition = LongitudinalStartPosition;
		this.LongitudinalEndPosition = LongitudinalEndPosition;
		this.TransversePosition = TransversePosition;
		this.ReinforcementRole = ReinforcementRole;
		this.SectionDefinition = SectionDefinition;
		this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
	}
	LongitudinalStartPosition: IfcLengthMeasure ;
	LongitudinalEndPosition: IfcLengthMeasure ;
	TransversePosition: IfcLengthMeasure | null;
	ReinforcementRole: IfcReinforcingBarRoleEnum ;
	SectionDefinition: Handle<IfcSectionProperties> ;
	CrossSectionReinforcementDefinitions: Handle<IfcReinforcementBarProperties>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSectionedSolid {
	constructor(Directrix: Handle<IfcCurve> , CrossSections: Handle<IfcProfileDef> )
	{
		this.Directrix = Directrix;
		this.CrossSections = CrossSections;
	}
	Directrix: Handle<IfcCurve> ;
	CrossSections: Handle<IfcProfileDef> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSectionedSolidHorizontal {
	constructor(Directrix: Handle<IfcCurve> , CrossSections: Handle<IfcProfileDef> , CrossSectionPositions: Handle<IfcDistanceExpression> , FixedAxisVertical: IfcBoolean )
	{
		this.Directrix = Directrix;
		this.CrossSections = CrossSections;
		this.CrossSectionPositions = CrossSectionPositions;
		this.FixedAxisVertical = FixedAxisVertical;
	}
	Directrix: Handle<IfcCurve> ;
	CrossSections: Handle<IfcProfileDef> ;
	CrossSectionPositions: Handle<IfcDistanceExpression> ;
	FixedAxisVertical: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSectionedSpine {
	constructor(SpineCurve: Handle<IfcCompositeCurve> , CrossSections: Handle<IfcProfileDef> , CrossSectionPositions: Handle<IfcAxis2Placement3D> )
	{
		this.SpineCurve = SpineCurve;
		this.CrossSections = CrossSections;
		this.CrossSectionPositions = CrossSectionPositions;
	}
	SpineCurve: Handle<IfcCompositeCurve> ;
	CrossSections: Handle<IfcProfileDef> ;
	CrossSectionPositions: Handle<IfcAxis2Placement3D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSensor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSensorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSensorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSensorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSensorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSensorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShadingDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcShadingDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcShadingDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShadingDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcShadingDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcShadingDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShapeAspect {
	constructor(ShapeRepresentations: Handle<IfcShapeModel> , Name: IfcLabel | null, Description: IfcText | null, ProductDefinitional: IfcLogical , PartOfProductDefinitionShape: IfcProductRepresentationSelect | null)
	{
		this.ShapeRepresentations = ShapeRepresentations;
		this.Name = Name;
		this.Description = Description;
		this.ProductDefinitional = ProductDefinitional;
		this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
	}
	ShapeRepresentations: Handle<IfcShapeModel> ;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ProductDefinitional: IfcLogical ;
	PartOfProductDefinitionShape: IfcProductRepresentationSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShapeModel {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShapeRepresentation {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcShellBasedSurfaceModel {
	constructor(SbsmBoundary: IfcShell[] )
	{
		this.SbsmBoundary = SbsmBoundary;
	}
	SbsmBoundary: IfcShell[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSimpleProperty {
	constructor(Name: IfcIdentifier , Description: IfcText | null)
	{
		this.Name = Name;
		this.Description = Description;
	}
	Name: IfcIdentifier ;
	Description: IfcText | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSimplePropertyTemplate {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, TemplateType: IfcSimplePropertyTemplateTypeEnum | null, PrimaryMeasureType: IfcLabel | null, SecondaryMeasureType: IfcLabel | null, Enumerators: Handle<IfcPropertyEnumeration> | null, PrimaryUnit: IfcUnit | null, SecondaryUnit: IfcUnit | null, Expression: IfcLabel | null, AccessState: IfcStateEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.TemplateType = TemplateType;
		this.PrimaryMeasureType = PrimaryMeasureType;
		this.SecondaryMeasureType = SecondaryMeasureType;
		this.Enumerators = Enumerators;
		this.PrimaryUnit = PrimaryUnit;
		this.SecondaryUnit = SecondaryUnit;
		this.Expression = Expression;
		this.AccessState = AccessState;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TemplateType: IfcSimplePropertyTemplateTypeEnum | null;
	PrimaryMeasureType: IfcLabel | null;
	SecondaryMeasureType: IfcLabel | null;
	Enumerators: Handle<IfcPropertyEnumeration> | null;
	PrimaryUnit: IfcUnit | null;
	SecondaryUnit: IfcUnit | null;
	Expression: IfcLabel | null;
	AccessState: IfcStateEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSite {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, RefLatitude: IfcCompoundPlaneAngleMeasure | null, RefLongitude: IfcCompoundPlaneAngleMeasure | null, RefElevation: IfcLengthMeasure | null, LandTitleNumber: IfcLabel | null, SiteAddress: Handle<IfcPostalAddress> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.RefLatitude = RefLatitude;
		this.RefLongitude = RefLongitude;
		this.RefElevation = RefElevation;
		this.LandTitleNumber = LandTitleNumber;
		this.SiteAddress = SiteAddress;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	RefLatitude: IfcCompoundPlaneAngleMeasure | null;
	RefLongitude: IfcCompoundPlaneAngleMeasure | null;
	RefElevation: IfcLengthMeasure | null;
	LandTitleNumber: IfcLabel | null;
	SiteAddress: Handle<IfcPostalAddress> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSlab {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSlabElementedCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSlabStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSlabType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSlabTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSlabTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSlippageConnectionCondition {
	constructor(Name: IfcLabel | null, SlippageX: IfcLengthMeasure | null, SlippageY: IfcLengthMeasure | null, SlippageZ: IfcLengthMeasure | null)
	{
		this.Name = Name;
		this.SlippageX = SlippageX;
		this.SlippageY = SlippageY;
		this.SlippageZ = SlippageZ;
	}
	Name: IfcLabel | null;
	SlippageX: IfcLengthMeasure | null;
	SlippageY: IfcLengthMeasure | null;
	SlippageZ: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSolarDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSolarDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSolarDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSolarDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSolarDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSolarDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSolidModel {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpace {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcSpaceTypeEnum | null, ElevationWithFlooring: IfcLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
		this.ElevationWithFlooring = ElevationWithFlooring;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcSpaceTypeEnum | null;
	ElevationWithFlooring: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpaceHeater {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSpaceHeaterTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSpaceHeaterTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpaceHeaterType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpaceHeaterTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpaceHeaterTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpaceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpaceTypeEnum , LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpaceTypeEnum ;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialStructureElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialStructureElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialZone {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, PredefinedType: IfcSpatialZoneTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcSpatialZoneTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSpatialZoneType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpatialZoneTypeEnum , LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpatialZoneTypeEnum ;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSphere {
	constructor(Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Radius = Radius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSphericalSurface {
	constructor(Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.Radius = Radius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStackTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcStackTerminalTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcStackTerminalTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStackTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStackTerminalTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStackTerminalTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStair {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcStairTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcStairTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStairFlight {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, NumberOfRisers: IfcInteger | null, NumberOfTreads: IfcInteger | null, RiserHeight: IfcPositiveLengthMeasure | null, TreadLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcStairFlightTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.NumberOfRisers = NumberOfRisers;
		this.NumberOfTreads = NumberOfTreads;
		this.RiserHeight = RiserHeight;
		this.TreadLength = TreadLength;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	NumberOfRisers: IfcInteger | null;
	NumberOfTreads: IfcInteger | null;
	RiserHeight: IfcPositiveLengthMeasure | null;
	TreadLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcStairFlightTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStairFlightType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStairFlightTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStairFlightTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStairType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStairTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStairTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralActivity {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralAnalysisModel {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcAnalysisModelTypeEnum , OrientationOf2DPlane: Handle<IfcAxis2Placement3D> | null, LoadedBy: Handle<IfcStructuralLoadGroup>[] | null, HasResults: Handle<IfcStructuralResultGroup>[] | null, SharedPlacement: Handle<IfcObjectPlacement> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.OrientationOf2DPlane = OrientationOf2DPlane;
		this.LoadedBy = LoadedBy;
		this.HasResults = HasResults;
		this.SharedPlacement = SharedPlacement;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcAnalysisModelTypeEnum ;
	OrientationOf2DPlane: Handle<IfcAxis2Placement3D> | null;
	LoadedBy: Handle<IfcStructuralLoadGroup>[] | null;
	HasResults: Handle<IfcStructuralResultGroup>[] | null;
	SharedPlacement: Handle<IfcObjectPlacement> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralConnection {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralConnectionCondition {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralCurveAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralCurveConnection {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null, Axis: Handle<IfcDirection> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
		this.Axis = Axis;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	Axis: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralCurveMember {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralCurveMemberTypeEnum , Axis: Handle<IfcDirection> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Axis = Axis;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralCurveMemberTypeEnum ;
	Axis: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralCurveMemberVarying {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralCurveMemberTypeEnum , Axis: Handle<IfcDirection> )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Axis = Axis;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralCurveMemberTypeEnum ;
	Axis: Handle<IfcDirection> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralCurveReaction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralItem {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLinearAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoad {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcLoadGroupTypeEnum , ActionType: IfcActionTypeEnum , ActionSource: IfcActionSourceTypeEnum , Coefficient: IfcRatioMeasure | null, Purpose: IfcLabel | null, SelfWeightCoefficients: IfcRatioMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.ActionType = ActionType;
		this.ActionSource = ActionSource;
		this.Coefficient = Coefficient;
		this.Purpose = Purpose;
		this.SelfWeightCoefficients = SelfWeightCoefficients;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcLoadGroupTypeEnum ;
	ActionType: IfcActionTypeEnum ;
	ActionSource: IfcActionSourceTypeEnum ;
	Coefficient: IfcRatioMeasure | null;
	Purpose: IfcLabel | null;
	SelfWeightCoefficients: IfcRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadConfiguration {
	constructor(Name: IfcLabel | null, Values: Handle<IfcStructuralLoadOrResult> , Locations: IfcLengthMeasure | null)
	{
		this.Name = Name;
		this.Values = Values;
		this.Locations = Locations;
	}
	Name: IfcLabel | null;
	Values: Handle<IfcStructuralLoadOrResult> ;
	Locations: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadGroup {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcLoadGroupTypeEnum , ActionType: IfcActionTypeEnum , ActionSource: IfcActionSourceTypeEnum , Coefficient: IfcRatioMeasure | null, Purpose: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.ActionType = ActionType;
		this.ActionSource = ActionSource;
		this.Coefficient = Coefficient;
		this.Purpose = Purpose;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcLoadGroupTypeEnum ;
	ActionType: IfcActionTypeEnum ;
	ActionSource: IfcActionSourceTypeEnum ;
	Coefficient: IfcRatioMeasure | null;
	Purpose: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadLinearForce {
	constructor(Name: IfcLabel | null, LinearForceX: IfcLinearForceMeasure | null, LinearForceY: IfcLinearForceMeasure | null, LinearForceZ: IfcLinearForceMeasure | null, LinearMomentX: IfcLinearMomentMeasure | null, LinearMomentY: IfcLinearMomentMeasure | null, LinearMomentZ: IfcLinearMomentMeasure | null)
	{
		this.Name = Name;
		this.LinearForceX = LinearForceX;
		this.LinearForceY = LinearForceY;
		this.LinearForceZ = LinearForceZ;
		this.LinearMomentX = LinearMomentX;
		this.LinearMomentY = LinearMomentY;
		this.LinearMomentZ = LinearMomentZ;
	}
	Name: IfcLabel | null;
	LinearForceX: IfcLinearForceMeasure | null;
	LinearForceY: IfcLinearForceMeasure | null;
	LinearForceZ: IfcLinearForceMeasure | null;
	LinearMomentX: IfcLinearMomentMeasure | null;
	LinearMomentY: IfcLinearMomentMeasure | null;
	LinearMomentZ: IfcLinearMomentMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadOrResult {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadPlanarForce {
	constructor(Name: IfcLabel | null, PlanarForceX: IfcPlanarForceMeasure | null, PlanarForceY: IfcPlanarForceMeasure | null, PlanarForceZ: IfcPlanarForceMeasure | null)
	{
		this.Name = Name;
		this.PlanarForceX = PlanarForceX;
		this.PlanarForceY = PlanarForceY;
		this.PlanarForceZ = PlanarForceZ;
	}
	Name: IfcLabel | null;
	PlanarForceX: IfcPlanarForceMeasure | null;
	PlanarForceY: IfcPlanarForceMeasure | null;
	PlanarForceZ: IfcPlanarForceMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadSingleDisplacement {
	constructor(Name: IfcLabel | null, DisplacementX: IfcLengthMeasure | null, DisplacementY: IfcLengthMeasure | null, DisplacementZ: IfcLengthMeasure | null, RotationalDisplacementRX: IfcPlaneAngleMeasure | null, RotationalDisplacementRY: IfcPlaneAngleMeasure | null, RotationalDisplacementRZ: IfcPlaneAngleMeasure | null)
	{
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
	}
	Name: IfcLabel | null;
	DisplacementX: IfcLengthMeasure | null;
	DisplacementY: IfcLengthMeasure | null;
	DisplacementZ: IfcLengthMeasure | null;
	RotationalDisplacementRX: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRY: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRZ: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadSingleDisplacementDistortion {
	constructor(Name: IfcLabel | null, DisplacementX: IfcLengthMeasure | null, DisplacementY: IfcLengthMeasure | null, DisplacementZ: IfcLengthMeasure | null, RotationalDisplacementRX: IfcPlaneAngleMeasure | null, RotationalDisplacementRY: IfcPlaneAngleMeasure | null, RotationalDisplacementRZ: IfcPlaneAngleMeasure | null, Distortion: IfcCurvatureMeasure | null)
	{
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		this.Distortion = Distortion;
	}
	Name: IfcLabel | null;
	DisplacementX: IfcLengthMeasure | null;
	DisplacementY: IfcLengthMeasure | null;
	DisplacementZ: IfcLengthMeasure | null;
	RotationalDisplacementRX: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRY: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRZ: IfcPlaneAngleMeasure | null;
	Distortion: IfcCurvatureMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadSingleForce {
	constructor(Name: IfcLabel | null, ForceX: IfcForceMeasure | null, ForceY: IfcForceMeasure | null, ForceZ: IfcForceMeasure | null, MomentX: IfcTorqueMeasure | null, MomentY: IfcTorqueMeasure | null, MomentZ: IfcTorqueMeasure | null)
	{
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
	}
	Name: IfcLabel | null;
	ForceX: IfcForceMeasure | null;
	ForceY: IfcForceMeasure | null;
	ForceZ: IfcForceMeasure | null;
	MomentX: IfcTorqueMeasure | null;
	MomentY: IfcTorqueMeasure | null;
	MomentZ: IfcTorqueMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadSingleForceWarping {
	constructor(Name: IfcLabel | null, ForceX: IfcForceMeasure | null, ForceY: IfcForceMeasure | null, ForceZ: IfcForceMeasure | null, MomentX: IfcTorqueMeasure | null, MomentY: IfcTorqueMeasure | null, MomentZ: IfcTorqueMeasure | null, WarpingMoment: IfcWarpingMomentMeasure | null)
	{
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
		this.WarpingMoment = WarpingMoment;
	}
	Name: IfcLabel | null;
	ForceX: IfcForceMeasure | null;
	ForceY: IfcForceMeasure | null;
	ForceZ: IfcForceMeasure | null;
	MomentX: IfcTorqueMeasure | null;
	MomentY: IfcTorqueMeasure | null;
	MomentZ: IfcTorqueMeasure | null;
	WarpingMoment: IfcWarpingMomentMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadStatic {
	constructor(Name: IfcLabel | null)
	{
		this.Name = Name;
	}
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralLoadTemperature {
	constructor(Name: IfcLabel | null, DeltaTConstant: IfcThermodynamicTemperatureMeasure | null, DeltaTY: IfcThermodynamicTemperatureMeasure | null, DeltaTZ: IfcThermodynamicTemperatureMeasure | null)
	{
		this.Name = Name;
		this.DeltaTConstant = DeltaTConstant;
		this.DeltaTY = DeltaTY;
		this.DeltaTZ = DeltaTZ;
	}
	Name: IfcLabel | null;
	DeltaTConstant: IfcThermodynamicTemperatureMeasure | null;
	DeltaTY: IfcThermodynamicTemperatureMeasure | null;
	DeltaTZ: IfcThermodynamicTemperatureMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralMember {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralPlanarAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralPointAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralPointConnection {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralPointReaction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralReaction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralResultGroup {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheoryType: IfcAnalysisTheoryTypeEnum , ResultForLoadGroup: Handle<IfcStructuralLoadGroup> | null, IsLinear: IfcBoolean )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheoryType = TheoryType;
		this.ResultForLoadGroup = ResultForLoadGroup;
		this.IsLinear = IsLinear;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheoryType: IfcAnalysisTheoryTypeEnum ;
	ResultForLoadGroup: Handle<IfcStructuralLoadGroup> | null;
	IsLinear: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralSurfaceAction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralSurfaceConnection {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralSurfaceMember {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralSurfaceMemberTypeEnum , Thickness: IfcPositiveLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Thickness = Thickness;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralSurfaceMemberTypeEnum ;
	Thickness: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralSurfaceMemberVarying {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralSurfaceMemberTypeEnum , Thickness: IfcPositiveLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Thickness = Thickness;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralSurfaceMemberTypeEnum ;
	Thickness: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStructuralSurfaceReaction {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStyleModel {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStyledItem {
	constructor(Item: Handle<IfcRepresentationItem> | null, Styles: IfcStyleAssignmentSelect[] , Name: IfcLabel | null)
	{
		this.Item = Item;
		this.Styles = Styles;
		this.Name = Name;
	}
	Item: Handle<IfcRepresentationItem> | null;
	Styles: IfcStyleAssignmentSelect[] ;
	Name: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcStyledRepresentation {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSubContractResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcSubContractResourceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcSubContractResourceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSubContractResourceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue> | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcSubContractResourceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue> | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcSubContractResourceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSubedge {
	constructor(EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , ParentEdge: Handle<IfcEdge> )
	{
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.ParentEdge = ParentEdge;
	}
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	ParentEdge: Handle<IfcEdge> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurface {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceCurve {
	constructor(Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve> , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve> ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceCurveSweptAreaSolid {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Directrix: Handle<IfcCurve> , StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, ReferenceSurface: Handle<IfcSurface> )
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Directrix = Directrix;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.ReferenceSurface = ReferenceSurface;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Directrix: Handle<IfcCurve> ;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	ReferenceSurface: Handle<IfcSurface> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceFeature {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSurfaceFeatureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSurfaceFeatureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceOfLinearExtrusion {
	constructor(SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcLengthMeasure )
	{
		this.SweptCurve = SweptCurve;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
	}
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceOfRevolution {
	constructor(SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, AxisPosition: Handle<IfcAxis1Placement> )
	{
		this.SweptCurve = SweptCurve;
		this.Position = Position;
		this.AxisPosition = AxisPosition;
	}
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	AxisPosition: Handle<IfcAxis1Placement> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceReinforcementArea {
	constructor(Name: IfcLabel | null, SurfaceReinforcement1: IfcLengthMeasure | null, SurfaceReinforcement2: IfcLengthMeasure | null, ShearReinforcement: IfcRatioMeasure | null)
	{
		this.Name = Name;
		this.SurfaceReinforcement1 = SurfaceReinforcement1;
		this.SurfaceReinforcement2 = SurfaceReinforcement2;
		this.ShearReinforcement = ShearReinforcement;
	}
	Name: IfcLabel | null;
	SurfaceReinforcement1: IfcLengthMeasure | null;
	SurfaceReinforcement2: IfcLengthMeasure | null;
	ShearReinforcement: IfcRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyle {
	constructor(Name: IfcLabel | null, Side: IfcSurfaceSide , Styles: IfcSurfaceStyleElementSelect[] )
	{
		this.Name = Name;
		this.Side = Side;
		this.Styles = Styles;
	}
	Name: IfcLabel | null;
	Side: IfcSurfaceSide ;
	Styles: IfcSurfaceStyleElementSelect[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyleLighting {
	constructor(DiffuseTransmissionColour: Handle<IfcColourRgb> , DiffuseReflectionColour: Handle<IfcColourRgb> , TransmissionColour: Handle<IfcColourRgb> , ReflectanceColour: Handle<IfcColourRgb> )
	{
		this.DiffuseTransmissionColour = DiffuseTransmissionColour;
		this.DiffuseReflectionColour = DiffuseReflectionColour;
		this.TransmissionColour = TransmissionColour;
		this.ReflectanceColour = ReflectanceColour;
	}
	DiffuseTransmissionColour: Handle<IfcColourRgb> ;
	DiffuseReflectionColour: Handle<IfcColourRgb> ;
	TransmissionColour: Handle<IfcColourRgb> ;
	ReflectanceColour: Handle<IfcColourRgb> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyleRefraction {
	constructor(RefractionIndex: IfcReal | null, DispersionFactor: IfcReal | null)
	{
		this.RefractionIndex = RefractionIndex;
		this.DispersionFactor = DispersionFactor;
	}
	RefractionIndex: IfcReal | null;
	DispersionFactor: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyleRendering {
	constructor(SurfaceColour: Handle<IfcColourRgb> , Transparency: IfcNormalisedRatioMeasure | null, DiffuseColour: IfcColourOrFactor | null, TransmissionColour: IfcColourOrFactor | null, DiffuseTransmissionColour: IfcColourOrFactor | null, ReflectionColour: IfcColourOrFactor | null, SpecularColour: IfcColourOrFactor | null, SpecularHighlight: IfcSpecularHighlightSelect | null, ReflectanceMethod: IfcReflectanceMethodEnum )
	{
		this.SurfaceColour = SurfaceColour;
		this.Transparency = Transparency;
		this.DiffuseColour = DiffuseColour;
		this.TransmissionColour = TransmissionColour;
		this.DiffuseTransmissionColour = DiffuseTransmissionColour;
		this.ReflectionColour = ReflectionColour;
		this.SpecularColour = SpecularColour;
		this.SpecularHighlight = SpecularHighlight;
		this.ReflectanceMethod = ReflectanceMethod;
	}
	SurfaceColour: Handle<IfcColourRgb> ;
	Transparency: IfcNormalisedRatioMeasure | null;
	DiffuseColour: IfcColourOrFactor | null;
	TransmissionColour: IfcColourOrFactor | null;
	DiffuseTransmissionColour: IfcColourOrFactor | null;
	ReflectionColour: IfcColourOrFactor | null;
	SpecularColour: IfcColourOrFactor | null;
	SpecularHighlight: IfcSpecularHighlightSelect | null;
	ReflectanceMethod: IfcReflectanceMethodEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyleShading {
	constructor(SurfaceColour: Handle<IfcColourRgb> , Transparency: IfcNormalisedRatioMeasure | null)
	{
		this.SurfaceColour = SurfaceColour;
		this.Transparency = Transparency;
	}
	SurfaceColour: Handle<IfcColourRgb> ;
	Transparency: IfcNormalisedRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceStyleWithTextures {
	constructor(Textures: Handle<IfcSurfaceTexture> )
	{
		this.Textures = Textures;
	}
	Textures: Handle<IfcSurfaceTexture> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSurfaceTexture {
	constructor(RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier | null)
	{
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
	}
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSweptAreaSolid {
	constructor(SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null)
	{
		this.SweptArea = SweptArea;
		this.Position = Position;
	}
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSweptDiskSolid {
	constructor(Directrix: Handle<IfcCurve> , Radius: IfcPositiveLengthMeasure , InnerRadius: IfcPositiveLengthMeasure | null, StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null)
	{
		this.Directrix = Directrix;
		this.Radius = Radius;
		this.InnerRadius = InnerRadius;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
	}
	Directrix: Handle<IfcCurve> ;
	Radius: IfcPositiveLengthMeasure ;
	InnerRadius: IfcPositiveLengthMeasure | null;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSweptDiskSolidPolygonal {
	constructor(Directrix: Handle<IfcCurve> , Radius: IfcPositiveLengthMeasure , InnerRadius: IfcPositiveLengthMeasure | null, StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, FilletRadius: IfcPositiveLengthMeasure | null)
	{
		this.Directrix = Directrix;
		this.Radius = Radius;
		this.InnerRadius = InnerRadius;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.FilletRadius = FilletRadius;
	}
	Directrix: Handle<IfcCurve> ;
	Radius: IfcPositiveLengthMeasure ;
	InnerRadius: IfcPositiveLengthMeasure | null;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	FilletRadius: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSweptSurface {
	constructor(SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null)
	{
		this.SweptCurve = SweptCurve;
		this.Position = Position;
	}
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSwitchingDevice {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSwitchingDeviceTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSwitchingDeviceTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSwitchingDeviceType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSwitchingDeviceTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSwitchingDeviceTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSystem {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSystemFurnitureElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSystemFurnitureElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSystemFurnitureElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcSystemFurnitureElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSystemFurnitureElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSystemFurnitureElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, WebEdgeRadius: IfcNonNegativeLengthMeasure | null, WebSlope: IfcPlaneAngleMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.FlangeEdgeRadius = FlangeEdgeRadius;
		this.WebEdgeRadius = WebEdgeRadius;
		this.WebSlope = WebSlope;
		this.FlangeSlope = FlangeSlope;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	WebEdgeRadius: IfcNonNegativeLengthMeasure | null;
	WebSlope: IfcPlaneAngleMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTable {
	constructor(Name: IfcLabel | null, Rows: Handle<IfcTableRow> | null, Columns: Handle<IfcTableColumn> | null)
	{
		this.Name = Name;
		this.Rows = Rows;
		this.Columns = Columns;
	}
	Name: IfcLabel | null;
	Rows: Handle<IfcTableRow> | null;
	Columns: Handle<IfcTableColumn> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTableColumn {
	constructor(Identifier: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, Unit: IfcUnit | null, ReferencePath: Handle<IfcReference> | null)
	{
		this.Identifier = Identifier;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.ReferencePath = ReferencePath;
	}
	Identifier: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Unit: IfcUnit | null;
	ReferencePath: Handle<IfcReference> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTableRow {
	constructor(RowCells: IfcValue | null, IsHeading: IfcBoolean | null)
	{
		this.RowCells = RowCells;
		this.IsHeading = IsHeading;
	}
	RowCells: IfcValue | null;
	IsHeading: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTank {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTankTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTankTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTankType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTankTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTankTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTask {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Status: IfcLabel | null, WorkMethod: IfcLabel | null, IsMilestone: IfcBoolean , Priority: IfcInteger | null, TaskTime: Handle<IfcTaskTime> | null, PredefinedType: IfcTaskTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Status = Status;
		this.WorkMethod = WorkMethod;
		this.IsMilestone = IsMilestone;
		this.Priority = Priority;
		this.TaskTime = TaskTime;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Status: IfcLabel | null;
	WorkMethod: IfcLabel | null;
	IsMilestone: IfcBoolean ;
	Priority: IfcInteger | null;
	TaskTime: Handle<IfcTaskTime> | null;
	PredefinedType: IfcTaskTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTaskTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, DurationType: IfcTaskDurationEnum | null, ScheduleDuration: IfcDuration | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, EarlyStart: IfcDateTime | null, EarlyFinish: IfcDateTime | null, LateStart: IfcDateTime | null, LateFinish: IfcDateTime | null, FreeFloat: IfcDuration | null, TotalFloat: IfcDuration | null, IsCritical: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualDuration: IfcDuration | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingTime: IfcDuration | null, Completion: IfcPositiveRatioMeasure | null)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	DurationType: IfcTaskDurationEnum | null;
	ScheduleDuration: IfcDuration | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	EarlyStart: IfcDateTime | null;
	EarlyFinish: IfcDateTime | null;
	LateStart: IfcDateTime | null;
	LateFinish: IfcDateTime | null;
	FreeFloat: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	IsCritical: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualDuration: IfcDuration | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingTime: IfcDuration | null;
	Completion: IfcPositiveRatioMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTaskTimeRecurring {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, DurationType: IfcTaskDurationEnum | null, ScheduleDuration: IfcDuration | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, EarlyStart: IfcDateTime | null, EarlyFinish: IfcDateTime | null, LateStart: IfcDateTime | null, LateFinish: IfcDateTime | null, FreeFloat: IfcDuration | null, TotalFloat: IfcDuration | null, IsCritical: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualDuration: IfcDuration | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingTime: IfcDuration | null, Completion: IfcPositiveRatioMeasure | null, Recurrence: Handle<IfcRecurrencePattern> )
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		this.Recurrence = Recurrence;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	DurationType: IfcTaskDurationEnum | null;
	ScheduleDuration: IfcDuration | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	EarlyStart: IfcDateTime | null;
	EarlyFinish: IfcDateTime | null;
	LateStart: IfcDateTime | null;
	LateFinish: IfcDateTime | null;
	FreeFloat: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	IsCritical: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualDuration: IfcDuration | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingTime: IfcDuration | null;
	Completion: IfcPositiveRatioMeasure | null;
	Recurrence: Handle<IfcRecurrencePattern> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTaskType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcTaskTypeEnum , WorkMethod: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
		this.WorkMethod = WorkMethod;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcTaskTypeEnum ;
	WorkMethod: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTelecomAddress {
	constructor(Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null, TelephoneNumbers: IfcLabel | null, FacsimileNumbers: IfcLabel | null, PagerNumber: IfcLabel | null, ElectronicMailAddresses: IfcLabel | null, WWWHomePageURL: IfcURIReference | null, MessagingIDs: IfcURIReference | null)
	{
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.TelephoneNumbers = TelephoneNumbers;
		this.FacsimileNumbers = FacsimileNumbers;
		this.PagerNumber = PagerNumber;
		this.ElectronicMailAddresses = ElectronicMailAddresses;
		this.WWWHomePageURL = WWWHomePageURL;
		this.MessagingIDs = MessagingIDs;
	}
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	TelephoneNumbers: IfcLabel | null;
	FacsimileNumbers: IfcLabel | null;
	PagerNumber: IfcLabel | null;
	ElectronicMailAddresses: IfcLabel | null;
	WWWHomePageURL: IfcURIReference | null;
	MessagingIDs: IfcURIReference | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendon {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonTypeEnum | null, NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, TensionForce: IfcForceMeasure | null, PreStress: IfcPressureMeasure | null, FrictionCoefficient: IfcNormalisedRatioMeasure | null, AnchorageSlip: IfcPositiveLengthMeasure | null, MinCurvatureRadius: IfcPositiveLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.TensionForce = TensionForce;
		this.PreStress = PreStress;
		this.FrictionCoefficient = FrictionCoefficient;
		this.AnchorageSlip = AnchorageSlip;
		this.MinCurvatureRadius = MinCurvatureRadius;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonTypeEnum | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	TensionForce: IfcForceMeasure | null;
	PreStress: IfcPressureMeasure | null;
	FrictionCoefficient: IfcNormalisedRatioMeasure | null;
	AnchorageSlip: IfcPositiveLengthMeasure | null;
	MinCurvatureRadius: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendonAnchor {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonAnchorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonAnchorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendonAnchorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonAnchorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonAnchorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendonConduit {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonConduitTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonConduitTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendonConduitType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonConduitTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonConduitTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTendonType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, SheathDiameter: IfcPositiveLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.SheathDiameter = SheathDiameter;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	SheathDiameter: IfcPositiveLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTessellatedFaceSet {
	constructor(Coordinates: Handle<IfcCartesianPointList3D> )
	{
		this.Coordinates = Coordinates;
	}
	Coordinates: Handle<IfcCartesianPointList3D> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTessellatedItem {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextLiteral {
	constructor(Literal: IfcPresentableText , Placement: IfcAxis2Placement , Path: IfcTextPath )
	{
		this.Literal = Literal;
		this.Placement = Placement;
		this.Path = Path;
	}
	Literal: IfcPresentableText ;
	Placement: IfcAxis2Placement ;
	Path: IfcTextPath ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextLiteralWithExtent {
	constructor(Literal: IfcPresentableText , Placement: IfcAxis2Placement , Path: IfcTextPath , Extent: Handle<IfcPlanarExtent> , BoxAlignment: IfcBoxAlignment )
	{
		this.Literal = Literal;
		this.Placement = Placement;
		this.Path = Path;
		this.Extent = Extent;
		this.BoxAlignment = BoxAlignment;
	}
	Literal: IfcPresentableText ;
	Placement: IfcAxis2Placement ;
	Path: IfcTextPath ;
	Extent: Handle<IfcPlanarExtent> ;
	BoxAlignment: IfcBoxAlignment ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextStyle {
	constructor(Name: IfcLabel | null, TextCharacterAppearance: Handle<IfcTextStyleForDefinedFont> | null, TextStyle: Handle<IfcTextStyleTextModel> | null, TextFontStyle: IfcTextFontSelect , ModelOrDraughting: IfcBoolean | null)
	{
		this.Name = Name;
		this.TextCharacterAppearance = TextCharacterAppearance;
		this.TextStyle = TextStyle;
		this.TextFontStyle = TextFontStyle;
		this.ModelOrDraughting = ModelOrDraughting;
	}
	Name: IfcLabel | null;
	TextCharacterAppearance: Handle<IfcTextStyleForDefinedFont> | null;
	TextStyle: Handle<IfcTextStyleTextModel> | null;
	TextFontStyle: IfcTextFontSelect ;
	ModelOrDraughting: IfcBoolean | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextStyleFontModel {
	constructor(Name: IfcLabel , FontFamily: IfcTextFontName , FontStyle: IfcFontStyle | null, FontVariant: IfcFontVariant | null, FontWeight: IfcFontWeight | null, FontSize: IfcSizeSelect )
	{
		this.Name = Name;
		this.FontFamily = FontFamily;
		this.FontStyle = FontStyle;
		this.FontVariant = FontVariant;
		this.FontWeight = FontWeight;
		this.FontSize = FontSize;
	}
	Name: IfcLabel ;
	FontFamily: IfcTextFontName ;
	FontStyle: IfcFontStyle | null;
	FontVariant: IfcFontVariant | null;
	FontWeight: IfcFontWeight | null;
	FontSize: IfcSizeSelect ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextStyleForDefinedFont {
	constructor(Colour: IfcColour , BackgroundColour: IfcColour | null)
	{
		this.Colour = Colour;
		this.BackgroundColour = BackgroundColour;
	}
	Colour: IfcColour ;
	BackgroundColour: IfcColour | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextStyleTextModel {
	constructor(TextIndent: IfcSizeSelect | null, TextAlign: IfcTextAlignment | null, TextDecoration: IfcTextDecoration | null, LetterSpacing: IfcSizeSelect | null, WordSpacing: IfcSizeSelect | null, TextTransform: IfcTextTransformation | null, LineHeight: IfcSizeSelect | null)
	{
		this.TextIndent = TextIndent;
		this.TextAlign = TextAlign;
		this.TextDecoration = TextDecoration;
		this.LetterSpacing = LetterSpacing;
		this.WordSpacing = WordSpacing;
		this.TextTransform = TextTransform;
		this.LineHeight = LineHeight;
	}
	TextIndent: IfcSizeSelect | null;
	TextAlign: IfcTextAlignment | null;
	TextDecoration: IfcTextDecoration | null;
	LetterSpacing: IfcSizeSelect | null;
	WordSpacing: IfcSizeSelect | null;
	TextTransform: IfcTextTransformation | null;
	LineHeight: IfcSizeSelect | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextureCoordinate {
	constructor(Maps: Handle<IfcSurfaceTexture> )
	{
		this.Maps = Maps;
	}
	Maps: Handle<IfcSurfaceTexture> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextureCoordinateGenerator {
	constructor(Maps: Handle<IfcSurfaceTexture> , Mode: IfcLabel , Parameter: IfcReal | null)
	{
		this.Maps = Maps;
		this.Mode = Mode;
		this.Parameter = Parameter;
	}
	Maps: Handle<IfcSurfaceTexture> ;
	Mode: IfcLabel ;
	Parameter: IfcReal | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextureMap {
	constructor(Maps: Handle<IfcSurfaceTexture> , Vertices: Handle<IfcTextureVertex> , MappedTo: Handle<IfcFace> )
	{
		this.Maps = Maps;
		this.Vertices = Vertices;
		this.MappedTo = MappedTo;
	}
	Maps: Handle<IfcSurfaceTexture> ;
	Vertices: Handle<IfcTextureVertex> ;
	MappedTo: Handle<IfcFace> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextureVertex {
	constructor(Coordinates: IfcParameterValue )
	{
		this.Coordinates = Coordinates;
	}
	Coordinates: IfcParameterValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTextureVertexList {
	constructor(TexCoordsList: IfcParameterValue )
	{
		this.TexCoordsList = TexCoordsList;
	}
	TexCoordsList: IfcParameterValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTimePeriod {
	constructor(StartTime: IfcTime , EndTime: IfcTime )
	{
		this.StartTime = StartTime;
		this.EndTime = EndTime;
	}
	StartTime: IfcTime ;
	EndTime: IfcTime ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTimeSeries {
	constructor(Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null)
	{
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
	}
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTimeSeriesValue {
	constructor(ListValues: IfcValue )
	{
		this.ListValues = ListValues;
	}
	ListValues: IfcValue ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTopologicalRepresentationItem {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTopologyRepresentation {
	constructor(ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcToroidalSurface {
	constructor(Position: Handle<IfcAxis2Placement3D> , MajorRadius: IfcPositiveLengthMeasure , MinorRadius: IfcPositiveLengthMeasure )
	{
		this.Position = Position;
		this.MajorRadius = MajorRadius;
		this.MinorRadius = MinorRadius;
	}
	Position: Handle<IfcAxis2Placement3D> ;
	MajorRadius: IfcPositiveLengthMeasure ;
	MinorRadius: IfcPositiveLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTransformer {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTransformerTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTransformerTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTransformerType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTransformerTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTransformerTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTransitionCurveSegment2D {
	constructor(StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure , StartRadius: IfcPositiveLengthMeasure | null, EndRadius: IfcPositiveLengthMeasure | null, IsStartRadiusCCW: IfcBoolean , IsEndRadiusCCW: IfcBoolean , TransitionCurveType: IfcTransitionCurveType )
	{
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
		this.StartRadius = StartRadius;
		this.EndRadius = EndRadius;
		this.IsStartRadiusCCW = IsStartRadiusCCW;
		this.IsEndRadiusCCW = IsEndRadiusCCW;
		this.TransitionCurveType = TransitionCurveType;
	}
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	StartRadius: IfcPositiveLengthMeasure | null;
	EndRadius: IfcPositiveLengthMeasure | null;
	IsStartRadiusCCW: IfcBoolean ;
	IsEndRadiusCCW: IfcBoolean ;
	TransitionCurveType: IfcTransitionCurveType ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTransportElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTransportElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTransportElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTransportElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTransportElementTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTransportElementTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTrapeziumProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, BottomXDim: IfcPositiveLengthMeasure , TopXDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , TopXOffset: IfcLengthMeasure )
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomXDim = BottomXDim;
		this.TopXDim = TopXDim;
		this.YDim = YDim;
		this.TopXOffset = TopXOffset;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	BottomXDim: IfcPositiveLengthMeasure ;
	TopXDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	TopXOffset: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTriangulatedFaceSet {
	constructor(Coordinates: Handle<IfcCartesianPointList3D> , Normals: IfcParameterValue | null, Closed: IfcBoolean | null, CoordIndex: IfcPositiveInteger , PnIndex: IfcPositiveInteger | null)
	{
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.PnIndex = PnIndex;
	}
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Normals: IfcParameterValue | null;
	Closed: IfcBoolean | null;
	CoordIndex: IfcPositiveInteger ;
	PnIndex: IfcPositiveInteger | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTriangulatedIrregularNetwork {
	constructor(Coordinates: Handle<IfcCartesianPointList3D> , Normals: IfcParameterValue | null, Closed: IfcBoolean | null, CoordIndex: IfcPositiveInteger , PnIndex: IfcPositiveInteger | null, Flags: IfcInteger )
	{
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.PnIndex = PnIndex;
		this.Flags = Flags;
	}
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Normals: IfcParameterValue | null;
	Closed: IfcBoolean | null;
	CoordIndex: IfcPositiveInteger ;
	PnIndex: IfcPositiveInteger | null;
	Flags: IfcInteger ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTrimmedCurve {
	constructor(BasisCurve: Handle<IfcCurve> , Trim1: IfcTrimmingSelect[] , Trim2: IfcTrimmingSelect[] , SenseAgreement: IfcBoolean , MasterRepresentation: IfcTrimmingPreference )
	{
		this.BasisCurve = BasisCurve;
		this.Trim1 = Trim1;
		this.Trim2 = Trim2;
		this.SenseAgreement = SenseAgreement;
		this.MasterRepresentation = MasterRepresentation;
	}
	BasisCurve: Handle<IfcCurve> ;
	Trim1: IfcTrimmingSelect[] ;
	Trim2: IfcTrimmingSelect[] ;
	SenseAgreement: IfcBoolean ;
	MasterRepresentation: IfcTrimmingPreference ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTubeBundle {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTubeBundleTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTubeBundleTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTubeBundleType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTubeBundleTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTubeBundleTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTypeObject {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTypeProcess {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTypeProduct {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcTypeResource {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
		this.FlangeSlope = FlangeSlope;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUnitAssignment {
	constructor(Units: IfcUnit[] )
	{
		this.Units = Units;
	}
	Units: IfcUnit[] ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUnitaryControlElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcUnitaryControlElementTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcUnitaryControlElementTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUnitaryControlElementType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcUnitaryControlElementTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcUnitaryControlElementTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUnitaryEquipment {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcUnitaryEquipmentTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcUnitaryEquipmentTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcUnitaryEquipmentType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcUnitaryEquipmentTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcUnitaryEquipmentTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcValve {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcValveTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcValveTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcValveType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcValveTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcValveTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVector {
	constructor(Orientation: Handle<IfcDirection> , Magnitude: IfcLengthMeasure )
	{
		this.Orientation = Orientation;
		this.Magnitude = Magnitude;
	}
	Orientation: Handle<IfcDirection> ;
	Magnitude: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVertex {
	constructor()
	{
	}
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVertexLoop {
	constructor(LoopVertex: Handle<IfcVertex> )
	{
		this.LoopVertex = LoopVertex;
	}
	LoopVertex: Handle<IfcVertex> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVertexPoint {
	constructor(VertexGeometry: Handle<IfcPoint> )
	{
		this.VertexGeometry = VertexGeometry;
	}
	VertexGeometry: Handle<IfcPoint> ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVibrationDamper {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVibrationDamperTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVibrationDamperTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVibrationDamperType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcVibrationDamperTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcVibrationDamperTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVibrationIsolator {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVibrationIsolatorTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVibrationIsolatorTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVibrationIsolatorType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcVibrationIsolatorTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcVibrationIsolatorTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVirtualElement {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVirtualGridIntersection {
	constructor(IntersectingAxes: Handle<IfcGridAxis> , OffsetDistances: IfcLengthMeasure )
	{
		this.IntersectingAxes = IntersectingAxes;
		this.OffsetDistances = OffsetDistances;
	}
	IntersectingAxes: Handle<IfcGridAxis> ;
	OffsetDistances: IfcLengthMeasure ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcVoidingFeature {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVoidingFeatureTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVoidingFeatureTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWall {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWallElementedCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWallStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWallType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWallTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWallTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWasteTerminal {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWasteTerminalTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWasteTerminalTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWasteTerminalType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWasteTerminalTypeEnum )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWasteTerminalTypeEnum ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindow {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcWindowTypeEnum | null, PartitioningType: IfcWindowTypePartitioningEnum | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcWindowTypeEnum | null;
	PartitioningType: IfcWindowTypePartitioningEnum | null;
	UserDefinedPartitioningType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindowLiningProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, LiningDepth: IfcPositiveLengthMeasure | null, LiningThickness: IfcNonNegativeLengthMeasure | null, TransomThickness: IfcNonNegativeLengthMeasure | null, MullionThickness: IfcNonNegativeLengthMeasure | null, FirstTransomOffset: IfcNormalisedRatioMeasure | null, SecondTransomOffset: IfcNormalisedRatioMeasure | null, FirstMullionOffset: IfcNormalisedRatioMeasure | null, SecondMullionOffset: IfcNormalisedRatioMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null, LiningOffset: IfcLengthMeasure | null, LiningToPanelOffsetX: IfcLengthMeasure | null, LiningToPanelOffsetY: IfcLengthMeasure | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.TransomThickness = TransomThickness;
		this.MullionThickness = MullionThickness;
		this.FirstTransomOffset = FirstTransomOffset;
		this.SecondTransomOffset = SecondTransomOffset;
		this.FirstMullionOffset = FirstMullionOffset;
		this.SecondMullionOffset = SecondMullionOffset;
		this.ShapeAspectStyle = ShapeAspectStyle;
		this.LiningOffset = LiningOffset;
		this.LiningToPanelOffsetX = LiningToPanelOffsetX;
		this.LiningToPanelOffsetY = LiningToPanelOffsetY;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	LiningDepth: IfcPositiveLengthMeasure | null;
	LiningThickness: IfcNonNegativeLengthMeasure | null;
	TransomThickness: IfcNonNegativeLengthMeasure | null;
	MullionThickness: IfcNonNegativeLengthMeasure | null;
	FirstTransomOffset: IfcNormalisedRatioMeasure | null;
	SecondTransomOffset: IfcNormalisedRatioMeasure | null;
	FirstMullionOffset: IfcNormalisedRatioMeasure | null;
	SecondMullionOffset: IfcNormalisedRatioMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	LiningOffset: IfcLengthMeasure | null;
	LiningToPanelOffsetX: IfcLengthMeasure | null;
	LiningToPanelOffsetY: IfcLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindowPanelProperties {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, OperationType: IfcWindowPanelOperationEnum , PanelPosition: IfcWindowPanelPositionEnum , FrameDepth: IfcPositiveLengthMeasure | null, FrameThickness: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.OperationType = OperationType;
		this.PanelPosition = PanelPosition;
		this.FrameDepth = FrameDepth;
		this.FrameThickness = FrameThickness;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	OperationType: IfcWindowPanelOperationEnum ;
	PanelPosition: IfcWindowPanelPositionEnum ;
	FrameDepth: IfcPositiveLengthMeasure | null;
	FrameThickness: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindowStandardCase {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcWindowTypeEnum | null, PartitioningType: IfcWindowTypePartitioningEnum | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcWindowTypeEnum | null;
	PartitioningType: IfcWindowTypePartitioningEnum | null;
	UserDefinedPartitioningType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindowStyle {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ConstructionType: IfcWindowStyleConstructionEnum , OperationType: IfcWindowStyleOperationEnum , ParameterTakesPrecedence: IfcBoolean , Sizeable: IfcBoolean )
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ConstructionType = ConstructionType;
		this.OperationType = OperationType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.Sizeable = Sizeable;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ConstructionType: IfcWindowStyleConstructionEnum ;
	OperationType: IfcWindowStyleOperationEnum ;
	ParameterTakesPrecedence: IfcBoolean ;
	Sizeable: IfcBoolean ;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWindowType {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap> | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWindowTypeEnum , PartitioningType: IfcWindowTypePartitioningEnum , ParameterTakesPrecedence: IfcBoolean | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap> | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWindowTypeEnum ;
	PartitioningType: IfcWindowTypePartitioningEnum ;
	ParameterTakesPrecedence: IfcBoolean | null;
	UserDefinedPartitioningType: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWorkCalendar {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, WorkingTimes: Handle<IfcWorkTime>[] | null, ExceptionTimes: Handle<IfcWorkTime>[] | null, PredefinedType: IfcWorkCalendarTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.WorkingTimes = WorkingTimes;
		this.ExceptionTimes = ExceptionTimes;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	WorkingTimes: Handle<IfcWorkTime>[] | null;
	ExceptionTimes: Handle<IfcWorkTime>[] | null;
	PredefinedType: IfcWorkCalendarTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWorkControl {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWorkPlan {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null, PredefinedType: IfcWorkPlanTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	PredefinedType: IfcWorkPlanTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWorkSchedule {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null, PredefinedType: IfcWorkScheduleTypeEnum | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
		this.PredefinedType = PredefinedType;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	PredefinedType: IfcWorkScheduleTypeEnum | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcWorkTime {
	constructor(Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, RecurrencePattern: Handle<IfcRecurrencePattern> | null, Start: IfcDate | null, Finish: IfcDate | null)
	{
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.RecurrencePattern = RecurrencePattern;
		this.Start = Start;
		this.Finish = Finish;
	}
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	RecurrencePattern: Handle<IfcRecurrencePattern> | null;
	Start: IfcDate | null;
	Finish: IfcDate | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcZShapeProfileDef {
	constructor(ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
	}
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};
export class IfcZone {
	constructor(GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null)
	{
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
	}
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	FromTape(tapeData: [])
	{
	}
	ToTape(): []
	{
		return [];
	}
};