// This is a generated file, please see: gen_functional_types.js
import * as ifc2x4 from "./ifc2x4";
export let FromRawLineData = {};
FromRawLineData[ifc2x4.IFCACTIONREQUEST] = (d) => {
	return IfcActionRequest.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCACTOR] = (d) => {
	return IfcActor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCACTORROLE] = (d) => {
	return IfcActorRole.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCACTUATOR] = (d) => {
	return IfcActuator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCACTUATORTYPE] = (d) => {
	return IfcActuatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCADDRESS] = (d) => {
	return IfcAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCADVANCEDBREP] = (d) => {
	return IfcAdvancedBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCADVANCEDBREPWITHVOIDS] = (d) => {
	return IfcAdvancedBrepWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCADVANCEDFACE] = (d) => {
	return IfcAdvancedFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTERMINAL] = (d) => {
	return IfcAirTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTERMINALBOX] = (d) => {
	return IfcAirTerminalBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTERMINALBOXTYPE] = (d) => {
	return IfcAirTerminalBoxType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTERMINALTYPE] = (d) => {
	return IfcAirTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTOAIRHEATRECOVERY] = (d) => {
	return IfcAirToAirHeatRecovery.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAIRTOAIRHEATRECOVERYTYPE] = (d) => {
	return IfcAirToAirHeatRecoveryType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALARM] = (d) => {
	return IfcAlarm.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALARMTYPE] = (d) => {
	return IfcAlarmType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT] = (d) => {
	return IfcAlignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DHORIZONTAL] = (d) => {
	return IfcAlignment2DHorizontal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DHORIZONTALSEGMENT] = (d) => {
	return IfcAlignment2DHorizontalSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DSEGMENT] = (d) => {
	return IfcAlignment2DSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DVERSEGCIRCULARARC] = (d) => {
	return IfcAlignment2DVerSegCircularArc.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DVERSEGLINE] = (d) => {
	return IfcAlignment2DVerSegLine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DVERSEGPARABOLICARC] = (d) => {
	return IfcAlignment2DVerSegParabolicArc.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DVERTICAL] = (d) => {
	return IfcAlignment2DVertical.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENT2DVERTICALSEGMENT] = (d) => {
	return IfcAlignment2DVerticalSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCALIGNMENTCURVE] = (d) => {
	return IfcAlignmentCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCANNOTATION] = (d) => {
	return IfcAnnotation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCANNOTATIONFILLAREA] = (d) => {
	return IfcAnnotationFillArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAPPLICATION] = (d) => {
	return IfcApplication.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAPPLIEDVALUE] = (d) => {
	return IfcAppliedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAPPROVAL] = (d) => {
	return IfcApproval.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAPPROVALRELATIONSHIP] = (d) => {
	return IfcApprovalRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCARBITRARYCLOSEDPROFILEDEF] = (d) => {
	return IfcArbitraryClosedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCARBITRARYOPENPROFILEDEF] = (d) => {
	return IfcArbitraryOpenProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCARBITRARYPROFILEDEFWITHVOIDS] = (d) => {
	return IfcArbitraryProfileDefWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCASSET] = (d) => {
	return IfcAsset.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCASYMMETRICISHAPEPROFILEDEF] = (d) => {
	return IfcAsymmetricIShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAUDIOVISUALAPPLIANCE] = (d) => {
	return IfcAudioVisualAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAUDIOVISUALAPPLIANCETYPE] = (d) => {
	return IfcAudioVisualApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAXIS1PLACEMENT] = (d) => {
	return IfcAxis1Placement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAXIS2PLACEMENT2D] = (d) => {
	return IfcAxis2Placement2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCAXIS2PLACEMENT3D] = (d) => {
	return IfcAxis2Placement3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBSPLINECURVE] = (d) => {
	return IfcBSplineCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBSPLINECURVEWITHKNOTS] = (d) => {
	return IfcBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBSPLINESURFACE] = (d) => {
	return IfcBSplineSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBSPLINESURFACEWITHKNOTS] = (d) => {
	return IfcBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBEAM] = (d) => {
	return IfcBeam.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBEAMSTANDARDCASE] = (d) => {
	return IfcBeamStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBEAMTYPE] = (d) => {
	return IfcBeamType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBEARING] = (d) => {
	return IfcBearing.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBEARINGTYPE] = (d) => {
	return IfcBearingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBLOBTEXTURE] = (d) => {
	return IfcBlobTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBLOCK] = (d) => {
	return IfcBlock.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOILER] = (d) => {
	return IfcBoiler.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOILERTYPE] = (d) => {
	return IfcBoilerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOOLEANCLIPPINGRESULT] = (d) => {
	return IfcBooleanClippingResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOOLEANRESULT] = (d) => {
	return IfcBooleanResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYCONDITION] = (d) => {
	return IfcBoundaryCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYCURVE] = (d) => {
	return IfcBoundaryCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYEDGECONDITION] = (d) => {
	return IfcBoundaryEdgeCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYFACECONDITION] = (d) => {
	return IfcBoundaryFaceCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYNODECONDITION] = (d) => {
	return IfcBoundaryNodeCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDARYNODECONDITIONWARPING] = (d) => {
	return IfcBoundaryNodeConditionWarping.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDEDCURVE] = (d) => {
	return IfcBoundedCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDEDSURFACE] = (d) => {
	return IfcBoundedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOUNDINGBOX] = (d) => {
	return IfcBoundingBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBOXEDHALFSPACE] = (d) => {
	return IfcBoxedHalfSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBRIDGE] = (d) => {
	return IfcBridge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBRIDGEPART] = (d) => {
	return IfcBridgePart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDING] = (d) => {
	return IfcBuilding.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENT] = (d) => {
	return IfcBuildingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENTPART] = (d) => {
	return IfcBuildingElementPart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENTPARTTYPE] = (d) => {
	return IfcBuildingElementPartType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENTPROXY] = (d) => {
	return IfcBuildingElementProxy.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENTPROXYTYPE] = (d) => {
	return IfcBuildingElementProxyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGELEMENTTYPE] = (d) => {
	return IfcBuildingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGSTOREY] = (d) => {
	return IfcBuildingStorey.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBUILDINGSYSTEM] = (d) => {
	return IfcBuildingSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBURNER] = (d) => {
	return IfcBurner.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCBURNERTYPE] = (d) => {
	return IfcBurnerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCSHAPEPROFILEDEF] = (d) => {
	return IfcCShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLECARRIERFITTING] = (d) => {
	return IfcCableCarrierFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLECARRIERFITTINGTYPE] = (d) => {
	return IfcCableCarrierFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLECARRIERSEGMENT] = (d) => {
	return IfcCableCarrierSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLECARRIERSEGMENTTYPE] = (d) => {
	return IfcCableCarrierSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLEFITTING] = (d) => {
	return IfcCableFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLEFITTINGTYPE] = (d) => {
	return IfcCableFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLESEGMENT] = (d) => {
	return IfcCableSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCABLESEGMENTTYPE] = (d) => {
	return IfcCableSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCAISSONFOUNDATION] = (d) => {
	return IfcCaissonFoundation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCAISSONFOUNDATIONTYPE] = (d) => {
	return IfcCaissonFoundationType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANPOINT] = (d) => {
	return IfcCartesianPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANPOINTLIST] = (d) => {
	return IfcCartesianPointList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANPOINTLIST2D] = (d) => {
	return IfcCartesianPointList2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANPOINTLIST3D] = (d) => {
	return IfcCartesianPointList3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANTRANSFORMATIONOPERATOR] = (d) => {
	return IfcCartesianTransformationOperator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d) => {
	return IfcCartesianTransformationOperator2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d) => {
	return IfcCartesianTransformationOperator2DnonUniform.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d) => {
	return IfcCartesianTransformationOperator3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d) => {
	return IfcCartesianTransformationOperator3DnonUniform.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCENTERLINEPROFILEDEF] = (d) => {
	return IfcCenterLineProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCHILLER] = (d) => {
	return IfcChiller.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCHILLERTYPE] = (d) => {
	return IfcChillerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCHIMNEY] = (d) => {
	return IfcChimney.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCHIMNEYTYPE] = (d) => {
	return IfcChimneyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIRCLE] = (d) => {
	return IfcCircle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIRCLEHOLLOWPROFILEDEF] = (d) => {
	return IfcCircleHollowProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIRCLEPROFILEDEF] = (d) => {
	return IfcCircleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIRCULARARCSEGMENT2D] = (d) => {
	return IfcCircularArcSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIVILELEMENT] = (d) => {
	return IfcCivilElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCIVILELEMENTTYPE] = (d) => {
	return IfcCivilElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCLASSIFICATION] = (d) => {
	return IfcClassification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCLASSIFICATIONREFERENCE] = (d) => {
	return IfcClassificationReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCLOSEDSHELL] = (d) => {
	return IfcClosedShell.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOIL] = (d) => {
	return IfcCoil.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOILTYPE] = (d) => {
	return IfcCoilType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLOURRGB] = (d) => {
	return IfcColourRgb.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLOURRGBLIST] = (d) => {
	return IfcColourRgbList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLOURSPECIFICATION] = (d) => {
	return IfcColourSpecification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLUMN] = (d) => {
	return IfcColumn.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLUMNSTANDARDCASE] = (d) => {
	return IfcColumnStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOLUMNTYPE] = (d) => {
	return IfcColumnType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMMUNICATIONSAPPLIANCE] = (d) => {
	return IfcCommunicationsAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMMUNICATIONSAPPLIANCETYPE] = (d) => {
	return IfcCommunicationsApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPLEXPROPERTY] = (d) => {
	return IfcComplexProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPLEXPROPERTYTEMPLATE] = (d) => {
	return IfcComplexPropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPOSITECURVE] = (d) => {
	return IfcCompositeCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPOSITECURVEONSURFACE] = (d) => {
	return IfcCompositeCurveOnSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPOSITECURVESEGMENT] = (d) => {
	return IfcCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPOSITEPROFILEDEF] = (d) => {
	return IfcCompositeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPRESSOR] = (d) => {
	return IfcCompressor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOMPRESSORTYPE] = (d) => {
	return IfcCompressorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONDENSER] = (d) => {
	return IfcCondenser.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONDENSERTYPE] = (d) => {
	return IfcCondenserType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONIC] = (d) => {
	return IfcConic.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTEDFACESET] = (d) => {
	return IfcConnectedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONCURVEGEOMETRY] = (d) => {
	return IfcConnectionCurveGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONGEOMETRY] = (d) => {
	return IfcConnectionGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONPOINTECCENTRICITY] = (d) => {
	return IfcConnectionPointEccentricity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONPOINTGEOMETRY] = (d) => {
	return IfcConnectionPointGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONSURFACEGEOMETRY] = (d) => {
	return IfcConnectionSurfaceGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONNECTIONVOLUMEGEOMETRY] = (d) => {
	return IfcConnectionVolumeGeometry.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRAINT] = (d) => {
	return IfcConstraint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d) => {
	return IfcConstructionEquipmentResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (d) => {
	return IfcConstructionEquipmentResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONMATERIALRESOURCE] = (d) => {
	return IfcConstructionMaterialResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (d) => {
	return IfcConstructionMaterialResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONPRODUCTRESOURCE] = (d) => {
	return IfcConstructionProductResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (d) => {
	return IfcConstructionProductResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONRESOURCE] = (d) => {
	return IfcConstructionResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONSTRUCTIONRESOURCETYPE] = (d) => {
	return IfcConstructionResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONTEXT] = (d) => {
	return IfcContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONTEXTDEPENDENTUNIT] = (d) => {
	return IfcContextDependentUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONTROL] = (d) => {
	return IfcControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONTROLLER] = (d) => {
	return IfcController.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONTROLLERTYPE] = (d) => {
	return IfcControllerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONVERSIONBASEDUNIT] = (d) => {
	return IfcConversionBasedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCONVERSIONBASEDUNITWITHOFFSET] = (d) => {
	return IfcConversionBasedUnitWithOffset.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOOLEDBEAM] = (d) => {
	return IfcCooledBeam.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOOLEDBEAMTYPE] = (d) => {
	return IfcCooledBeamType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOOLINGTOWER] = (d) => {
	return IfcCoolingTower.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOOLINGTOWERTYPE] = (d) => {
	return IfcCoolingTowerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOORDINATEOPERATION] = (d) => {
	return IfcCoordinateOperation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOORDINATEREFERENCESYSTEM] = (d) => {
	return IfcCoordinateReferenceSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOSTITEM] = (d) => {
	return IfcCostItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOSTSCHEDULE] = (d) => {
	return IfcCostSchedule.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOSTVALUE] = (d) => {
	return IfcCostValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOVERING] = (d) => {
	return IfcCovering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCOVERINGTYPE] = (d) => {
	return IfcCoveringType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCREWRESOURCE] = (d) => {
	return IfcCrewResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCREWRESOURCETYPE] = (d) => {
	return IfcCrewResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCSGPRIMITIVE3D] = (d) => {
	return IfcCsgPrimitive3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCSGSOLID] = (d) => {
	return IfcCsgSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURRENCYRELATIONSHIP] = (d) => {
	return IfcCurrencyRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURTAINWALL] = (d) => {
	return IfcCurtainWall.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURTAINWALLTYPE] = (d) => {
	return IfcCurtainWallType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVE] = (d) => {
	return IfcCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVEBOUNDEDPLANE] = (d) => {
	return IfcCurveBoundedPlane.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVEBOUNDEDSURFACE] = (d) => {
	return IfcCurveBoundedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVESEGMENT2D] = (d) => {
	return IfcCurveSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVESTYLE] = (d) => {
	return IfcCurveStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVESTYLEFONT] = (d) => {
	return IfcCurveStyleFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVESTYLEFONTANDSCALING] = (d) => {
	return IfcCurveStyleFontAndScaling.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCURVESTYLEFONTPATTERN] = (d) => {
	return IfcCurveStyleFontPattern.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCCYLINDRICALSURFACE] = (d) => {
	return IfcCylindricalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDAMPER] = (d) => {
	return IfcDamper.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDAMPERTYPE] = (d) => {
	return IfcDamperType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDEEPFOUNDATION] = (d) => {
	return IfcDeepFoundation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDEEPFOUNDATIONTYPE] = (d) => {
	return IfcDeepFoundationType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDERIVEDPROFILEDEF] = (d) => {
	return IfcDerivedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDERIVEDUNIT] = (d) => {
	return IfcDerivedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDERIVEDUNITELEMENT] = (d) => {
	return IfcDerivedUnitElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDIMENSIONALEXPONENTS] = (d) => {
	return IfcDimensionalExponents.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDIRECTION] = (d) => {
	return IfcDirection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISCRETEACCESSORY] = (d) => {
	return IfcDiscreteAccessory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISCRETEACCESSORYTYPE] = (d) => {
	return IfcDiscreteAccessoryType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTANCEEXPRESSION] = (d) => {
	return IfcDistanceExpression.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONCHAMBERELEMENT] = (d) => {
	return IfcDistributionChamberElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d) => {
	return IfcDistributionChamberElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONCIRCUIT] = (d) => {
	return IfcDistributionCircuit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONCONTROLELEMENT] = (d) => {
	return IfcDistributionControlElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d) => {
	return IfcDistributionControlElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONELEMENT] = (d) => {
	return IfcDistributionElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONELEMENTTYPE] = (d) => {
	return IfcDistributionElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONFLOWELEMENT] = (d) => {
	return IfcDistributionFlowElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d) => {
	return IfcDistributionFlowElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONPORT] = (d) => {
	return IfcDistributionPort.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDISTRIBUTIONSYSTEM] = (d) => {
	return IfcDistributionSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOCUMENTINFORMATION] = (d) => {
	return IfcDocumentInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d) => {
	return IfcDocumentInformationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOCUMENTREFERENCE] = (d) => {
	return IfcDocumentReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOOR] = (d) => {
	return IfcDoor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOORLININGPROPERTIES] = (d) => {
	return IfcDoorLiningProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOORPANELPROPERTIES] = (d) => {
	return IfcDoorPanelProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOORSTANDARDCASE] = (d) => {
	return IfcDoorStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOORSTYLE] = (d) => {
	return IfcDoorStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDOORTYPE] = (d) => {
	return IfcDoorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d) => {
	return IfcDraughtingPreDefinedColour.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d) => {
	return IfcDraughtingPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTFITTING] = (d) => {
	return IfcDuctFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTFITTINGTYPE] = (d) => {
	return IfcDuctFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTSEGMENT] = (d) => {
	return IfcDuctSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTSEGMENTTYPE] = (d) => {
	return IfcDuctSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTSILENCER] = (d) => {
	return IfcDuctSilencer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCDUCTSILENCERTYPE] = (d) => {
	return IfcDuctSilencerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEDGE] = (d) => {
	return IfcEdge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEDGECURVE] = (d) => {
	return IfcEdgeCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEDGELOOP] = (d) => {
	return IfcEdgeLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICAPPLIANCE] = (d) => {
	return IfcElectricAppliance.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICAPPLIANCETYPE] = (d) => {
	return IfcElectricApplianceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICDISTRIBUTIONBOARD] = (d) => {
	return IfcElectricDistributionBoard.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICDISTRIBUTIONBOARDTYPE] = (d) => {
	return IfcElectricDistributionBoardType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICFLOWSTORAGEDEVICE] = (d) => {
	return IfcElectricFlowStorageDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d) => {
	return IfcElectricFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICGENERATOR] = (d) => {
	return IfcElectricGenerator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICGENERATORTYPE] = (d) => {
	return IfcElectricGeneratorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICMOTOR] = (d) => {
	return IfcElectricMotor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICMOTORTYPE] = (d) => {
	return IfcElectricMotorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICTIMECONTROL] = (d) => {
	return IfcElectricTimeControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELECTRICTIMECONTROLTYPE] = (d) => {
	return IfcElectricTimeControlType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENT] = (d) => {
	return IfcElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTASSEMBLY] = (d) => {
	return IfcElementAssembly.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTASSEMBLYTYPE] = (d) => {
	return IfcElementAssemblyType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTCOMPONENT] = (d) => {
	return IfcElementComponent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTCOMPONENTTYPE] = (d) => {
	return IfcElementComponentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTQUANTITY] = (d) => {
	return IfcElementQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTTYPE] = (d) => {
	return IfcElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELEMENTARYSURFACE] = (d) => {
	return IfcElementarySurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELLIPSE] = (d) => {
	return IfcEllipse.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCELLIPSEPROFILEDEF] = (d) => {
	return IfcEllipseProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCENERGYCONVERSIONDEVICE] = (d) => {
	return IfcEnergyConversionDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCENERGYCONVERSIONDEVICETYPE] = (d) => {
	return IfcEnergyConversionDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCENGINE] = (d) => {
	return IfcEngine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCENGINETYPE] = (d) => {
	return IfcEngineType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVAPORATIVECOOLER] = (d) => {
	return IfcEvaporativeCooler.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVAPORATIVECOOLERTYPE] = (d) => {
	return IfcEvaporativeCoolerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVAPORATOR] = (d) => {
	return IfcEvaporator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVAPORATORTYPE] = (d) => {
	return IfcEvaporatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVENT] = (d) => {
	return IfcEvent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVENTTIME] = (d) => {
	return IfcEventTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEVENTTYPE] = (d) => {
	return IfcEventType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTENDEDPROPERTIES] = (d) => {
	return IfcExtendedProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALINFORMATION] = (d) => {
	return IfcExternalInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALREFERENCE] = (d) => {
	return IfcExternalReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALREFERENCERELATIONSHIP] = (d) => {
	return IfcExternalReferenceRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALSPATIALELEMENT] = (d) => {
	return IfcExternalSpatialElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (d) => {
	return IfcExternalSpatialStructureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d) => {
	return IfcExternallyDefinedHatchStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d) => {
	return IfcExternallyDefinedSurfaceStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTERNALLYDEFINEDTEXTFONT] = (d) => {
	return IfcExternallyDefinedTextFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTRUDEDAREASOLID] = (d) => {
	return IfcExtrudedAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCEXTRUDEDAREASOLIDTAPERED] = (d) => {
	return IfcExtrudedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACE] = (d) => {
	return IfcFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACEBASEDSURFACEMODEL] = (d) => {
	return IfcFaceBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACEBOUND] = (d) => {
	return IfcFaceBound.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACEOUTERBOUND] = (d) => {
	return IfcFaceOuterBound.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACESURFACE] = (d) => {
	return IfcFaceSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACETEDBREP] = (d) => {
	return IfcFacetedBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACETEDBREPWITHVOIDS] = (d) => {
	return IfcFacetedBrepWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACILITY] = (d) => {
	return IfcFacility.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFACILITYPART] = (d) => {
	return IfcFacilityPart.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFAILURECONNECTIONCONDITION] = (d) => {
	return IfcFailureConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFAN] = (d) => {
	return IfcFan.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFANTYPE] = (d) => {
	return IfcFanType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFASTENER] = (d) => {
	return IfcFastener.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFASTENERTYPE] = (d) => {
	return IfcFastenerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFEATUREELEMENT] = (d) => {
	return IfcFeatureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFEATUREELEMENTADDITION] = (d) => {
	return IfcFeatureElementAddition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFEATUREELEMENTSUBTRACTION] = (d) => {
	return IfcFeatureElementSubtraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFILLAREASTYLE] = (d) => {
	return IfcFillAreaStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFILLAREASTYLEHATCHING] = (d) => {
	return IfcFillAreaStyleHatching.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFILLAREASTYLETILES] = (d) => {
	return IfcFillAreaStyleTiles.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFILTER] = (d) => {
	return IfcFilter.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFILTERTYPE] = (d) => {
	return IfcFilterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFIRESUPPRESSIONTERMINAL] = (d) => {
	return IfcFireSuppressionTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFIRESUPPRESSIONTERMINALTYPE] = (d) => {
	return IfcFireSuppressionTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFIXEDREFERENCESWEPTAREASOLID] = (d) => {
	return IfcFixedReferenceSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWCONTROLLER] = (d) => {
	return IfcFlowController.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWCONTROLLERTYPE] = (d) => {
	return IfcFlowControllerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWFITTING] = (d) => {
	return IfcFlowFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWFITTINGTYPE] = (d) => {
	return IfcFlowFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWINSTRUMENT] = (d) => {
	return IfcFlowInstrument.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWINSTRUMENTTYPE] = (d) => {
	return IfcFlowInstrumentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWMETER] = (d) => {
	return IfcFlowMeter.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWMETERTYPE] = (d) => {
	return IfcFlowMeterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWMOVINGDEVICE] = (d) => {
	return IfcFlowMovingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWMOVINGDEVICETYPE] = (d) => {
	return IfcFlowMovingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWSEGMENT] = (d) => {
	return IfcFlowSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWSEGMENTTYPE] = (d) => {
	return IfcFlowSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWSTORAGEDEVICE] = (d) => {
	return IfcFlowStorageDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWSTORAGEDEVICETYPE] = (d) => {
	return IfcFlowStorageDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWTERMINAL] = (d) => {
	return IfcFlowTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWTERMINALTYPE] = (d) => {
	return IfcFlowTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWTREATMENTDEVICE] = (d) => {
	return IfcFlowTreatmentDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFLOWTREATMENTDEVICETYPE] = (d) => {
	return IfcFlowTreatmentDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFOOTING] = (d) => {
	return IfcFooting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFOOTINGTYPE] = (d) => {
	return IfcFootingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFURNISHINGELEMENT] = (d) => {
	return IfcFurnishingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFURNISHINGELEMENTTYPE] = (d) => {
	return IfcFurnishingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFURNITURE] = (d) => {
	return IfcFurniture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCFURNITURETYPE] = (d) => {
	return IfcFurnitureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOGRAPHICELEMENT] = (d) => {
	return IfcGeographicElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOGRAPHICELEMENTTYPE] = (d) => {
	return IfcGeographicElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOMETRICCURVESET] = (d) => {
	return IfcGeometricCurveSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOMETRICREPRESENTATIONCONTEXT] = (d) => {
	return IfcGeometricRepresentationContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOMETRICREPRESENTATIONITEM] = (d) => {
	return IfcGeometricRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d) => {
	return IfcGeometricRepresentationSubContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGEOMETRICSET] = (d) => {
	return IfcGeometricSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGRID] = (d) => {
	return IfcGrid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGRIDAXIS] = (d) => {
	return IfcGridAxis.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGRIDPLACEMENT] = (d) => {
	return IfcGridPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCGROUP] = (d) => {
	return IfcGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCHALFSPACESOLID] = (d) => {
	return IfcHalfSpaceSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCHEATEXCHANGER] = (d) => {
	return IfcHeatExchanger.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCHEATEXCHANGERTYPE] = (d) => {
	return IfcHeatExchangerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCHUMIDIFIER] = (d) => {
	return IfcHumidifier.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCHUMIDIFIERTYPE] = (d) => {
	return IfcHumidifierType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCISHAPEPROFILEDEF] = (d) => {
	return IfcIShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCIMAGETEXTURE] = (d) => {
	return IfcImageTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDCOLOURMAP] = (d) => {
	return IfcIndexedColourMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDPOLYCURVE] = (d) => {
	return IfcIndexedPolyCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDPOLYGONALFACE] = (d) => {
	return IfcIndexedPolygonalFace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (d) => {
	return IfcIndexedPolygonalFaceWithVoids.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDTEXTUREMAP] = (d) => {
	return IfcIndexedTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINDEXEDTRIANGLETEXTUREMAP] = (d) => {
	return IfcIndexedTriangleTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINTERCEPTOR] = (d) => {
	return IfcInterceptor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINTERCEPTORTYPE] = (d) => {
	return IfcInterceptorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINTERSECTIONCURVE] = (d) => {
	return IfcIntersectionCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCINVENTORY] = (d) => {
	return IfcInventory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCIRREGULARTIMESERIES] = (d) => {
	return IfcIrregularTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCIRREGULARTIMESERIESVALUE] = (d) => {
	return IfcIrregularTimeSeriesValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCJUNCTIONBOX] = (d) => {
	return IfcJunctionBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCJUNCTIONBOXTYPE] = (d) => {
	return IfcJunctionBoxType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLSHAPEPROFILEDEF] = (d) => {
	return IfcLShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLABORRESOURCE] = (d) => {
	return IfcLaborResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLABORRESOURCETYPE] = (d) => {
	return IfcLaborResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLAGTIME] = (d) => {
	return IfcLagTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLAMP] = (d) => {
	return IfcLamp.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLAMPTYPE] = (d) => {
	return IfcLampType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIBRARYINFORMATION] = (d) => {
	return IfcLibraryInformation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIBRARYREFERENCE] = (d) => {
	return IfcLibraryReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTDISTRIBUTIONDATA] = (d) => {
	return IfcLightDistributionData.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTFIXTURE] = (d) => {
	return IfcLightFixture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTFIXTURETYPE] = (d) => {
	return IfcLightFixtureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTINTENSITYDISTRIBUTION] = (d) => {
	return IfcLightIntensityDistribution.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCE] = (d) => {
	return IfcLightSource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCEAMBIENT] = (d) => {
	return IfcLightSourceAmbient.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCEDIRECTIONAL] = (d) => {
	return IfcLightSourceDirectional.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCEGONIOMETRIC] = (d) => {
	return IfcLightSourceGoniometric.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCEPOSITIONAL] = (d) => {
	return IfcLightSourcePositional.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLIGHTSOURCESPOT] = (d) => {
	return IfcLightSourceSpot.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLINE] = (d) => {
	return IfcLine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLINESEGMENT2D] = (d) => {
	return IfcLineSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLINEARPLACEMENT] = (d) => {
	return IfcLinearPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLINEARPOSITIONINGELEMENT] = (d) => {
	return IfcLinearPositioningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLOCALPLACEMENT] = (d) => {
	return IfcLocalPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCLOOP] = (d) => {
	return IfcLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMANIFOLDSOLIDBREP] = (d) => {
	return IfcManifoldSolidBrep.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMAPCONVERSION] = (d) => {
	return IfcMapConversion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMAPPEDITEM] = (d) => {
	return IfcMappedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIAL] = (d) => {
	return IfcMaterial.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d) => {
	return IfcMaterialClassificationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALCONSTITUENT] = (d) => {
	return IfcMaterialConstituent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALCONSTITUENTSET] = (d) => {
	return IfcMaterialConstituentSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALDEFINITION] = (d) => {
	return IfcMaterialDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALDEFINITIONREPRESENTATION] = (d) => {
	return IfcMaterialDefinitionRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALLAYER] = (d) => {
	return IfcMaterialLayer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALLAYERSET] = (d) => {
	return IfcMaterialLayerSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALLAYERSETUSAGE] = (d) => {
	return IfcMaterialLayerSetUsage.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALLAYERWITHOFFSETS] = (d) => {
	return IfcMaterialLayerWithOffsets.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALLIST] = (d) => {
	return IfcMaterialList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROFILE] = (d) => {
	return IfcMaterialProfile.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROFILESET] = (d) => {
	return IfcMaterialProfileSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROFILESETUSAGE] = (d) => {
	return IfcMaterialProfileSetUsage.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROFILESETUSAGETAPERING] = (d) => {
	return IfcMaterialProfileSetUsageTapering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROFILEWITHOFFSETS] = (d) => {
	return IfcMaterialProfileWithOffsets.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALPROPERTIES] = (d) => {
	return IfcMaterialProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALRELATIONSHIP] = (d) => {
	return IfcMaterialRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMATERIALUSAGEDEFINITION] = (d) => {
	return IfcMaterialUsageDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEASUREWITHUNIT] = (d) => {
	return IfcMeasureWithUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMECHANICALFASTENER] = (d) => {
	return IfcMechanicalFastener.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMECHANICALFASTENERTYPE] = (d) => {
	return IfcMechanicalFastenerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEDICALDEVICE] = (d) => {
	return IfcMedicalDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEDICALDEVICETYPE] = (d) => {
	return IfcMedicalDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEMBER] = (d) => {
	return IfcMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEMBERSTANDARDCASE] = (d) => {
	return IfcMemberStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMEMBERTYPE] = (d) => {
	return IfcMemberType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMETRIC] = (d) => {
	return IfcMetric.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMIRROREDPROFILEDEF] = (d) => {
	return IfcMirroredProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMONETARYUNIT] = (d) => {
	return IfcMonetaryUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMOTORCONNECTION] = (d) => {
	return IfcMotorConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCMOTORCONNECTIONTYPE] = (d) => {
	return IfcMotorConnectionType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCNAMEDUNIT] = (d) => {
	return IfcNamedUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOBJECT] = (d) => {
	return IfcObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOBJECTDEFINITION] = (d) => {
	return IfcObjectDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOBJECTPLACEMENT] = (d) => {
	return IfcObjectPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOBJECTIVE] = (d) => {
	return IfcObjective.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOCCUPANT] = (d) => {
	return IfcOccupant.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOFFSETCURVE] = (d) => {
	return IfcOffsetCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOFFSETCURVE2D] = (d) => {
	return IfcOffsetCurve2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOFFSETCURVE3D] = (d) => {
	return IfcOffsetCurve3D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOFFSETCURVEBYDISTANCES] = (d) => {
	return IfcOffsetCurveByDistances.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOPENSHELL] = (d) => {
	return IfcOpenShell.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOPENINGELEMENT] = (d) => {
	return IfcOpeningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOPENINGSTANDARDCASE] = (d) => {
	return IfcOpeningStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCORGANIZATION] = (d) => {
	return IfcOrganization.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCORGANIZATIONRELATIONSHIP] = (d) => {
	return IfcOrganizationRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCORIENTATIONEXPRESSION] = (d) => {
	return IfcOrientationExpression.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCORIENTEDEDGE] = (d) => {
	return IfcOrientedEdge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOUTERBOUNDARYCURVE] = (d) => {
	return IfcOuterBoundaryCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOUTLET] = (d) => {
	return IfcOutlet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOUTLETTYPE] = (d) => {
	return IfcOutletType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCOWNERHISTORY] = (d) => {
	return IfcOwnerHistory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPARAMETERIZEDPROFILEDEF] = (d) => {
	return IfcParameterizedProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPATH] = (d) => {
	return IfcPath.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPCURVE] = (d) => {
	return IfcPcurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPERFORMANCEHISTORY] = (d) => {
	return IfcPerformanceHistory.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPERMEABLECOVERINGPROPERTIES] = (d) => {
	return IfcPermeableCoveringProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPERMIT] = (d) => {
	return IfcPermit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPERSON] = (d) => {
	return IfcPerson.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPERSONANDORGANIZATION] = (d) => {
	return IfcPersonAndOrganization.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPHYSICALCOMPLEXQUANTITY] = (d) => {
	return IfcPhysicalComplexQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPHYSICALQUANTITY] = (d) => {
	return IfcPhysicalQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPHYSICALSIMPLEQUANTITY] = (d) => {
	return IfcPhysicalSimpleQuantity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPILE] = (d) => {
	return IfcPile.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPILETYPE] = (d) => {
	return IfcPileType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPIPEFITTING] = (d) => {
	return IfcPipeFitting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPIPEFITTINGTYPE] = (d) => {
	return IfcPipeFittingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPIPESEGMENT] = (d) => {
	return IfcPipeSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPIPESEGMENTTYPE] = (d) => {
	return IfcPipeSegmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPIXELTEXTURE] = (d) => {
	return IfcPixelTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLACEMENT] = (d) => {
	return IfcPlacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLANARBOX] = (d) => {
	return IfcPlanarBox.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLANAREXTENT] = (d) => {
	return IfcPlanarExtent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLANE] = (d) => {
	return IfcPlane.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLATE] = (d) => {
	return IfcPlate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLATESTANDARDCASE] = (d) => {
	return IfcPlateStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPLATETYPE] = (d) => {
	return IfcPlateType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOINT] = (d) => {
	return IfcPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOINTONCURVE] = (d) => {
	return IfcPointOnCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOINTONSURFACE] = (d) => {
	return IfcPointOnSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOLYLOOP] = (d) => {
	return IfcPolyLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOLYGONALBOUNDEDHALFSPACE] = (d) => {
	return IfcPolygonalBoundedHalfSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOLYGONALFACESET] = (d) => {
	return IfcPolygonalFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOLYLINE] = (d) => {
	return IfcPolyline.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPORT] = (d) => {
	return IfcPort.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOSITIONINGELEMENT] = (d) => {
	return IfcPositioningElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPOSTALADDRESS] = (d) => {
	return IfcPostalAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDCOLOUR] = (d) => {
	return IfcPreDefinedColour.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDCURVEFONT] = (d) => {
	return IfcPreDefinedCurveFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDITEM] = (d) => {
	return IfcPreDefinedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDPROPERTIES] = (d) => {
	return IfcPreDefinedProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDPROPERTYSET] = (d) => {
	return IfcPreDefinedPropertySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPREDEFINEDTEXTFONT] = (d) => {
	return IfcPreDefinedTextFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRESENTATIONITEM] = (d) => {
	return IfcPresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRESENTATIONLAYERASSIGNMENT] = (d) => {
	return IfcPresentationLayerAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRESENTATIONLAYERWITHSTYLE] = (d) => {
	return IfcPresentationLayerWithStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRESENTATIONSTYLE] = (d) => {
	return IfcPresentationStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRESENTATIONSTYLEASSIGNMENT] = (d) => {
	return IfcPresentationStyleAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROCEDURE] = (d) => {
	return IfcProcedure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROCEDURETYPE] = (d) => {
	return IfcProcedureType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROCESS] = (d) => {
	return IfcProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRODUCT] = (d) => {
	return IfcProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRODUCTDEFINITIONSHAPE] = (d) => {
	return IfcProductDefinitionShape.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPRODUCTREPRESENTATION] = (d) => {
	return IfcProductRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROFILEDEF] = (d) => {
	return IfcProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROFILEPROPERTIES] = (d) => {
	return IfcProfileProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROJECT] = (d) => {
	return IfcProject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROJECTLIBRARY] = (d) => {
	return IfcProjectLibrary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROJECTORDER] = (d) => {
	return IfcProjectOrder.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROJECTEDCRS] = (d) => {
	return IfcProjectedCRS.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROJECTIONELEMENT] = (d) => {
	return IfcProjectionElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTY] = (d) => {
	return IfcProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYABSTRACTION] = (d) => {
	return IfcPropertyAbstraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYBOUNDEDVALUE] = (d) => {
	return IfcPropertyBoundedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYDEFINITION] = (d) => {
	return IfcPropertyDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d) => {
	return IfcPropertyDependencyRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYENUMERATEDVALUE] = (d) => {
	return IfcPropertyEnumeratedValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYENUMERATION] = (d) => {
	return IfcPropertyEnumeration.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYLISTVALUE] = (d) => {
	return IfcPropertyListValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYREFERENCEVALUE] = (d) => {
	return IfcPropertyReferenceValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYSET] = (d) => {
	return IfcPropertySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYSETDEFINITION] = (d) => {
	return IfcPropertySetDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYSETTEMPLATE] = (d) => {
	return IfcPropertySetTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYSINGLEVALUE] = (d) => {
	return IfcPropertySingleValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYTABLEVALUE] = (d) => {
	return IfcPropertyTableValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYTEMPLATE] = (d) => {
	return IfcPropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROPERTYTEMPLATEDEFINITION] = (d) => {
	return IfcPropertyTemplateDefinition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROTECTIVEDEVICE] = (d) => {
	return IfcProtectiveDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROTECTIVEDEVICETRIPPINGUNIT] = (d) => {
	return IfcProtectiveDeviceTrippingUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (d) => {
	return IfcProtectiveDeviceTrippingUnitType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROTECTIVEDEVICETYPE] = (d) => {
	return IfcProtectiveDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPROXY] = (d) => {
	return IfcProxy.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPUMP] = (d) => {
	return IfcPump.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCPUMPTYPE] = (d) => {
	return IfcPumpType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYAREA] = (d) => {
	return IfcQuantityArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYCOUNT] = (d) => {
	return IfcQuantityCount.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYLENGTH] = (d) => {
	return IfcQuantityLength.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYSET] = (d) => {
	return IfcQuantitySet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYTIME] = (d) => {
	return IfcQuantityTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYVOLUME] = (d) => {
	return IfcQuantityVolume.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCQUANTITYWEIGHT] = (d) => {
	return IfcQuantityWeight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAILING] = (d) => {
	return IfcRailing.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAILINGTYPE] = (d) => {
	return IfcRailingType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAMP] = (d) => {
	return IfcRamp.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAMPFLIGHT] = (d) => {
	return IfcRampFlight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAMPFLIGHTTYPE] = (d) => {
	return IfcRampFlightType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRAMPTYPE] = (d) => {
	return IfcRampType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRATIONALBSPLINECURVEWITHKNOTS] = (d) => {
	return IfcRationalBSplineCurveWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRATIONALBSPLINESURFACEWITHKNOTS] = (d) => {
	return IfcRationalBSplineSurfaceWithKnots.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRECTANGLEHOLLOWPROFILEDEF] = (d) => {
	return IfcRectangleHollowProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRECTANGLEPROFILEDEF] = (d) => {
	return IfcRectangleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRECTANGULARPYRAMID] = (d) => {
	return IfcRectangularPyramid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRECTANGULARTRIMMEDSURFACE] = (d) => {
	return IfcRectangularTrimmedSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRECURRENCEPATTERN] = (d) => {
	return IfcRecurrencePattern.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREFERENCE] = (d) => {
	return IfcReference.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREFERENT] = (d) => {
	return IfcReferent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREGULARTIMESERIES] = (d) => {
	return IfcRegularTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCEMENTBARPROPERTIES] = (d) => {
	return IfcReinforcementBarProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d) => {
	return IfcReinforcementDefinitionProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGBAR] = (d) => {
	return IfcReinforcingBar.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGBARTYPE] = (d) => {
	return IfcReinforcingBarType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGELEMENT] = (d) => {
	return IfcReinforcingElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGELEMENTTYPE] = (d) => {
	return IfcReinforcingElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGMESH] = (d) => {
	return IfcReinforcingMesh.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREINFORCINGMESHTYPE] = (d) => {
	return IfcReinforcingMeshType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELAGGREGATES] = (d) => {
	return IfcRelAggregates.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNS] = (d) => {
	return IfcRelAssigns.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOACTOR] = (d) => {
	return IfcRelAssignsToActor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOCONTROL] = (d) => {
	return IfcRelAssignsToControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOGROUP] = (d) => {
	return IfcRelAssignsToGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOGROUPBYFACTOR] = (d) => {
	return IfcRelAssignsToGroupByFactor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOPROCESS] = (d) => {
	return IfcRelAssignsToProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTOPRODUCT] = (d) => {
	return IfcRelAssignsToProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSIGNSTORESOURCE] = (d) => {
	return IfcRelAssignsToResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATES] = (d) => {
	return IfcRelAssociates.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESAPPROVAL] = (d) => {
	return IfcRelAssociatesApproval.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESCLASSIFICATION] = (d) => {
	return IfcRelAssociatesClassification.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESCONSTRAINT] = (d) => {
	return IfcRelAssociatesConstraint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESDOCUMENT] = (d) => {
	return IfcRelAssociatesDocument.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESLIBRARY] = (d) => {
	return IfcRelAssociatesLibrary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELASSOCIATESMATERIAL] = (d) => {
	return IfcRelAssociatesMaterial.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTS] = (d) => {
	return IfcRelConnects.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSELEMENTS] = (d) => {
	return IfcRelConnectsElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSPATHELEMENTS] = (d) => {
	return IfcRelConnectsPathElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSPORTTOELEMENT] = (d) => {
	return IfcRelConnectsPortToElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSPORTS] = (d) => {
	return IfcRelConnectsPorts.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSSTRUCTURALACTIVITY] = (d) => {
	return IfcRelConnectsStructuralActivity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSSTRUCTURALMEMBER] = (d) => {
	return IfcRelConnectsStructuralMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSWITHECCENTRICITY] = (d) => {
	return IfcRelConnectsWithEccentricity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d) => {
	return IfcRelConnectsWithRealizingElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d) => {
	return IfcRelContainedInSpatialStructure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCOVERSBLDGELEMENTS] = (d) => {
	return IfcRelCoversBldgElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELCOVERSSPACES] = (d) => {
	return IfcRelCoversSpaces.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDECLARES] = (d) => {
	return IfcRelDeclares.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDECOMPOSES] = (d) => {
	return IfcRelDecomposes.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDEFINES] = (d) => {
	return IfcRelDefines.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDEFINESBYOBJECT] = (d) => {
	return IfcRelDefinesByObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDEFINESBYPROPERTIES] = (d) => {
	return IfcRelDefinesByProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDEFINESBYTEMPLATE] = (d) => {
	return IfcRelDefinesByTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELDEFINESBYTYPE] = (d) => {
	return IfcRelDefinesByType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELFILLSELEMENT] = (d) => {
	return IfcRelFillsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELFLOWCONTROLELEMENTS] = (d) => {
	return IfcRelFlowControlElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELINTERFERESELEMENTS] = (d) => {
	return IfcRelInterferesElements.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELNESTS] = (d) => {
	return IfcRelNests.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELPOSITIONS] = (d) => {
	return IfcRelPositions.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELPROJECTSELEMENT] = (d) => {
	return IfcRelProjectsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d) => {
	return IfcRelReferencedInSpatialStructure.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELSEQUENCE] = (d) => {
	return IfcRelSequence.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELSERVICESBUILDINGS] = (d) => {
	return IfcRelServicesBuildings.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELSPACEBOUNDARY] = (d) => {
	return IfcRelSpaceBoundary.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELSPACEBOUNDARY1STLEVEL] = (d) => {
	return IfcRelSpaceBoundary1stLevel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELSPACEBOUNDARY2NDLEVEL] = (d) => {
	return IfcRelSpaceBoundary2ndLevel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELVOIDSELEMENT] = (d) => {
	return IfcRelVoidsElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRELATIONSHIP] = (d) => {
	return IfcRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (d) => {
	return IfcReparametrisedCompositeCurveSegment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREPRESENTATION] = (d) => {
	return IfcRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREPRESENTATIONCONTEXT] = (d) => {
	return IfcRepresentationContext.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREPRESENTATIONITEM] = (d) => {
	return IfcRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREPRESENTATIONMAP] = (d) => {
	return IfcRepresentationMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRESOURCE] = (d) => {
	return IfcResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRESOURCEAPPROVALRELATIONSHIP] = (d) => {
	return IfcResourceApprovalRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRESOURCECONSTRAINTRELATIONSHIP] = (d) => {
	return IfcResourceConstraintRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRESOURCELEVELRELATIONSHIP] = (d) => {
	return IfcResourceLevelRelationship.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRESOURCETIME] = (d) => {
	return IfcResourceTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREVOLVEDAREASOLID] = (d) => {
	return IfcRevolvedAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCREVOLVEDAREASOLIDTAPERED] = (d) => {
	return IfcRevolvedAreaSolidTapered.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRIGHTCIRCULARCONE] = (d) => {
	return IfcRightCircularCone.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCRIGHTCIRCULARCYLINDER] = (d) => {
	return IfcRightCircularCylinder.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCROOF] = (d) => {
	return IfcRoof.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCROOFTYPE] = (d) => {
	return IfcRoofType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCROOT] = (d) => {
	return IfcRoot.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCROUNDEDRECTANGLEPROFILEDEF] = (d) => {
	return IfcRoundedRectangleProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSIUNIT] = (d) => {
	return IfcSIUnit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSANITARYTERMINAL] = (d) => {
	return IfcSanitaryTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSANITARYTERMINALTYPE] = (d) => {
	return IfcSanitaryTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSCHEDULINGTIME] = (d) => {
	return IfcSchedulingTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSEAMCURVE] = (d) => {
	return IfcSeamCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSECTIONPROPERTIES] = (d) => {
	return IfcSectionProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSECTIONREINFORCEMENTPROPERTIES] = (d) => {
	return IfcSectionReinforcementProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSECTIONEDSOLID] = (d) => {
	return IfcSectionedSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSECTIONEDSOLIDHORIZONTAL] = (d) => {
	return IfcSectionedSolidHorizontal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSECTIONEDSPINE] = (d) => {
	return IfcSectionedSpine.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSENSOR] = (d) => {
	return IfcSensor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSENSORTYPE] = (d) => {
	return IfcSensorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHADINGDEVICE] = (d) => {
	return IfcShadingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHADINGDEVICETYPE] = (d) => {
	return IfcShadingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHAPEASPECT] = (d) => {
	return IfcShapeAspect.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHAPEMODEL] = (d) => {
	return IfcShapeModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHAPEREPRESENTATION] = (d) => {
	return IfcShapeRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSHELLBASEDSURFACEMODEL] = (d) => {
	return IfcShellBasedSurfaceModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSIMPLEPROPERTY] = (d) => {
	return IfcSimpleProperty.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSIMPLEPROPERTYTEMPLATE] = (d) => {
	return IfcSimplePropertyTemplate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSITE] = (d) => {
	return IfcSite.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSLAB] = (d) => {
	return IfcSlab.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSLABELEMENTEDCASE] = (d) => {
	return IfcSlabElementedCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSLABSTANDARDCASE] = (d) => {
	return IfcSlabStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSLABTYPE] = (d) => {
	return IfcSlabType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSLIPPAGECONNECTIONCONDITION] = (d) => {
	return IfcSlippageConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSOLARDEVICE] = (d) => {
	return IfcSolarDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSOLARDEVICETYPE] = (d) => {
	return IfcSolarDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSOLIDMODEL] = (d) => {
	return IfcSolidModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPACE] = (d) => {
	return IfcSpace.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPACEHEATER] = (d) => {
	return IfcSpaceHeater.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPACEHEATERTYPE] = (d) => {
	return IfcSpaceHeaterType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPACETYPE] = (d) => {
	return IfcSpaceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALELEMENT] = (d) => {
	return IfcSpatialElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALELEMENTTYPE] = (d) => {
	return IfcSpatialElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALSTRUCTUREELEMENT] = (d) => {
	return IfcSpatialStructureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALSTRUCTUREELEMENTTYPE] = (d) => {
	return IfcSpatialStructureElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALZONE] = (d) => {
	return IfcSpatialZone.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPATIALZONETYPE] = (d) => {
	return IfcSpatialZoneType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPHERE] = (d) => {
	return IfcSphere.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSPHERICALSURFACE] = (d) => {
	return IfcSphericalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTACKTERMINAL] = (d) => {
	return IfcStackTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTACKTERMINALTYPE] = (d) => {
	return IfcStackTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTAIR] = (d) => {
	return IfcStair.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTAIRFLIGHT] = (d) => {
	return IfcStairFlight.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTAIRFLIGHTTYPE] = (d) => {
	return IfcStairFlightType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTAIRTYPE] = (d) => {
	return IfcStairType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALACTION] = (d) => {
	return IfcStructuralAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALACTIVITY] = (d) => {
	return IfcStructuralActivity.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALANALYSISMODEL] = (d) => {
	return IfcStructuralAnalysisModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCONNECTION] = (d) => {
	return IfcStructuralConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCONNECTIONCONDITION] = (d) => {
	return IfcStructuralConnectionCondition.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCURVEACTION] = (d) => {
	return IfcStructuralCurveAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCURVECONNECTION] = (d) => {
	return IfcStructuralCurveConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCURVEMEMBER] = (d) => {
	return IfcStructuralCurveMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCURVEMEMBERVARYING] = (d) => {
	return IfcStructuralCurveMemberVarying.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALCURVEREACTION] = (d) => {
	return IfcStructuralCurveReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALITEM] = (d) => {
	return IfcStructuralItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLINEARACTION] = (d) => {
	return IfcStructuralLinearAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOAD] = (d) => {
	return IfcStructuralLoad.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADCASE] = (d) => {
	return IfcStructuralLoadCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADCONFIGURATION] = (d) => {
	return IfcStructuralLoadConfiguration.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADGROUP] = (d) => {
	return IfcStructuralLoadGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADLINEARFORCE] = (d) => {
	return IfcStructuralLoadLinearForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADORRESULT] = (d) => {
	return IfcStructuralLoadOrResult.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADPLANARFORCE] = (d) => {
	return IfcStructuralLoadPlanarForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d) => {
	return IfcStructuralLoadSingleDisplacement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d) => {
	return IfcStructuralLoadSingleDisplacementDistortion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADSINGLEFORCE] = (d) => {
	return IfcStructuralLoadSingleForce.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d) => {
	return IfcStructuralLoadSingleForceWarping.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADSTATIC] = (d) => {
	return IfcStructuralLoadStatic.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALLOADTEMPERATURE] = (d) => {
	return IfcStructuralLoadTemperature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALMEMBER] = (d) => {
	return IfcStructuralMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALPLANARACTION] = (d) => {
	return IfcStructuralPlanarAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALPOINTACTION] = (d) => {
	return IfcStructuralPointAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALPOINTCONNECTION] = (d) => {
	return IfcStructuralPointConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALPOINTREACTION] = (d) => {
	return IfcStructuralPointReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALREACTION] = (d) => {
	return IfcStructuralReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALRESULTGROUP] = (d) => {
	return IfcStructuralResultGroup.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALSURFACEACTION] = (d) => {
	return IfcStructuralSurfaceAction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALSURFACECONNECTION] = (d) => {
	return IfcStructuralSurfaceConnection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALSURFACEMEMBER] = (d) => {
	return IfcStructuralSurfaceMember.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALSURFACEMEMBERVARYING] = (d) => {
	return IfcStructuralSurfaceMemberVarying.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTRUCTURALSURFACEREACTION] = (d) => {
	return IfcStructuralSurfaceReaction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTYLEMODEL] = (d) => {
	return IfcStyleModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTYLEDITEM] = (d) => {
	return IfcStyledItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSTYLEDREPRESENTATION] = (d) => {
	return IfcStyledRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSUBCONTRACTRESOURCE] = (d) => {
	return IfcSubContractResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSUBCONTRACTRESOURCETYPE] = (d) => {
	return IfcSubContractResourceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSUBEDGE] = (d) => {
	return IfcSubedge.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACE] = (d) => {
	return IfcSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACECURVE] = (d) => {
	return IfcSurfaceCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACECURVESWEPTAREASOLID] = (d) => {
	return IfcSurfaceCurveSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACEFEATURE] = (d) => {
	return IfcSurfaceFeature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACEOFLINEAREXTRUSION] = (d) => {
	return IfcSurfaceOfLinearExtrusion.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACEOFREVOLUTION] = (d) => {
	return IfcSurfaceOfRevolution.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACEREINFORCEMENTAREA] = (d) => {
	return IfcSurfaceReinforcementArea.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLE] = (d) => {
	return IfcSurfaceStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLELIGHTING] = (d) => {
	return IfcSurfaceStyleLighting.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLEREFRACTION] = (d) => {
	return IfcSurfaceStyleRefraction.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLERENDERING] = (d) => {
	return IfcSurfaceStyleRendering.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLESHADING] = (d) => {
	return IfcSurfaceStyleShading.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACESTYLEWITHTEXTURES] = (d) => {
	return IfcSurfaceStyleWithTextures.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSURFACETEXTURE] = (d) => {
	return IfcSurfaceTexture.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWEPTAREASOLID] = (d) => {
	return IfcSweptAreaSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWEPTDISKSOLID] = (d) => {
	return IfcSweptDiskSolid.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWEPTDISKSOLIDPOLYGONAL] = (d) => {
	return IfcSweptDiskSolidPolygonal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWEPTSURFACE] = (d) => {
	return IfcSweptSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWITCHINGDEVICE] = (d) => {
	return IfcSwitchingDevice.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSWITCHINGDEVICETYPE] = (d) => {
	return IfcSwitchingDeviceType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSYSTEM] = (d) => {
	return IfcSystem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSYSTEMFURNITUREELEMENT] = (d) => {
	return IfcSystemFurnitureElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCSYSTEMFURNITUREELEMENTTYPE] = (d) => {
	return IfcSystemFurnitureElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTSHAPEPROFILEDEF] = (d) => {
	return IfcTShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTABLE] = (d) => {
	return IfcTable.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTABLECOLUMN] = (d) => {
	return IfcTableColumn.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTABLEROW] = (d) => {
	return IfcTableRow.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTANK] = (d) => {
	return IfcTank.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTANKTYPE] = (d) => {
	return IfcTankType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTASK] = (d) => {
	return IfcTask.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTASKTIME] = (d) => {
	return IfcTaskTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTASKTIMERECURRING] = (d) => {
	return IfcTaskTimeRecurring.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTASKTYPE] = (d) => {
	return IfcTaskType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTELECOMADDRESS] = (d) => {
	return IfcTelecomAddress.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDON] = (d) => {
	return IfcTendon.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDONANCHOR] = (d) => {
	return IfcTendonAnchor.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDONANCHORTYPE] = (d) => {
	return IfcTendonAnchorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDONCONDUIT] = (d) => {
	return IfcTendonConduit.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDONCONDUITTYPE] = (d) => {
	return IfcTendonConduitType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTENDONTYPE] = (d) => {
	return IfcTendonType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTESSELLATEDFACESET] = (d) => {
	return IfcTessellatedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTESSELLATEDITEM] = (d) => {
	return IfcTessellatedItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTLITERAL] = (d) => {
	return IfcTextLiteral.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTLITERALWITHEXTENT] = (d) => {
	return IfcTextLiteralWithExtent.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTSTYLE] = (d) => {
	return IfcTextStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTSTYLEFONTMODEL] = (d) => {
	return IfcTextStyleFontModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTSTYLEFORDEFINEDFONT] = (d) => {
	return IfcTextStyleForDefinedFont.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTSTYLETEXTMODEL] = (d) => {
	return IfcTextStyleTextModel.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTURECOORDINATE] = (d) => {
	return IfcTextureCoordinate.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTURECOORDINATEGENERATOR] = (d) => {
	return IfcTextureCoordinateGenerator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTUREMAP] = (d) => {
	return IfcTextureMap.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTUREVERTEX] = (d) => {
	return IfcTextureVertex.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTEXTUREVERTEXLIST] = (d) => {
	return IfcTextureVertexList.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTIMEPERIOD] = (d) => {
	return IfcTimePeriod.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTIMESERIES] = (d) => {
	return IfcTimeSeries.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTIMESERIESVALUE] = (d) => {
	return IfcTimeSeriesValue.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTOPOLOGICALREPRESENTATIONITEM] = (d) => {
	return IfcTopologicalRepresentationItem.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTOPOLOGYREPRESENTATION] = (d) => {
	return IfcTopologyRepresentation.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTOROIDALSURFACE] = (d) => {
	return IfcToroidalSurface.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRANSFORMER] = (d) => {
	return IfcTransformer.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRANSFORMERTYPE] = (d) => {
	return IfcTransformerType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRANSITIONCURVESEGMENT2D] = (d) => {
	return IfcTransitionCurveSegment2D.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRANSPORTELEMENT] = (d) => {
	return IfcTransportElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRANSPORTELEMENTTYPE] = (d) => {
	return IfcTransportElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRAPEZIUMPROFILEDEF] = (d) => {
	return IfcTrapeziumProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRIANGULATEDFACESET] = (d) => {
	return IfcTriangulatedFaceSet.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRIANGULATEDIRREGULARNETWORK] = (d) => {
	return IfcTriangulatedIrregularNetwork.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTRIMMEDCURVE] = (d) => {
	return IfcTrimmedCurve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTUBEBUNDLE] = (d) => {
	return IfcTubeBundle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTUBEBUNDLETYPE] = (d) => {
	return IfcTubeBundleType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTYPEOBJECT] = (d) => {
	return IfcTypeObject.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTYPEPROCESS] = (d) => {
	return IfcTypeProcess.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTYPEPRODUCT] = (d) => {
	return IfcTypeProduct.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCTYPERESOURCE] = (d) => {
	return IfcTypeResource.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUSHAPEPROFILEDEF] = (d) => {
	return IfcUShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUNITASSIGNMENT] = (d) => {
	return IfcUnitAssignment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUNITARYCONTROLELEMENT] = (d) => {
	return IfcUnitaryControlElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUNITARYCONTROLELEMENTTYPE] = (d) => {
	return IfcUnitaryControlElementType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUNITARYEQUIPMENT] = (d) => {
	return IfcUnitaryEquipment.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCUNITARYEQUIPMENTTYPE] = (d) => {
	return IfcUnitaryEquipmentType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVALVE] = (d) => {
	return IfcValve.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVALVETYPE] = (d) => {
	return IfcValveType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVECTOR] = (d) => {
	return IfcVector.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVERTEX] = (d) => {
	return IfcVertex.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVERTEXLOOP] = (d) => {
	return IfcVertexLoop.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVERTEXPOINT] = (d) => {
	return IfcVertexPoint.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIBRATIONDAMPER] = (d) => {
	return IfcVibrationDamper.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIBRATIONDAMPERTYPE] = (d) => {
	return IfcVibrationDamperType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIBRATIONISOLATOR] = (d) => {
	return IfcVibrationIsolator.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIBRATIONISOLATORTYPE] = (d) => {
	return IfcVibrationIsolatorType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIRTUALELEMENT] = (d) => {
	return IfcVirtualElement.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVIRTUALGRIDINTERSECTION] = (d) => {
	return IfcVirtualGridIntersection.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCVOIDINGFEATURE] = (d) => {
	return IfcVoidingFeature.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWALL] = (d) => {
	return IfcWall.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWALLELEMENTEDCASE] = (d) => {
	return IfcWallElementedCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWALLSTANDARDCASE] = (d) => {
	return IfcWallStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWALLTYPE] = (d) => {
	return IfcWallType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWASTETERMINAL] = (d) => {
	return IfcWasteTerminal.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWASTETERMINALTYPE] = (d) => {
	return IfcWasteTerminalType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOW] = (d) => {
	return IfcWindow.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOWLININGPROPERTIES] = (d) => {
	return IfcWindowLiningProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOWPANELPROPERTIES] = (d) => {
	return IfcWindowPanelProperties.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOWSTANDARDCASE] = (d) => {
	return IfcWindowStandardCase.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOWSTYLE] = (d) => {
	return IfcWindowStyle.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWINDOWTYPE] = (d) => {
	return IfcWindowType.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWORKCALENDAR] = (d) => {
	return IfcWorkCalendar.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWORKCONTROL] = (d) => {
	return IfcWorkControl.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWORKPLAN] = (d) => {
	return IfcWorkPlan.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWORKSCHEDULE] = (d) => {
	return IfcWorkSchedule.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCWORKTIME] = (d) => {
	return IfcWorkTime.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCZSHAPEPROFILEDEF] = (d) => {
	return IfcZShapeProfileDef.FromTape(d.ID, d.type, d.arguments);
};
FromRawLineData[ifc2x4.IFCZONE] = (d) => {
	return IfcZone.FromTape(d.ID, d.type, d.arguments);
};
export interface Handle<T> { expressID: number; }
export function Write<T>(obj: T): Handle<T> { return { expressID: 0 }; }
export function Value(type: string, value: any): any { return { t: type, v: value }; }
const UNKNOWN = 0;
const STRING = 1;
const LABEL = 2;
const ENUM = 3;
const REAL = 4;
const REF = 5;
const EMPTY = 6;
const SET_BEGIN = 7;
const SET_END = 8;
const LINE_END = 9;
export class IfcAbsorbedDoseMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcAccelerationMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcAmountOfSubstanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcAngularVelocityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export type IfcArcIndex = Array<IfcPositiveInteger>;
export class IfcAreaDensityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcAreaMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcBinary {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcBoolean {
	value: boolean;
	constructor(v: boolean) { this.value = v;}
};
export class IfcBoxAlignment {
	value: IfcLabel;
	constructor(v: IfcLabel) { this.value = v;}
};
export class IfcCardinalPointReference {
	value: number;
	constructor(v: number) { this.value = v;}
};
export type IfcComplexNumber = Array<number>;
export type IfcCompoundPlaneAngleMeasure = Array<number>;
export class IfcContextDependentMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcCountMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcCurvatureMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcDate {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcDateTime {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcDayInMonthNumber {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcDayInWeekNumber {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcDescriptiveMeasure {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcDimensionCount {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcDoseEquivalentMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcDuration {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcDynamicViscosityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricCapacitanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricChargeMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricConductanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricCurrentMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricResistanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcElectricVoltageMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcEnergyMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcFontStyle {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcFontVariant {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcFontWeight {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcForceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcFrequencyMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcGloballyUniqueId {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcHeatFluxDensityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcHeatingValueMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcIdentifier {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcIlluminanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcInductanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcInteger {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcIntegerCountRateMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcIonConcentrationMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcIsothermalMoistureCapacityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcKinematicViscosityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLabel {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcLanguageId {
	value: IfcIdentifier;
	constructor(v: IfcIdentifier) { this.value = v;}
};
export class IfcLengthMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export type IfcLineIndex = Array<IfcPositiveInteger>;
export class IfcLinearForceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLinearMomentMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLinearStiffnessMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLinearVelocityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLogical {
	value: boolean;
	constructor(v: boolean) { this.value = v;}
};
export class IfcLuminousFluxMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLuminousIntensityDistributionMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcLuminousIntensityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMagneticFluxDensityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMagneticFluxMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMassDensityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMassFlowRateMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMassMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMassPerLengthMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcModulusOfElasticityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcModulusOfLinearSubgradeReactionMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcModulusOfRotationalSubgradeReactionMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcModulusOfSubgradeReactionMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMoistureDiffusivityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMolecularWeightMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMomentOfInertiaMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMonetaryMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcMonthInYearNumber {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcNonNegativeLengthMeasure {
	value: IfcLengthMeasure;
	constructor(v: IfcLengthMeasure) { this.value = v;}
};
export class IfcNormalisedRatioMeasure {
	value: IfcRatioMeasure;
	constructor(v: IfcRatioMeasure) { this.value = v;}
};
export class IfcNumericMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcPHMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcParameterValue {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcPlanarForceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcPlaneAngleMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcPositiveInteger {
	value: IfcInteger;
	constructor(v: IfcInteger) { this.value = v;}
};
export class IfcPositiveLengthMeasure {
	value: IfcLengthMeasure;
	constructor(v: IfcLengthMeasure) { this.value = v;}
};
export class IfcPositivePlaneAngleMeasure {
	value: IfcPlaneAngleMeasure;
	constructor(v: IfcPlaneAngleMeasure) { this.value = v;}
};
export class IfcPositiveRatioMeasure {
	value: IfcRatioMeasure;
	constructor(v: IfcRatioMeasure) { this.value = v;}
};
export class IfcPowerMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcPresentableText {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcPressureMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export type IfcPropertySetDefinitionSet = Array<IfcPropertySetDefinition>;
export class IfcRadioActivityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcRatioMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcReal {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcRotationalFrequencyMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcRotationalMassMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcRotationalStiffnessMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSectionModulusMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSectionalAreaIntegralMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcShearModulusMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSolidAngleMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSoundPowerLevelMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSoundPowerMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSoundPressureLevelMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSoundPressureMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSpecificHeatCapacityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSpecularExponent {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcSpecularRoughness {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcTemperatureGradientMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcTemperatureRateOfChangeMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcText {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcTextAlignment {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcTextDecoration {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcTextFontName {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcTextTransformation {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcThermalAdmittanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcThermalConductivityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcThermalExpansionCoefficientMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcThermalResistanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcThermalTransmittanceMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcThermodynamicTemperatureMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcTime {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcTimeMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcTimeStamp {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcTorqueMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcURIReference {
	value: string;
	constructor(v: string) { this.value = v;}
};
export class IfcVaporPermeabilityMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcVolumeMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcVolumetricFlowRateMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcWarpingConstantMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcWarpingMomentMeasure {
	value: number;
	constructor(v: number) { this.value = v;}
};
export class IfcActionRequestTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static EMAIL = "EMAIL";
	static FAX = "FAX";
	static PHONE = "PHONE";
	static POST = "POST";
	static VERBAL = "VERBAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcActionSourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DEAD_LOAD_G = "DEAD_LOAD_G";
	static COMPLETION_G1 = "COMPLETION_G1";
	static LIVE_LOAD_Q = "LIVE_LOAD_Q";
	static SNOW_S = "SNOW_S";
	static WIND_W = "WIND_W";
	static PRESTRESSING_P = "PRESTRESSING_P";
	static SETTLEMENT_U = "SETTLEMENT_U";
	static TEMPERATURE_T = "TEMPERATURE_T";
	static EARTHQUAKE_E = "EARTHQUAKE_E";
	static FIRE = "FIRE";
	static IMPULSE = "IMPULSE";
	static IMPACT = "IMPACT";
	static TRANSPORT = "TRANSPORT";
	static ERECTION = "ERECTION";
	static PROPPING = "PROPPING";
	static SYSTEM_IMPERFECTION = "SYSTEM_IMPERFECTION";
	static SHRINKAGE = "SHRINKAGE";
	static CREEP = "CREEP";
	static LACK_OF_FIT = "LACK_OF_FIT";
	static BUOYANCY = "BUOYANCY";
	static ICE = "ICE";
	static CURRENT = "CURRENT";
	static WAVE = "WAVE";
	static RAIN = "RAIN";
	static BRAKES = "BRAKES";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcActionTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PERMANENT_G = "PERMANENT_G";
	static VARIABLE_Q = "VARIABLE_Q";
	static EXTRAORDINARY_A = "EXTRAORDINARY_A";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcActuatorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ELECTRICACTUATOR = "ELECTRICACTUATOR";
	static HANDOPERATEDACTUATOR = "HANDOPERATEDACTUATOR";
	static HYDRAULICACTUATOR = "HYDRAULICACTUATOR";
	static PNEUMATICACTUATOR = "PNEUMATICACTUATOR";
	static THERMOSTATICACTUATOR = "THERMOSTATICACTUATOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAddressTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static OFFICE = "OFFICE";
	static SITE = "SITE";
	static HOME = "HOME";
	static DISTRIBUTIONPOINT = "DISTRIBUTIONPOINT";
	static USERDEFINED = "USERDEFINED";
};
export class IfcAirTerminalBoxTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONSTANTFLOW = "CONSTANTFLOW";
	static VARIABLEFLOWPRESSUREDEPENDANT = "VARIABLEFLOWPRESSUREDEPENDANT";
	static VARIABLEFLOWPRESSUREINDEPENDANT = "VARIABLEFLOWPRESSUREINDEPENDANT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAirTerminalTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DIFFUSER = "DIFFUSER";
	static GRILLE = "GRILLE";
	static LOUVRE = "LOUVRE";
	static REGISTER = "REGISTER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAirToAirHeatRecoveryTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FIXEDPLATECOUNTERFLOWEXCHANGER = "FIXEDPLATECOUNTERFLOWEXCHANGER";
	static FIXEDPLATECROSSFLOWEXCHANGER = "FIXEDPLATECROSSFLOWEXCHANGER";
	static FIXEDPLATEPARALLELFLOWEXCHANGER = "FIXEDPLATEPARALLELFLOWEXCHANGER";
	static ROTARYWHEEL = "ROTARYWHEEL";
	static RUNAROUNDCOILLOOP = "RUNAROUNDCOILLOOP";
	static HEATPIPE = "HEATPIPE";
	static TWINTOWERENTHALPYRECOVERYLOOPS = "TWINTOWERENTHALPYRECOVERYLOOPS";
	static THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS";
	static THERMOSIPHONCOILTYPEHEATEXCHANGERS = "THERMOSIPHONCOILTYPEHEATEXCHANGERS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAlarmTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BELL = "BELL";
	static BREAKGLASSBUTTON = "BREAKGLASSBUTTON";
	static LIGHT = "LIGHT";
	static MANUALPULLBOX = "MANUALPULLBOX";
	static SIREN = "SIREN";
	static WHISTLE = "WHISTLE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAlignmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAnalysisModelTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static IN_PLANE_LOADING_2D = "IN_PLANE_LOADING_2D";
	static OUT_PLANE_LOADING_2D = "OUT_PLANE_LOADING_2D";
	static LOADING_3D = "LOADING_3D";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAnalysisTheoryTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FIRST_ORDER_THEORY = "FIRST_ORDER_THEORY";
	static SECOND_ORDER_THEORY = "SECOND_ORDER_THEORY";
	static THIRD_ORDER_THEORY = "THIRD_ORDER_THEORY";
	static FULL_NONLINEAR_THEORY = "FULL_NONLINEAR_THEORY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcArithmeticOperatorEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ADD = "ADD";
	static DIVIDE = "DIVIDE";
	static MULTIPLY = "MULTIPLY";
	static SUBTRACT = "SUBTRACT";
};
export class IfcAssemblyPlaceEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SITE = "SITE";
	static FACTORY = "FACTORY";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcAudioVisualApplianceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AMPLIFIER = "AMPLIFIER";
	static CAMERA = "CAMERA";
	static DISPLAY = "DISPLAY";
	static MICROPHONE = "MICROPHONE";
	static PLAYER = "PLAYER";
	static PROJECTOR = "PROJECTOR";
	static RECEIVER = "RECEIVER";
	static SPEAKER = "SPEAKER";
	static SWITCHER = "SWITCHER";
	static TELEPHONE = "TELEPHONE";
	static TUNER = "TUNER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBSplineCurveForm {
	value: string;
	constructor(v: string) { this.value = v;}
	static POLYLINE_FORM = "POLYLINE_FORM";
	static CIRCULAR_ARC = "CIRCULAR_ARC";
	static ELLIPTIC_ARC = "ELLIPTIC_ARC";
	static PARABOLIC_ARC = "PARABOLIC_ARC";
	static HYPERBOLIC_ARC = "HYPERBOLIC_ARC";
	static UNSPECIFIED = "UNSPECIFIED";
};
export class IfcBSplineSurfaceForm {
	value: string;
	constructor(v: string) { this.value = v;}
	static PLANE_SURF = "PLANE_SURF";
	static CYLINDRICAL_SURF = "CYLINDRICAL_SURF";
	static CONICAL_SURF = "CONICAL_SURF";
	static SPHERICAL_SURF = "SPHERICAL_SURF";
	static TOROIDAL_SURF = "TOROIDAL_SURF";
	static SURF_OF_REVOLUTION = "SURF_OF_REVOLUTION";
	static RULED_SURF = "RULED_SURF";
	static GENERALISED_CONE = "GENERALISED_CONE";
	static QUADRIC_SURF = "QUADRIC_SURF";
	static SURF_OF_LINEAR_EXTRUSION = "SURF_OF_LINEAR_EXTRUSION";
	static UNSPECIFIED = "UNSPECIFIED";
};
export class IfcBeamTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BEAM = "BEAM";
	static JOIST = "JOIST";
	static HOLLOWCORE = "HOLLOWCORE";
	static LINTEL = "LINTEL";
	static SPANDREL = "SPANDREL";
	static T_BEAM = "T_BEAM";
	static GIRDER_SEGMENT = "GIRDER_SEGMENT";
	static DIAPHRAGM = "DIAPHRAGM";
	static PIERCAP = "PIERCAP";
	static HATSTONE = "HATSTONE";
	static CORNICE = "CORNICE";
	static EDGEBEAM = "EDGEBEAM";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBearingTypeDisplacementEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FIXED_MOVEMENT = "FIXED_MOVEMENT";
	static GUIDED_LONGITUDINAL = "GUIDED_LONGITUDINAL";
	static GUIDED_TRANSVERSAL = "GUIDED_TRANSVERSAL";
	static FREE_MOVEMENT = "FREE_MOVEMENT";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBearingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CYLINDRICAL = "CYLINDRICAL";
	static SPHERICAL = "SPHERICAL";
	static ELASTOMERIC = "ELASTOMERIC";
	static POT = "POT";
	static GUIDE = "GUIDE";
	static ROCKER = "ROCKER";
	static ROLLER = "ROLLER";
	static DISK = "DISK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBenchmarkEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static GREATERTHAN = "GREATERTHAN";
	static GREATERTHANOREQUALTO = "GREATERTHANOREQUALTO";
	static LESSTHAN = "LESSTHAN";
	static LESSTHANOREQUALTO = "LESSTHANOREQUALTO";
	static EQUALTO = "EQUALTO";
	static NOTEQUALTO = "NOTEQUALTO";
	static INCLUDES = "INCLUDES";
	static NOTINCLUDES = "NOTINCLUDES";
	static INCLUDEDIN = "INCLUDEDIN";
	static NOTINCLUDEDIN = "NOTINCLUDEDIN";
};
export class IfcBoilerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static WATER = "WATER";
	static STEAM = "STEAM";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBooleanOperator {
	value: string;
	constructor(v: string) { this.value = v;}
	static UNION = "UNION";
	static INTERSECTION = "INTERSECTION";
	static DIFFERENCE = "DIFFERENCE";
};
export class IfcBridgePartTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ABUTMENT = "ABUTMENT";
	static DECK = "DECK";
	static DECK_SEGMENT = "DECK_SEGMENT";
	static FOUNDATION = "FOUNDATION";
	static PIER = "PIER";
	static PIER_SEGMENT = "PIER_SEGMENT";
	static PYLON = "PYLON";
	static SUBSTRUCTURE = "SUBSTRUCTURE";
	static SUPERSTRUCTURE = "SUPERSTRUCTURE";
	static SURFACESTRUCTURE = "SURFACESTRUCTURE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBridgeTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ARCHED = "ARCHED";
	static CABLE_STAYED = "CABLE_STAYED";
	static CANTILEVER = "CANTILEVER";
	static CULVERT = "CULVERT";
	static FRAMEWORK = "FRAMEWORK";
	static GIRDER = "GIRDER";
	static SUSPENSION = "SUSPENSION";
	static TRUSS = "TRUSS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBuildingElementPartTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static INSULATION = "INSULATION";
	static PRECASTPANEL = "PRECASTPANEL";
	static APRON = "APRON";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBuildingElementProxyTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COMPLEX = "COMPLEX";
	static ELEMENT = "ELEMENT";
	static PARTIAL = "PARTIAL";
	static PROVISIONFORVOID = "PROVISIONFORVOID";
	static PROVISIONFORSPACE = "PROVISIONFORSPACE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBuildingSystemTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FENESTRATION = "FENESTRATION";
	static FOUNDATION = "FOUNDATION";
	static LOADBEARING = "LOADBEARING";
	static OUTERSHELL = "OUTERSHELL";
	static SHADING = "SHADING";
	static TRANSPORT = "TRANSPORT";
	static REINFORCING = "REINFORCING";
	static PRESTRESSING = "PRESTRESSING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcBurnerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCableCarrierFittingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BEND = "BEND";
	static CROSS = "CROSS";
	static REDUCER = "REDUCER";
	static TEE = "TEE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCableCarrierSegmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CABLELADDERSEGMENT = "CABLELADDERSEGMENT";
	static CABLETRAYSEGMENT = "CABLETRAYSEGMENT";
	static CABLETRUNKINGSEGMENT = "CABLETRUNKINGSEGMENT";
	static CONDUITSEGMENT = "CONDUITSEGMENT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCableFittingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONNECTOR = "CONNECTOR";
	static ENTRY = "ENTRY";
	static EXIT = "EXIT";
	static JUNCTION = "JUNCTION";
	static TRANSITION = "TRANSITION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCableSegmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BUSBARSEGMENT = "BUSBARSEGMENT";
	static CABLESEGMENT = "CABLESEGMENT";
	static CONDUCTORSEGMENT = "CONDUCTORSEGMENT";
	static CORESEGMENT = "CORESEGMENT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCaissonFoundationTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static WELL = "WELL";
	static CAISSON = "CAISSON";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcChangeActionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static NOCHANGE = "NOCHANGE";
	static MODIFIED = "MODIFIED";
	static ADDED = "ADDED";
	static DELETED = "DELETED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcChillerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRCOOLED = "AIRCOOLED";
	static WATERCOOLED = "WATERCOOLED";
	static HEATRECOVERY = "HEATRECOVERY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcChimneyTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCoilTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DXCOOLINGCOIL = "DXCOOLINGCOIL";
	static ELECTRICHEATINGCOIL = "ELECTRICHEATINGCOIL";
	static GASHEATINGCOIL = "GASHEATINGCOIL";
	static HYDRONICCOIL = "HYDRONICCOIL";
	static STEAMHEATINGCOIL = "STEAMHEATINGCOIL";
	static WATERCOOLINGCOIL = "WATERCOOLINGCOIL";
	static WATERHEATINGCOIL = "WATERHEATINGCOIL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcColumnTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COLUMN = "COLUMN";
	static PILASTER = "PILASTER";
	static PIERSTEM = "PIERSTEM";
	static PIERSTEM_SEGMENT = "PIERSTEM_SEGMENT";
	static STANDCOLUMN = "STANDCOLUMN";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCommunicationsApplianceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ANTENNA = "ANTENNA";
	static COMPUTER = "COMPUTER";
	static FAX = "FAX";
	static GATEWAY = "GATEWAY";
	static MODEM = "MODEM";
	static NETWORKAPPLIANCE = "NETWORKAPPLIANCE";
	static NETWORKBRIDGE = "NETWORKBRIDGE";
	static NETWORKHUB = "NETWORKHUB";
	static PRINTER = "PRINTER";
	static REPEATER = "REPEATER";
	static ROUTER = "ROUTER";
	static SCANNER = "SCANNER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcComplexPropertyTemplateTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static P_COMPLEX = "P_COMPLEX";
	static Q_COMPLEX = "Q_COMPLEX";
};
export class IfcCompressorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DYNAMIC = "DYNAMIC";
	static RECIPROCATING = "RECIPROCATING";
	static ROTARY = "ROTARY";
	static SCROLL = "SCROLL";
	static TROCHOIDAL = "TROCHOIDAL";
	static SINGLESTAGE = "SINGLESTAGE";
	static BOOSTER = "BOOSTER";
	static OPENTYPE = "OPENTYPE";
	static HERMETIC = "HERMETIC";
	static SEMIHERMETIC = "SEMIHERMETIC";
	static WELDEDSHELLHERMETIC = "WELDEDSHELLHERMETIC";
	static ROLLINGPISTON = "ROLLINGPISTON";
	static ROTARYVANE = "ROTARYVANE";
	static SINGLESCREW = "SINGLESCREW";
	static TWINSCREW = "TWINSCREW";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCondenserTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRCOOLED = "AIRCOOLED";
	static EVAPORATIVECOOLED = "EVAPORATIVECOOLED";
	static WATERCOOLED = "WATERCOOLED";
	static WATERCOOLEDBRAZEDPLATE = "WATERCOOLEDBRAZEDPLATE";
	static WATERCOOLEDSHELLCOIL = "WATERCOOLEDSHELLCOIL";
	static WATERCOOLEDSHELLTUBE = "WATERCOOLEDSHELLTUBE";
	static WATERCOOLEDTUBEINTUBE = "WATERCOOLEDTUBEINTUBE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcConnectionTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ATPATH = "ATPATH";
	static ATSTART = "ATSTART";
	static ATEND = "ATEND";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcConstraintEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static HARD = "HARD";
	static SOFT = "SOFT";
	static ADVISORY = "ADVISORY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcConstructionEquipmentResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DEMOLISHING = "DEMOLISHING";
	static EARTHMOVING = "EARTHMOVING";
	static ERECTING = "ERECTING";
	static HEATING = "HEATING";
	static LIGHTING = "LIGHTING";
	static PAVING = "PAVING";
	static PUMPING = "PUMPING";
	static TRANSPORTING = "TRANSPORTING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcConstructionMaterialResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AGGREGATES = "AGGREGATES";
	static CONCRETE = "CONCRETE";
	static DRYWALL = "DRYWALL";
	static FUEL = "FUEL";
	static GYPSUM = "GYPSUM";
	static MASONRY = "MASONRY";
	static METAL = "METAL";
	static PLASTIC = "PLASTIC";
	static WOOD = "WOOD";
	static NOTDEFINED = "NOTDEFINED";
	static USERDEFINED = "USERDEFINED";
};
export class IfcConstructionProductResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ASSEMBLY = "ASSEMBLY";
	static FORMWORK = "FORMWORK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcControllerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FLOATING = "FLOATING";
	static PROGRAMMABLE = "PROGRAMMABLE";
	static PROPORTIONAL = "PROPORTIONAL";
	static MULTIPOSITION = "MULTIPOSITION";
	static TWOPOSITION = "TWOPOSITION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCooledBeamTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ACTIVE = "ACTIVE";
	static PASSIVE = "PASSIVE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCoolingTowerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static NATURALDRAFT = "NATURALDRAFT";
	static MECHANICALINDUCEDDRAFT = "MECHANICALINDUCEDDRAFT";
	static MECHANICALFORCEDDRAFT = "MECHANICALFORCEDDRAFT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCostItemTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCostScheduleTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BUDGET = "BUDGET";
	static COSTPLAN = "COSTPLAN";
	static ESTIMATE = "ESTIMATE";
	static TENDER = "TENDER";
	static PRICEDBILLOFQUANTITIES = "PRICEDBILLOFQUANTITIES";
	static UNPRICEDBILLOFQUANTITIES = "UNPRICEDBILLOFQUANTITIES";
	static SCHEDULEOFRATES = "SCHEDULEOFRATES";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCoveringTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CEILING = "CEILING";
	static FLOORING = "FLOORING";
	static CLADDING = "CLADDING";
	static ROOFING = "ROOFING";
	static MOLDING = "MOLDING";
	static SKIRTINGBOARD = "SKIRTINGBOARD";
	static INSULATION = "INSULATION";
	static MEMBRANE = "MEMBRANE";
	static SLEEVING = "SLEEVING";
	static WRAPPING = "WRAPPING";
	static COPING = "COPING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCrewResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static OFFICE = "OFFICE";
	static SITE = "SITE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCurtainWallTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcCurveInterpolationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static LINEAR = "LINEAR";
	static LOG_LINEAR = "LOG_LINEAR";
	static LOG_LOG = "LOG_LOG";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDamperTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BACKDRAFTDAMPER = "BACKDRAFTDAMPER";
	static BALANCINGDAMPER = "BALANCINGDAMPER";
	static BLASTDAMPER = "BLASTDAMPER";
	static CONTROLDAMPER = "CONTROLDAMPER";
	static FIREDAMPER = "FIREDAMPER";
	static FIRESMOKEDAMPER = "FIRESMOKEDAMPER";
	static FUMEHOODEXHAUST = "FUMEHOODEXHAUST";
	static GRAVITYDAMPER = "GRAVITYDAMPER";
	static GRAVITYRELIEFDAMPER = "GRAVITYRELIEFDAMPER";
	static RELIEFDAMPER = "RELIEFDAMPER";
	static SMOKEDAMPER = "SMOKEDAMPER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDataOriginEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static MEASURED = "MEASURED";
	static PREDICTED = "PREDICTED";
	static SIMULATED = "SIMULATED";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDerivedUnitEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ANGULARVELOCITYUNIT = "ANGULARVELOCITYUNIT";
	static AREADENSITYUNIT = "AREADENSITYUNIT";
	static COMPOUNDPLANEANGLEUNIT = "COMPOUNDPLANEANGLEUNIT";
	static DYNAMICVISCOSITYUNIT = "DYNAMICVISCOSITYUNIT";
	static HEATFLUXDENSITYUNIT = "HEATFLUXDENSITYUNIT";
	static INTEGERCOUNTRATEUNIT = "INTEGERCOUNTRATEUNIT";
	static ISOTHERMALMOISTURECAPACITYUNIT = "ISOTHERMALMOISTURECAPACITYUNIT";
	static KINEMATICVISCOSITYUNIT = "KINEMATICVISCOSITYUNIT";
	static LINEARVELOCITYUNIT = "LINEARVELOCITYUNIT";
	static MASSDENSITYUNIT = "MASSDENSITYUNIT";
	static MASSFLOWRATEUNIT = "MASSFLOWRATEUNIT";
	static MOISTUREDIFFUSIVITYUNIT = "MOISTUREDIFFUSIVITYUNIT";
	static MOLECULARWEIGHTUNIT = "MOLECULARWEIGHTUNIT";
	static SPECIFICHEATCAPACITYUNIT = "SPECIFICHEATCAPACITYUNIT";
	static THERMALADMITTANCEUNIT = "THERMALADMITTANCEUNIT";
	static THERMALCONDUCTANCEUNIT = "THERMALCONDUCTANCEUNIT";
	static THERMALRESISTANCEUNIT = "THERMALRESISTANCEUNIT";
	static THERMALTRANSMITTANCEUNIT = "THERMALTRANSMITTANCEUNIT";
	static VAPORPERMEABILITYUNIT = "VAPORPERMEABILITYUNIT";
	static VOLUMETRICFLOWRATEUNIT = "VOLUMETRICFLOWRATEUNIT";
	static ROTATIONALFREQUENCYUNIT = "ROTATIONALFREQUENCYUNIT";
	static TORQUEUNIT = "TORQUEUNIT";
	static MOMENTOFINERTIAUNIT = "MOMENTOFINERTIAUNIT";
	static LINEARMOMENTUNIT = "LINEARMOMENTUNIT";
	static LINEARFORCEUNIT = "LINEARFORCEUNIT";
	static PLANARFORCEUNIT = "PLANARFORCEUNIT";
	static MODULUSOFELASTICITYUNIT = "MODULUSOFELASTICITYUNIT";
	static SHEARMODULUSUNIT = "SHEARMODULUSUNIT";
	static LINEARSTIFFNESSUNIT = "LINEARSTIFFNESSUNIT";
	static ROTATIONALSTIFFNESSUNIT = "ROTATIONALSTIFFNESSUNIT";
	static MODULUSOFSUBGRADEREACTIONUNIT = "MODULUSOFSUBGRADEREACTIONUNIT";
	static ACCELERATIONUNIT = "ACCELERATIONUNIT";
	static CURVATUREUNIT = "CURVATUREUNIT";
	static HEATINGVALUEUNIT = "HEATINGVALUEUNIT";
	static IONCONCENTRATIONUNIT = "IONCONCENTRATIONUNIT";
	static LUMINOUSINTENSITYDISTRIBUTIONUNIT = "LUMINOUSINTENSITYDISTRIBUTIONUNIT";
	static MASSPERLENGTHUNIT = "MASSPERLENGTHUNIT";
	static MODULUSOFLINEARSUBGRADEREACTIONUNIT = "MODULUSOFLINEARSUBGRADEREACTIONUNIT";
	static MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT";
	static PHUNIT = "PHUNIT";
	static ROTATIONALMASSUNIT = "ROTATIONALMASSUNIT";
	static SECTIONAREAINTEGRALUNIT = "SECTIONAREAINTEGRALUNIT";
	static SECTIONMODULUSUNIT = "SECTIONMODULUSUNIT";
	static SOUNDPOWERLEVELUNIT = "SOUNDPOWERLEVELUNIT";
	static SOUNDPOWERUNIT = "SOUNDPOWERUNIT";
	static SOUNDPRESSURELEVELUNIT = "SOUNDPRESSURELEVELUNIT";
	static SOUNDPRESSUREUNIT = "SOUNDPRESSUREUNIT";
	static TEMPERATUREGRADIENTUNIT = "TEMPERATUREGRADIENTUNIT";
	static TEMPERATURERATEOFCHANGEUNIT = "TEMPERATURERATEOFCHANGEUNIT";
	static THERMALEXPANSIONCOEFFICIENTUNIT = "THERMALEXPANSIONCOEFFICIENTUNIT";
	static WARPINGCONSTANTUNIT = "WARPINGCONSTANTUNIT";
	static WARPINGMOMENTUNIT = "WARPINGMOMENTUNIT";
	static USERDEFINED = "USERDEFINED";
};
export class IfcDirectionSenseEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static POSITIVE = "POSITIVE";
	static NEGATIVE = "NEGATIVE";
};
export class IfcDiscreteAccessoryTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ANCHORPLATE = "ANCHORPLATE";
	static BRACKET = "BRACKET";
	static SHOE = "SHOE";
	static EXPANSION_JOINT_DEVICE = "EXPANSION_JOINT_DEVICE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDistributionChamberElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FORMEDDUCT = "FORMEDDUCT";
	static INSPECTIONCHAMBER = "INSPECTIONCHAMBER";
	static INSPECTIONPIT = "INSPECTIONPIT";
	static MANHOLE = "MANHOLE";
	static METERCHAMBER = "METERCHAMBER";
	static SUMP = "SUMP";
	static TRENCH = "TRENCH";
	static VALVECHAMBER = "VALVECHAMBER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDistributionPortTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CABLE = "CABLE";
	static CABLECARRIER = "CABLECARRIER";
	static DUCT = "DUCT";
	static PIPE = "PIPE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDistributionSystemEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRCONDITIONING = "AIRCONDITIONING";
	static AUDIOVISUAL = "AUDIOVISUAL";
	static CHEMICAL = "CHEMICAL";
	static CHILLEDWATER = "CHILLEDWATER";
	static COMMUNICATION = "COMMUNICATION";
	static COMPRESSEDAIR = "COMPRESSEDAIR";
	static CONDENSERWATER = "CONDENSERWATER";
	static CONTROL = "CONTROL";
	static CONVEYING = "CONVEYING";
	static DATA = "DATA";
	static DISPOSAL = "DISPOSAL";
	static DOMESTICCOLDWATER = "DOMESTICCOLDWATER";
	static DOMESTICHOTWATER = "DOMESTICHOTWATER";
	static DRAINAGE = "DRAINAGE";
	static EARTHING = "EARTHING";
	static ELECTRICAL = "ELECTRICAL";
	static ELECTROACOUSTIC = "ELECTROACOUSTIC";
	static EXHAUST = "EXHAUST";
	static FIREPROTECTION = "FIREPROTECTION";
	static FUEL = "FUEL";
	static GAS = "GAS";
	static HAZARDOUS = "HAZARDOUS";
	static HEATING = "HEATING";
	static LIGHTING = "LIGHTING";
	static LIGHTNINGPROTECTION = "LIGHTNINGPROTECTION";
	static MUNICIPALSOLIDWASTE = "MUNICIPALSOLIDWASTE";
	static OIL = "OIL";
	static OPERATIONAL = "OPERATIONAL";
	static POWERGENERATION = "POWERGENERATION";
	static RAINWATER = "RAINWATER";
	static REFRIGERATION = "REFRIGERATION";
	static SECURITY = "SECURITY";
	static SEWAGE = "SEWAGE";
	static SIGNAL = "SIGNAL";
	static STORMWATER = "STORMWATER";
	static TELEPHONE = "TELEPHONE";
	static TV = "TV";
	static VACUUM = "VACUUM";
	static VENT = "VENT";
	static VENTILATION = "VENTILATION";
	static WASTEWATER = "WASTEWATER";
	static WATERSUPPLY = "WATERSUPPLY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDocumentConfidentialityEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PUBLIC = "PUBLIC";
	static RESTRICTED = "RESTRICTED";
	static CONFIDENTIAL = "CONFIDENTIAL";
	static PERSONAL = "PERSONAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDocumentStatusEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DRAFT = "DRAFT";
	static FINALDRAFT = "FINALDRAFT";
	static FINAL = "FINAL";
	static REVISION = "REVISION";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorPanelOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SWINGING = "SWINGING";
	static DOUBLE_ACTING = "DOUBLE_ACTING";
	static SLIDING = "SLIDING";
	static FOLDING = "FOLDING";
	static REVOLVING = "REVOLVING";
	static ROLLINGUP = "ROLLINGUP";
	static FIXEDPANEL = "FIXEDPANEL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorPanelPositionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static LEFT = "LEFT";
	static MIDDLE = "MIDDLE";
	static RIGHT = "RIGHT";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorStyleConstructionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ALUMINIUM = "ALUMINIUM";
	static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
	static STEEL = "STEEL";
	static WOOD = "WOOD";
	static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
	static ALUMINIUM_PLASTIC = "ALUMINIUM_PLASTIC";
	static PLASTIC = "PLASTIC";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorStyleOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
	static SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
	static DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
	static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
	static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
	static DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
	static DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
	static DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
	static SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
	static SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
	static DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
	static FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
	static FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
	static DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
	static REVOLVING = "REVOLVING";
	static ROLLINGUP = "ROLLINGUP";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DOOR = "DOOR";
	static GATE = "GATE";
	static TRAPDOOR = "TRAPDOOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDoorTypeOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SINGLE_SWING_LEFT = "SINGLE_SWING_LEFT";
	static SINGLE_SWING_RIGHT = "SINGLE_SWING_RIGHT";
	static DOUBLE_DOOR_SINGLE_SWING = "DOUBLE_DOOR_SINGLE_SWING";
	static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT";
	static DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT";
	static DOUBLE_SWING_LEFT = "DOUBLE_SWING_LEFT";
	static DOUBLE_SWING_RIGHT = "DOUBLE_SWING_RIGHT";
	static DOUBLE_DOOR_DOUBLE_SWING = "DOUBLE_DOOR_DOUBLE_SWING";
	static SLIDING_TO_LEFT = "SLIDING_TO_LEFT";
	static SLIDING_TO_RIGHT = "SLIDING_TO_RIGHT";
	static DOUBLE_DOOR_SLIDING = "DOUBLE_DOOR_SLIDING";
	static FOLDING_TO_LEFT = "FOLDING_TO_LEFT";
	static FOLDING_TO_RIGHT = "FOLDING_TO_RIGHT";
	static DOUBLE_DOOR_FOLDING = "DOUBLE_DOOR_FOLDING";
	static REVOLVING = "REVOLVING";
	static ROLLINGUP = "ROLLINGUP";
	static SWING_FIXED_LEFT = "SWING_FIXED_LEFT";
	static SWING_FIXED_RIGHT = "SWING_FIXED_RIGHT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDuctFittingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BEND = "BEND";
	static CONNECTOR = "CONNECTOR";
	static ENTRY = "ENTRY";
	static EXIT = "EXIT";
	static JUNCTION = "JUNCTION";
	static OBSTRUCTION = "OBSTRUCTION";
	static TRANSITION = "TRANSITION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDuctSegmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static RIGIDSEGMENT = "RIGIDSEGMENT";
	static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcDuctSilencerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FLATOVAL = "FLATOVAL";
	static RECTANGULAR = "RECTANGULAR";
	static ROUND = "ROUND";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricApplianceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DISHWASHER = "DISHWASHER";
	static ELECTRICCOOKER = "ELECTRICCOOKER";
	static FREESTANDINGELECTRICHEATER = "FREESTANDINGELECTRICHEATER";
	static FREESTANDINGFAN = "FREESTANDINGFAN";
	static FREESTANDINGWATERHEATER = "FREESTANDINGWATERHEATER";
	static FREESTANDINGWATERCOOLER = "FREESTANDINGWATERCOOLER";
	static FREEZER = "FREEZER";
	static FRIDGE_FREEZER = "FRIDGE_FREEZER";
	static HANDDRYER = "HANDDRYER";
	static KITCHENMACHINE = "KITCHENMACHINE";
	static MICROWAVE = "MICROWAVE";
	static PHOTOCOPIER = "PHOTOCOPIER";
	static REFRIGERATOR = "REFRIGERATOR";
	static TUMBLEDRYER = "TUMBLEDRYER";
	static VENDINGMACHINE = "VENDINGMACHINE";
	static WASHINGMACHINE = "WASHINGMACHINE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricDistributionBoardTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONSUMERUNIT = "CONSUMERUNIT";
	static DISTRIBUTIONBOARD = "DISTRIBUTIONBOARD";
	static MOTORCONTROLCENTRE = "MOTORCONTROLCENTRE";
	static SWITCHBOARD = "SWITCHBOARD";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricFlowStorageDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BATTERY = "BATTERY";
	static CAPACITORBANK = "CAPACITORBANK";
	static HARMONICFILTER = "HARMONICFILTER";
	static INDUCTORBANK = "INDUCTORBANK";
	static UPS = "UPS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricGeneratorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CHP = "CHP";
	static ENGINEGENERATOR = "ENGINEGENERATOR";
	static STANDALONE = "STANDALONE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricMotorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DC = "DC";
	static INDUCTION = "INDUCTION";
	static POLYPHASE = "POLYPHASE";
	static RELUCTANCESYNCHRONOUS = "RELUCTANCESYNCHRONOUS";
	static SYNCHRONOUS = "SYNCHRONOUS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElectricTimeControlTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static TIMECLOCK = "TIMECLOCK";
	static TIMEDELAY = "TIMEDELAY";
	static RELAY = "RELAY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElementAssemblyTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ACCESSORY_ASSEMBLY = "ACCESSORY_ASSEMBLY";
	static ARCH = "ARCH";
	static BEAM_GRID = "BEAM_GRID";
	static BRACED_FRAME = "BRACED_FRAME";
	static GIRDER = "GIRDER";
	static REINFORCEMENT_UNIT = "REINFORCEMENT_UNIT";
	static RIGID_FRAME = "RIGID_FRAME";
	static SLAB_FIELD = "SLAB_FIELD";
	static TRUSS = "TRUSS";
	static ABUTMENT = "ABUTMENT";
	static PIER = "PIER";
	static PYLON = "PYLON";
	static CROSS_BRACING = "CROSS_BRACING";
	static DECK = "DECK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcElementCompositionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COMPLEX = "COMPLEX";
	static ELEMENT = "ELEMENT";
	static PARTIAL = "PARTIAL";
};
export class IfcEngineTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static EXTERNALCOMBUSTION = "EXTERNALCOMBUSTION";
	static INTERNALCOMBUSTION = "INTERNALCOMBUSTION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcEvaporativeCoolerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = "DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";
	static DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";
	static DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";
	static DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";
	static DIRECTEVAPORATIVEAIRWASHER = "DIRECTEVAPORATIVEAIRWASHER";
	static INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";
	static INDIRECTEVAPORATIVEWETCOIL = "INDIRECTEVAPORATIVEWETCOIL";
	static INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";
	static INDIRECTDIRECTCOMBINATION = "INDIRECTDIRECTCOMBINATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcEvaporatorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DIRECTEXPANSION = "DIRECTEXPANSION";
	static DIRECTEXPANSIONSHELLANDTUBE = "DIRECTEXPANSIONSHELLANDTUBE";
	static DIRECTEXPANSIONTUBEINTUBE = "DIRECTEXPANSIONTUBEINTUBE";
	static DIRECTEXPANSIONBRAZEDPLATE = "DIRECTEXPANSIONBRAZEDPLATE";
	static FLOODEDSHELLANDTUBE = "FLOODEDSHELLANDTUBE";
	static SHELLANDCOIL = "SHELLANDCOIL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcEventTriggerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static EVENTRULE = "EVENTRULE";
	static EVENTMESSAGE = "EVENTMESSAGE";
	static EVENTTIME = "EVENTTIME";
	static EVENTCOMPLEX = "EVENTCOMPLEX";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcEventTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STARTEVENT = "STARTEVENT";
	static ENDEVENT = "ENDEVENT";
	static INTERMEDIATEEVENT = "INTERMEDIATEEVENT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcExternalSpatialElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static EXTERNAL = "EXTERNAL";
	static EXTERNAL_EARTH = "EXTERNAL_EARTH";
	static EXTERNAL_WATER = "EXTERNAL_WATER";
	static EXTERNAL_FIRE = "EXTERNAL_FIRE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFanTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CENTRIFUGALFORWARDCURVED = "CENTRIFUGALFORWARDCURVED";
	static CENTRIFUGALRADIAL = "CENTRIFUGALRADIAL";
	static CENTRIFUGALBACKWARDINCLINEDCURVED = "CENTRIFUGALBACKWARDINCLINEDCURVED";
	static CENTRIFUGALAIRFOIL = "CENTRIFUGALAIRFOIL";
	static TUBEAXIAL = "TUBEAXIAL";
	static VANEAXIAL = "VANEAXIAL";
	static PROPELLORAXIAL = "PROPELLORAXIAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFastenerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static GLUE = "GLUE";
	static MORTAR = "MORTAR";
	static WELD = "WELD";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFilterTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRPARTICLEFILTER = "AIRPARTICLEFILTER";
	static COMPRESSEDAIRFILTER = "COMPRESSEDAIRFILTER";
	static ODORFILTER = "ODORFILTER";
	static OILFILTER = "OILFILTER";
	static STRAINER = "STRAINER";
	static WATERFILTER = "WATERFILTER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFireSuppressionTerminalTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BREECHINGINLET = "BREECHINGINLET";
	static FIREHYDRANT = "FIREHYDRANT";
	static HOSEREEL = "HOSEREEL";
	static SPRINKLER = "SPRINKLER";
	static SPRINKLERDEFLECTOR = "SPRINKLERDEFLECTOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFlowDirectionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SOURCE = "SOURCE";
	static SINK = "SINK";
	static SOURCEANDSINK = "SOURCEANDSINK";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFlowInstrumentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PRESSUREGAUGE = "PRESSUREGAUGE";
	static THERMOMETER = "THERMOMETER";
	static AMMETER = "AMMETER";
	static FREQUENCYMETER = "FREQUENCYMETER";
	static POWERFACTORMETER = "POWERFACTORMETER";
	static PHASEANGLEMETER = "PHASEANGLEMETER";
	static VOLTMETER_PEAK = "VOLTMETER_PEAK";
	static VOLTMETER_RMS = "VOLTMETER_RMS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFlowMeterTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ENERGYMETER = "ENERGYMETER";
	static GASMETER = "GASMETER";
	static OILMETER = "OILMETER";
	static WATERMETER = "WATERMETER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFootingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CAISSON_FOUNDATION = "CAISSON_FOUNDATION";
	static FOOTING_BEAM = "FOOTING_BEAM";
	static PAD_FOOTING = "PAD_FOOTING";
	static PILE_CAP = "PILE_CAP";
	static STRIP_FOOTING = "STRIP_FOOTING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcFurnitureTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CHAIR = "CHAIR";
	static TABLE = "TABLE";
	static DESK = "DESK";
	static BED = "BED";
	static FILECABINET = "FILECABINET";
	static SHELF = "SHELF";
	static SOFA = "SOFA";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcGeographicElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static TERRAIN = "TERRAIN";
	static SOIL_BORING_POINT = "SOIL_BORING_POINT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcGeometricProjectionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static GRAPH_VIEW = "GRAPH_VIEW";
	static SKETCH_VIEW = "SKETCH_VIEW";
	static MODEL_VIEW = "MODEL_VIEW";
	static PLAN_VIEW = "PLAN_VIEW";
	static REFLECTED_PLAN_VIEW = "REFLECTED_PLAN_VIEW";
	static SECTION_VIEW = "SECTION_VIEW";
	static ELEVATION_VIEW = "ELEVATION_VIEW";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcGlobalOrLocalEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static GLOBAL_COORDS = "GLOBAL_COORDS";
	static LOCAL_COORDS = "LOCAL_COORDS";
};
export class IfcGridTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static RECTANGULAR = "RECTANGULAR";
	static RADIAL = "RADIAL";
	static TRIANGULAR = "TRIANGULAR";
	static IRREGULAR = "IRREGULAR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcHeatExchangerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PLATE = "PLATE";
	static SHELLANDTUBE = "SHELLANDTUBE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcHumidifierTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STEAMINJECTION = "STEAMINJECTION";
	static ADIABATICAIRWASHER = "ADIABATICAIRWASHER";
	static ADIABATICPAN = "ADIABATICPAN";
	static ADIABATICWETTEDELEMENT = "ADIABATICWETTEDELEMENT";
	static ADIABATICATOMIZING = "ADIABATICATOMIZING";
	static ADIABATICULTRASONIC = "ADIABATICULTRASONIC";
	static ADIABATICRIGIDMEDIA = "ADIABATICRIGIDMEDIA";
	static ADIABATICCOMPRESSEDAIRNOZZLE = "ADIABATICCOMPRESSEDAIRNOZZLE";
	static ASSISTEDELECTRIC = "ASSISTEDELECTRIC";
	static ASSISTEDNATURALGAS = "ASSISTEDNATURALGAS";
	static ASSISTEDPROPANE = "ASSISTEDPROPANE";
	static ASSISTEDBUTANE = "ASSISTEDBUTANE";
	static ASSISTEDSTEAM = "ASSISTEDSTEAM";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcInterceptorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CYCLONIC = "CYCLONIC";
	static GREASE = "GREASE";
	static OIL = "OIL";
	static PETROL = "PETROL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcInternalOrExternalEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static INTERNAL = "INTERNAL";
	static EXTERNAL = "EXTERNAL";
	static EXTERNAL_EARTH = "EXTERNAL_EARTH";
	static EXTERNAL_WATER = "EXTERNAL_WATER";
	static EXTERNAL_FIRE = "EXTERNAL_FIRE";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcInventoryTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ASSETINVENTORY = "ASSETINVENTORY";
	static SPACEINVENTORY = "SPACEINVENTORY";
	static FURNITUREINVENTORY = "FURNITUREINVENTORY";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcJunctionBoxTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DATA = "DATA";
	static POWER = "POWER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcKnotType {
	value: string;
	constructor(v: string) { this.value = v;}
	static UNIFORM_KNOTS = "UNIFORM_KNOTS";
	static QUASI_UNIFORM_KNOTS = "QUASI_UNIFORM_KNOTS";
	static PIECEWISE_BEZIER_KNOTS = "PIECEWISE_BEZIER_KNOTS";
	static UNSPECIFIED = "UNSPECIFIED";
};
export class IfcLaborResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ADMINISTRATION = "ADMINISTRATION";
	static CARPENTRY = "CARPENTRY";
	static CLEANING = "CLEANING";
	static CONCRETE = "CONCRETE";
	static DRYWALL = "DRYWALL";
	static ELECTRIC = "ELECTRIC";
	static FINISHING = "FINISHING";
	static FLOORING = "FLOORING";
	static GENERAL = "GENERAL";
	static HVAC = "HVAC";
	static LANDSCAPING = "LANDSCAPING";
	static MASONRY = "MASONRY";
	static PAINTING = "PAINTING";
	static PAVING = "PAVING";
	static PLUMBING = "PLUMBING";
	static ROOFING = "ROOFING";
	static SITEGRADING = "SITEGRADING";
	static STEELWORK = "STEELWORK";
	static SURVEYING = "SURVEYING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLampTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
	static FLUORESCENT = "FLUORESCENT";
	static HALOGEN = "HALOGEN";
	static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
	static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
	static LED = "LED";
	static METALHALIDE = "METALHALIDE";
	static OLED = "OLED";
	static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLayerSetDirectionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AXIS1 = "AXIS1";
	static AXIS2 = "AXIS2";
	static AXIS3 = "AXIS3";
};
export class IfcLightDistributionCurveEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static TYPE_A = "TYPE_A";
	static TYPE_B = "TYPE_B";
	static TYPE_C = "TYPE_C";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLightEmissionSourceEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COMPACTFLUORESCENT = "COMPACTFLUORESCENT";
	static FLUORESCENT = "FLUORESCENT";
	static HIGHPRESSUREMERCURY = "HIGHPRESSUREMERCURY";
	static HIGHPRESSURESODIUM = "HIGHPRESSURESODIUM";
	static LIGHTEMITTINGDIODE = "LIGHTEMITTINGDIODE";
	static LOWPRESSURESODIUM = "LOWPRESSURESODIUM";
	static LOWVOLTAGEHALOGEN = "LOWVOLTAGEHALOGEN";
	static MAINVOLTAGEHALOGEN = "MAINVOLTAGEHALOGEN";
	static METALHALIDE = "METALHALIDE";
	static TUNGSTENFILAMENT = "TUNGSTENFILAMENT";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLightFixtureTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static POINTSOURCE = "POINTSOURCE";
	static DIRECTIONSOURCE = "DIRECTIONSOURCE";
	static SECURITYLIGHTING = "SECURITYLIGHTING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLoadGroupTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static LOAD_GROUP = "LOAD_GROUP";
	static LOAD_CASE = "LOAD_CASE";
	static LOAD_COMBINATION = "LOAD_COMBINATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcLogicalOperatorEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static LOGICALAND = "LOGICALAND";
	static LOGICALOR = "LOGICALOR";
	static LOGICALXOR = "LOGICALXOR";
	static LOGICALNOTAND = "LOGICALNOTAND";
	static LOGICALNOTOR = "LOGICALNOTOR";
};
export class IfcMechanicalFastenerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ANCHORBOLT = "ANCHORBOLT";
	static BOLT = "BOLT";
	static DOWEL = "DOWEL";
	static NAIL = "NAIL";
	static NAILPLATE = "NAILPLATE";
	static RIVET = "RIVET";
	static SCREW = "SCREW";
	static SHEARCONNECTOR = "SHEARCONNECTOR";
	static STAPLE = "STAPLE";
	static STUDSHEARCONNECTOR = "STUDSHEARCONNECTOR";
	static COUPLER = "COUPLER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcMedicalDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRSTATION = "AIRSTATION";
	static FEEDAIRUNIT = "FEEDAIRUNIT";
	static OXYGENGENERATOR = "OXYGENGENERATOR";
	static OXYGENPLANT = "OXYGENPLANT";
	static VACUUMSTATION = "VACUUMSTATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcMemberTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BRACE = "BRACE";
	static CHORD = "CHORD";
	static COLLAR = "COLLAR";
	static MEMBER = "MEMBER";
	static MULLION = "MULLION";
	static PLATE = "PLATE";
	static POST = "POST";
	static PURLIN = "PURLIN";
	static RAFTER = "RAFTER";
	static STRINGER = "STRINGER";
	static STRUT = "STRUT";
	static STUD = "STUD";
	static STIFFENING_RIB = "STIFFENING_RIB";
	static ARCH_SEGMENT = "ARCH_SEGMENT";
	static SUSPENSION_CABLE = "SUSPENSION_CABLE";
	static SUSPENDER = "SUSPENDER";
	static STAY_CABLE = "STAY_CABLE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcMotorConnectionTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BELTDRIVE = "BELTDRIVE";
	static COUPLING = "COUPLING";
	static DIRECTDRIVE = "DIRECTDRIVE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcNullStyle {
	value: string;
	constructor(v: string) { this.value = v;}
	static NULL = "NULL";
};
export class IfcObjectTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PRODUCT = "PRODUCT";
	static PROCESS = "PROCESS";
	static CONTROL = "CONTROL";
	static RESOURCE = "RESOURCE";
	static ACTOR = "ACTOR";
	static GROUP = "GROUP";
	static PROJECT = "PROJECT";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcObjectiveEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CODECOMPLIANCE = "CODECOMPLIANCE";
	static CODEWAIVER = "CODEWAIVER";
	static DESIGNINTENT = "DESIGNINTENT";
	static EXTERNAL = "EXTERNAL";
	static HEALTHANDSAFETY = "HEALTHANDSAFETY";
	static MERGECONFLICT = "MERGECONFLICT";
	static MODELVIEW = "MODELVIEW";
	static PARAMETER = "PARAMETER";
	static REQUIREMENT = "REQUIREMENT";
	static SPECIFICATION = "SPECIFICATION";
	static TRIGGERCONDITION = "TRIGGERCONDITION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcOccupantTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ASSIGNEE = "ASSIGNEE";
	static ASSIGNOR = "ASSIGNOR";
	static LESSEE = "LESSEE";
	static LESSOR = "LESSOR";
	static LETTINGAGENT = "LETTINGAGENT";
	static OWNER = "OWNER";
	static TENANT = "TENANT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcOpeningElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static OPENING = "OPENING";
	static RECESS = "RECESS";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcOutletTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AUDIOVISUALOUTLET = "AUDIOVISUALOUTLET";
	static COMMUNICATIONSOUTLET = "COMMUNICATIONSOUTLET";
	static POWEROUTLET = "POWEROUTLET";
	static DATAOUTLET = "DATAOUTLET";
	static TELEPHONEOUTLET = "TELEPHONEOUTLET";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPerformanceHistoryTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPermeableCoveringOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static GRILL = "GRILL";
	static LOUVER = "LOUVER";
	static SCREEN = "SCREEN";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPermitTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ACCESS = "ACCESS";
	static BUILDING = "BUILDING";
	static WORK = "WORK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPhysicalOrVirtualEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PHYSICAL = "PHYSICAL";
	static VIRTUAL = "VIRTUAL";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPileConstructionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CAST_IN_PLACE = "CAST_IN_PLACE";
	static COMPOSITE = "COMPOSITE";
	static PRECAST_CONCRETE = "PRECAST_CONCRETE";
	static PREFAB_STEEL = "PREFAB_STEEL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPileTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BORED = "BORED";
	static DRIVEN = "DRIVEN";
	static JETGROUTING = "JETGROUTING";
	static COHESION = "COHESION";
	static FRICTION = "FRICTION";
	static SUPPORT = "SUPPORT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPipeFittingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BEND = "BEND";
	static CONNECTOR = "CONNECTOR";
	static ENTRY = "ENTRY";
	static EXIT = "EXIT";
	static JUNCTION = "JUNCTION";
	static OBSTRUCTION = "OBSTRUCTION";
	static TRANSITION = "TRANSITION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPipeSegmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CULVERT = "CULVERT";
	static FLEXIBLESEGMENT = "FLEXIBLESEGMENT";
	static RIGIDSEGMENT = "RIGIDSEGMENT";
	static GUTTER = "GUTTER";
	static SPOOL = "SPOOL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPlateTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CURTAIN_PANEL = "CURTAIN_PANEL";
	static SHEET = "SHEET";
	static FLANGE_PLATE = "FLANGE_PLATE";
	static WEB_PLATE = "WEB_PLATE";
	static STIFFENER_PLATE = "STIFFENER_PLATE";
	static GUSSET_PLATE = "GUSSET_PLATE";
	static COVER_PLATE = "COVER_PLATE";
	static SPLICE_PLATE = "SPLICE_PLATE";
	static BASE_PLATE = "BASE_PLATE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPreferredSurfaceCurveRepresentation {
	value: string;
	constructor(v: string) { this.value = v;}
	static CURVE3D = "CURVE3D";
	static PCURVE_S1 = "PCURVE_S1";
	static PCURVE_S2 = "PCURVE_S2";
};
export class IfcProcedureTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ADVICE_CAUTION = "ADVICE_CAUTION";
	static ADVICE_NOTE = "ADVICE_NOTE";
	static ADVICE_WARNING = "ADVICE_WARNING";
	static CALIBRATION = "CALIBRATION";
	static DIAGNOSTIC = "DIAGNOSTIC";
	static SHUTDOWN = "SHUTDOWN";
	static STARTUP = "STARTUP";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcProfileTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CURVE = "CURVE";
	static AREA = "AREA";
};
export class IfcProjectOrderTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CHANGEORDER = "CHANGEORDER";
	static MAINTENANCEWORKORDER = "MAINTENANCEWORKORDER";
	static MOVEORDER = "MOVEORDER";
	static PURCHASEORDER = "PURCHASEORDER";
	static WORKORDER = "WORKORDER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcProjectedOrTrueLengthEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PROJECTED_LENGTH = "PROJECTED_LENGTH";
	static TRUE_LENGTH = "TRUE_LENGTH";
};
export class IfcProjectionElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BLISTER = "BLISTER";
	static DEVIATOR = "DEVIATOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPropertySetTemplateTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PSET_TYPEDRIVENONLY = "PSET_TYPEDRIVENONLY";
	static PSET_TYPEDRIVENOVERRIDE = "PSET_TYPEDRIVENOVERRIDE";
	static PSET_OCCURRENCEDRIVEN = "PSET_OCCURRENCEDRIVEN";
	static PSET_PERFORMANCEDRIVEN = "PSET_PERFORMANCEDRIVEN";
	static QTO_TYPEDRIVENONLY = "QTO_TYPEDRIVENONLY";
	static QTO_TYPEDRIVENOVERRIDE = "QTO_TYPEDRIVENOVERRIDE";
	static QTO_OCCURRENCEDRIVEN = "QTO_OCCURRENCEDRIVEN";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcProtectiveDeviceTrippingUnitTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ELECTRONIC = "ELECTRONIC";
	static ELECTROMAGNETIC = "ELECTROMAGNETIC";
	static RESIDUALCURRENT = "RESIDUALCURRENT";
	static THERMAL = "THERMAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcProtectiveDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CIRCUITBREAKER = "CIRCUITBREAKER";
	static EARTHLEAKAGECIRCUITBREAKER = "EARTHLEAKAGECIRCUITBREAKER";
	static EARTHINGSWITCH = "EARTHINGSWITCH";
	static FUSEDISCONNECTOR = "FUSEDISCONNECTOR";
	static RESIDUALCURRENTCIRCUITBREAKER = "RESIDUALCURRENTCIRCUITBREAKER";
	static RESIDUALCURRENTSWITCH = "RESIDUALCURRENTSWITCH";
	static VARISTOR = "VARISTOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcPumpTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CIRCULATOR = "CIRCULATOR";
	static ENDSUCTION = "ENDSUCTION";
	static SPLITCASE = "SPLITCASE";
	static SUBMERSIBLEPUMP = "SUBMERSIBLEPUMP";
	static SUMPPUMP = "SUMPPUMP";
	static VERTICALINLINE = "VERTICALINLINE";
	static VERTICALTURBINE = "VERTICALTURBINE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcRailingTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static HANDRAIL = "HANDRAIL";
	static GUARDRAIL = "GUARDRAIL";
	static BALUSTRADE = "BALUSTRADE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcRampFlightTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STRAIGHT = "STRAIGHT";
	static SPIRAL = "SPIRAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcRampTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STRAIGHT_RUN_RAMP = "STRAIGHT_RUN_RAMP";
	static TWO_STRAIGHT_RUN_RAMP = "TWO_STRAIGHT_RUN_RAMP";
	static QUARTER_TURN_RAMP = "QUARTER_TURN_RAMP";
	static TWO_QUARTER_TURN_RAMP = "TWO_QUARTER_TURN_RAMP";
	static HALF_TURN_RAMP = "HALF_TURN_RAMP";
	static SPIRAL_RAMP = "SPIRAL_RAMP";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcRecurrenceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DAILY = "DAILY";
	static WEEKLY = "WEEKLY";
	static MONTHLY_BY_DAY_OF_MONTH = "MONTHLY_BY_DAY_OF_MONTH";
	static MONTHLY_BY_POSITION = "MONTHLY_BY_POSITION";
	static BY_DAY_COUNT = "BY_DAY_COUNT";
	static BY_WEEKDAY_COUNT = "BY_WEEKDAY_COUNT";
	static YEARLY_BY_DAY_OF_MONTH = "YEARLY_BY_DAY_OF_MONTH";
	static YEARLY_BY_POSITION = "YEARLY_BY_POSITION";
};
export class IfcReferentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static KILOPOINT = "KILOPOINT";
	static MILEPOINT = "MILEPOINT";
	static STATION = "STATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcReflectanceMethodEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BLINN = "BLINN";
	static FLAT = "FLAT";
	static GLASS = "GLASS";
	static MATT = "MATT";
	static METAL = "METAL";
	static MIRROR = "MIRROR";
	static PHONG = "PHONG";
	static PLASTIC = "PLASTIC";
	static STRAUSS = "STRAUSS";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcReinforcingBarRoleEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static MAIN = "MAIN";
	static SHEAR = "SHEAR";
	static LIGATURE = "LIGATURE";
	static STUD = "STUD";
	static PUNCHING = "PUNCHING";
	static EDGE = "EDGE";
	static RING = "RING";
	static ANCHORING = "ANCHORING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcReinforcingBarSurfaceEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PLAIN = "PLAIN";
	static TEXTURED = "TEXTURED";
};
export class IfcReinforcingBarTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ANCHORING = "ANCHORING";
	static EDGE = "EDGE";
	static LIGATURE = "LIGATURE";
	static MAIN = "MAIN";
	static PUNCHING = "PUNCHING";
	static RING = "RING";
	static SHEAR = "SHEAR";
	static STUD = "STUD";
	static SPACEBAR = "SPACEBAR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcReinforcingMeshTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcRoleEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SUPPLIER = "SUPPLIER";
	static MANUFACTURER = "MANUFACTURER";
	static CONTRACTOR = "CONTRACTOR";
	static SUBCONTRACTOR = "SUBCONTRACTOR";
	static ARCHITECT = "ARCHITECT";
	static STRUCTURALENGINEER = "STRUCTURALENGINEER";
	static COSTENGINEER = "COSTENGINEER";
	static CLIENT = "CLIENT";
	static BUILDINGOWNER = "BUILDINGOWNER";
	static BUILDINGOPERATOR = "BUILDINGOPERATOR";
	static MECHANICALENGINEER = "MECHANICALENGINEER";
	static ELECTRICALENGINEER = "ELECTRICALENGINEER";
	static PROJECTMANAGER = "PROJECTMANAGER";
	static FACILITIESMANAGER = "FACILITIESMANAGER";
	static CIVILENGINEER = "CIVILENGINEER";
	static COMMISSIONINGENGINEER = "COMMISSIONINGENGINEER";
	static ENGINEER = "ENGINEER";
	static OWNER = "OWNER";
	static CONSULTANT = "CONSULTANT";
	static CONSTRUCTIONMANAGER = "CONSTRUCTIONMANAGER";
	static FIELDCONSTRUCTIONMANAGER = "FIELDCONSTRUCTIONMANAGER";
	static RESELLER = "RESELLER";
	static USERDEFINED = "USERDEFINED";
};
export class IfcRoofTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FLAT_ROOF = "FLAT_ROOF";
	static SHED_ROOF = "SHED_ROOF";
	static GABLE_ROOF = "GABLE_ROOF";
	static HIP_ROOF = "HIP_ROOF";
	static HIPPED_GABLE_ROOF = "HIPPED_GABLE_ROOF";
	static GAMBREL_ROOF = "GAMBREL_ROOF";
	static MANSARD_ROOF = "MANSARD_ROOF";
	static BARREL_ROOF = "BARREL_ROOF";
	static RAINBOW_ROOF = "RAINBOW_ROOF";
	static BUTTERFLY_ROOF = "BUTTERFLY_ROOF";
	static PAVILION_ROOF = "PAVILION_ROOF";
	static DOME_ROOF = "DOME_ROOF";
	static FREEFORM = "FREEFORM";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSIPrefix {
	value: string;
	constructor(v: string) { this.value = v;}
	static EXA = "EXA";
	static PETA = "PETA";
	static TERA = "TERA";
	static GIGA = "GIGA";
	static MEGA = "MEGA";
	static KILO = "KILO";
	static HECTO = "HECTO";
	static DECA = "DECA";
	static DECI = "DECI";
	static CENTI = "CENTI";
	static MILLI = "MILLI";
	static MICRO = "MICRO";
	static NANO = "NANO";
	static PICO = "PICO";
	static FEMTO = "FEMTO";
	static ATTO = "ATTO";
};
export class IfcSIUnitName {
	value: string;
	constructor(v: string) { this.value = v;}
	static AMPERE = "AMPERE";
	static BECQUEREL = "BECQUEREL";
	static CANDELA = "CANDELA";
	static COULOMB = "COULOMB";
	static CUBIC_METRE = "CUBIC_METRE";
	static DEGREE_CELSIUS = "DEGREE_CELSIUS";
	static FARAD = "FARAD";
	static GRAM = "GRAM";
	static GRAY = "GRAY";
	static HENRY = "HENRY";
	static HERTZ = "HERTZ";
	static JOULE = "JOULE";
	static KELVIN = "KELVIN";
	static LUMEN = "LUMEN";
	static LUX = "LUX";
	static METRE = "METRE";
	static MOLE = "MOLE";
	static NEWTON = "NEWTON";
	static OHM = "OHM";
	static PASCAL = "PASCAL";
	static RADIAN = "RADIAN";
	static SECOND = "SECOND";
	static SIEMENS = "SIEMENS";
	static SIEVERT = "SIEVERT";
	static SQUARE_METRE = "SQUARE_METRE";
	static STERADIAN = "STERADIAN";
	static TESLA = "TESLA";
	static VOLT = "VOLT";
	static WATT = "WATT";
	static WEBER = "WEBER";
};
export class IfcSanitaryTerminalTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BATH = "BATH";
	static BIDET = "BIDET";
	static CISTERN = "CISTERN";
	static SHOWER = "SHOWER";
	static SINK = "SINK";
	static SANITARYFOUNTAIN = "SANITARYFOUNTAIN";
	static TOILETPAN = "TOILETPAN";
	static URINAL = "URINAL";
	static WASHHANDBASIN = "WASHHANDBASIN";
	static WCSEAT = "WCSEAT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSectionTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static UNIFORM = "UNIFORM";
	static TAPERED = "TAPERED";
};
export class IfcSensorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COSENSOR = "COSENSOR";
	static CO2SENSOR = "CO2SENSOR";
	static CONDUCTANCESENSOR = "CONDUCTANCESENSOR";
	static CONTACTSENSOR = "CONTACTSENSOR";
	static FIRESENSOR = "FIRESENSOR";
	static FLOWSENSOR = "FLOWSENSOR";
	static FROSTSENSOR = "FROSTSENSOR";
	static GASSENSOR = "GASSENSOR";
	static HEATSENSOR = "HEATSENSOR";
	static HUMIDITYSENSOR = "HUMIDITYSENSOR";
	static IDENTIFIERSENSOR = "IDENTIFIERSENSOR";
	static IONCONCENTRATIONSENSOR = "IONCONCENTRATIONSENSOR";
	static LEVELSENSOR = "LEVELSENSOR";
	static LIGHTSENSOR = "LIGHTSENSOR";
	static MOISTURESENSOR = "MOISTURESENSOR";
	static MOVEMENTSENSOR = "MOVEMENTSENSOR";
	static PHSENSOR = "PHSENSOR";
	static PRESSURESENSOR = "PRESSURESENSOR";
	static RADIATIONSENSOR = "RADIATIONSENSOR";
	static RADIOACTIVITYSENSOR = "RADIOACTIVITYSENSOR";
	static SMOKESENSOR = "SMOKESENSOR";
	static SOUNDSENSOR = "SOUNDSENSOR";
	static TEMPERATURESENSOR = "TEMPERATURESENSOR";
	static WINDSENSOR = "WINDSENSOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSequenceEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static START_START = "START_START";
	static START_FINISH = "START_FINISH";
	static FINISH_START = "FINISH_START";
	static FINISH_FINISH = "FINISH_FINISH";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcShadingDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static JALOUSIE = "JALOUSIE";
	static SHUTTER = "SHUTTER";
	static AWNING = "AWNING";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSimplePropertyTemplateTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static P_SINGLEVALUE = "P_SINGLEVALUE";
	static P_ENUMERATEDVALUE = "P_ENUMERATEDVALUE";
	static P_BOUNDEDVALUE = "P_BOUNDEDVALUE";
	static P_LISTVALUE = "P_LISTVALUE";
	static P_TABLEVALUE = "P_TABLEVALUE";
	static P_REFERENCEVALUE = "P_REFERENCEVALUE";
	static Q_LENGTH = "Q_LENGTH";
	static Q_AREA = "Q_AREA";
	static Q_VOLUME = "Q_VOLUME";
	static Q_COUNT = "Q_COUNT";
	static Q_WEIGHT = "Q_WEIGHT";
	static Q_TIME = "Q_TIME";
};
export class IfcSlabTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FLOOR = "FLOOR";
	static ROOF = "ROOF";
	static LANDING = "LANDING";
	static BASESLAB = "BASESLAB";
	static APPROACH_SLAB = "APPROACH_SLAB";
	static PAVING = "PAVING";
	static WEARING = "WEARING";
	static SIDEWALK = "SIDEWALK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSolarDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SOLARCOLLECTOR = "SOLARCOLLECTOR";
	static SOLARPANEL = "SOLARPANEL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSpaceHeaterTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONVECTOR = "CONVECTOR";
	static RADIATOR = "RADIATOR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSpaceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SPACE = "SPACE";
	static PARKING = "PARKING";
	static GFA = "GFA";
	static INTERNAL = "INTERNAL";
	static EXTERNAL = "EXTERNAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSpatialZoneTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONSTRUCTION = "CONSTRUCTION";
	static FIRESAFETY = "FIRESAFETY";
	static LIGHTING = "LIGHTING";
	static OCCUPANCY = "OCCUPANCY";
	static SECURITY = "SECURITY";
	static THERMAL = "THERMAL";
	static TRANSPORT = "TRANSPORT";
	static VENTILATION = "VENTILATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStackTerminalTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BIRDCAGE = "BIRDCAGE";
	static COWL = "COWL";
	static RAINWATERHOPPER = "RAINWATERHOPPER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStairFlightTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STRAIGHT = "STRAIGHT";
	static WINDER = "WINDER";
	static SPIRAL = "SPIRAL";
	static CURVED = "CURVED";
	static FREEFORM = "FREEFORM";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStairTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static STRAIGHT_RUN_STAIR = "STRAIGHT_RUN_STAIR";
	static TWO_STRAIGHT_RUN_STAIR = "TWO_STRAIGHT_RUN_STAIR";
	static QUARTER_WINDING_STAIR = "QUARTER_WINDING_STAIR";
	static QUARTER_TURN_STAIR = "QUARTER_TURN_STAIR";
	static HALF_WINDING_STAIR = "HALF_WINDING_STAIR";
	static HALF_TURN_STAIR = "HALF_TURN_STAIR";
	static TWO_QUARTER_WINDING_STAIR = "TWO_QUARTER_WINDING_STAIR";
	static TWO_QUARTER_TURN_STAIR = "TWO_QUARTER_TURN_STAIR";
	static THREE_QUARTER_WINDING_STAIR = "THREE_QUARTER_WINDING_STAIR";
	static THREE_QUARTER_TURN_STAIR = "THREE_QUARTER_TURN_STAIR";
	static SPIRAL_STAIR = "SPIRAL_STAIR";
	static DOUBLE_RETURN_STAIR = "DOUBLE_RETURN_STAIR";
	static CURVED_RUN_STAIR = "CURVED_RUN_STAIR";
	static TWO_CURVED_RUN_STAIR = "TWO_CURVED_RUN_STAIR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStateEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static READWRITE = "READWRITE";
	static READONLY = "READONLY";
	static LOCKED = "LOCKED";
	static READWRITELOCKED = "READWRITELOCKED";
	static READONLYLOCKED = "READONLYLOCKED";
};
export class IfcStructuralCurveActivityTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONST = "CONST";
	static LINEAR = "LINEAR";
	static POLYGONAL = "POLYGONAL";
	static EQUIDISTANT = "EQUIDISTANT";
	static SINUS = "SINUS";
	static PARABOLA = "PARABOLA";
	static DISCRETE = "DISCRETE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStructuralCurveMemberTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static RIGID_JOINED_MEMBER = "RIGID_JOINED_MEMBER";
	static PIN_JOINED_MEMBER = "PIN_JOINED_MEMBER";
	static CABLE = "CABLE";
	static TENSION_MEMBER = "TENSION_MEMBER";
	static COMPRESSION_MEMBER = "COMPRESSION_MEMBER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStructuralSurfaceActivityTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONST = "CONST";
	static BILINEAR = "BILINEAR";
	static DISCRETE = "DISCRETE";
	static ISOCONTOUR = "ISOCONTOUR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcStructuralSurfaceMemberTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BENDING_ELEMENT = "BENDING_ELEMENT";
	static MEMBRANE_ELEMENT = "MEMBRANE_ELEMENT";
	static SHELL = "SHELL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSubContractResourceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PURCHASE = "PURCHASE";
	static WORK = "WORK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSurfaceFeatureTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static MARK = "MARK";
	static TAG = "TAG";
	static TREATMENT = "TREATMENT";
	static DEFECT = "DEFECT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSurfaceSide {
	value: string;
	constructor(v: string) { this.value = v;}
	static POSITIVE = "POSITIVE";
	static NEGATIVE = "NEGATIVE";
	static BOTH = "BOTH";
};
export class IfcSwitchingDeviceTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONTACTOR = "CONTACTOR";
	static DIMMERSWITCH = "DIMMERSWITCH";
	static EMERGENCYSTOP = "EMERGENCYSTOP";
	static KEYPAD = "KEYPAD";
	static MOMENTARYSWITCH = "MOMENTARYSWITCH";
	static SELECTORSWITCH = "SELECTORSWITCH";
	static STARTER = "STARTER";
	static SWITCHDISCONNECTOR = "SWITCHDISCONNECTOR";
	static TOGGLESWITCH = "TOGGLESWITCH";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcSystemFurnitureElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static PANEL = "PANEL";
	static WORKSURFACE = "WORKSURFACE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTankTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BASIN = "BASIN";
	static BREAKPRESSURE = "BREAKPRESSURE";
	static EXPANSION = "EXPANSION";
	static FEEDANDEXPANSION = "FEEDANDEXPANSION";
	static PRESSUREVESSEL = "PRESSUREVESSEL";
	static STORAGE = "STORAGE";
	static VESSEL = "VESSEL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTaskDurationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ELAPSEDTIME = "ELAPSEDTIME";
	static WORKTIME = "WORKTIME";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTaskTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ATTENDANCE = "ATTENDANCE";
	static CONSTRUCTION = "CONSTRUCTION";
	static DEMOLITION = "DEMOLITION";
	static DISMANTLE = "DISMANTLE";
	static DISPOSAL = "DISPOSAL";
	static INSTALLATION = "INSTALLATION";
	static LOGISTIC = "LOGISTIC";
	static MAINTENANCE = "MAINTENANCE";
	static MOVE = "MOVE";
	static OPERATION = "OPERATION";
	static REMOVAL = "REMOVAL";
	static RENOVATION = "RENOVATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTendonAnchorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COUPLER = "COUPLER";
	static FIXED_END = "FIXED_END";
	static TENSIONING_END = "TENSIONING_END";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTendonConduitTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static DUCT = "DUCT";
	static COUPLER = "COUPLER";
	static GROUTING_DUCT = "GROUTING_DUCT";
	static TRUMPET = "TRUMPET";
	static DIABOLO = "DIABOLO";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTendonTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BAR = "BAR";
	static COATED = "COATED";
	static STRAND = "STRAND";
	static WIRE = "WIRE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTextPath {
	value: string;
	constructor(v: string) { this.value = v;}
	static LEFT = "LEFT";
	static RIGHT = "RIGHT";
	static UP = "UP";
	static DOWN = "DOWN";
};
export class IfcTimeSeriesDataTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CONTINUOUS = "CONTINUOUS";
	static DISCRETE = "DISCRETE";
	static DISCRETEBINARY = "DISCRETEBINARY";
	static PIECEWISEBINARY = "PIECEWISEBINARY";
	static PIECEWISECONSTANT = "PIECEWISECONSTANT";
	static PIECEWISECONTINUOUS = "PIECEWISECONTINUOUS";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTransformerTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CURRENT = "CURRENT";
	static FREQUENCY = "FREQUENCY";
	static INVERTER = "INVERTER";
	static RECTIFIER = "RECTIFIER";
	static VOLTAGE = "VOLTAGE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTransitionCode {
	value: string;
	constructor(v: string) { this.value = v;}
	static DISCONTINUOUS = "DISCONTINUOUS";
	static CONTINUOUS = "CONTINUOUS";
	static CONTSAMEGRADIENT = "CONTSAMEGRADIENT";
	static CONTSAMEGRADIENTSAMECURVATURE = "CONTSAMEGRADIENTSAMECURVATURE";
};
export class IfcTransitionCurveType {
	value: string;
	constructor(v: string) { this.value = v;}
	static BIQUADRATICPARABOLA = "BIQUADRATICPARABOLA";
	static BLOSSCURVE = "BLOSSCURVE";
	static CLOTHOIDCURVE = "CLOTHOIDCURVE";
	static COSINECURVE = "COSINECURVE";
	static CUBICPARABOLA = "CUBICPARABOLA";
	static SINECURVE = "SINECURVE";
};
export class IfcTransportElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ELEVATOR = "ELEVATOR";
	static ESCALATOR = "ESCALATOR";
	static MOVINGWALKWAY = "MOVINGWALKWAY";
	static CRANEWAY = "CRANEWAY";
	static LIFTINGGEAR = "LIFTINGGEAR";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcTrimmingPreference {
	value: string;
	constructor(v: string) { this.value = v;}
	static CARTESIAN = "CARTESIAN";
	static PARAMETER = "PARAMETER";
	static UNSPECIFIED = "UNSPECIFIED";
};
export class IfcTubeBundleTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FINNED = "FINNED";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcUnitEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ABSORBEDDOSEUNIT = "ABSORBEDDOSEUNIT";
	static AMOUNTOFSUBSTANCEUNIT = "AMOUNTOFSUBSTANCEUNIT";
	static AREAUNIT = "AREAUNIT";
	static DOSEEQUIVALENTUNIT = "DOSEEQUIVALENTUNIT";
	static ELECTRICCAPACITANCEUNIT = "ELECTRICCAPACITANCEUNIT";
	static ELECTRICCHARGEUNIT = "ELECTRICCHARGEUNIT";
	static ELECTRICCONDUCTANCEUNIT = "ELECTRICCONDUCTANCEUNIT";
	static ELECTRICCURRENTUNIT = "ELECTRICCURRENTUNIT";
	static ELECTRICRESISTANCEUNIT = "ELECTRICRESISTANCEUNIT";
	static ELECTRICVOLTAGEUNIT = "ELECTRICVOLTAGEUNIT";
	static ENERGYUNIT = "ENERGYUNIT";
	static FORCEUNIT = "FORCEUNIT";
	static FREQUENCYUNIT = "FREQUENCYUNIT";
	static ILLUMINANCEUNIT = "ILLUMINANCEUNIT";
	static INDUCTANCEUNIT = "INDUCTANCEUNIT";
	static LENGTHUNIT = "LENGTHUNIT";
	static LUMINOUSFLUXUNIT = "LUMINOUSFLUXUNIT";
	static LUMINOUSINTENSITYUNIT = "LUMINOUSINTENSITYUNIT";
	static MAGNETICFLUXDENSITYUNIT = "MAGNETICFLUXDENSITYUNIT";
	static MAGNETICFLUXUNIT = "MAGNETICFLUXUNIT";
	static MASSUNIT = "MASSUNIT";
	static PLANEANGLEUNIT = "PLANEANGLEUNIT";
	static POWERUNIT = "POWERUNIT";
	static PRESSUREUNIT = "PRESSUREUNIT";
	static RADIOACTIVITYUNIT = "RADIOACTIVITYUNIT";
	static SOLIDANGLEUNIT = "SOLIDANGLEUNIT";
	static THERMODYNAMICTEMPERATUREUNIT = "THERMODYNAMICTEMPERATUREUNIT";
	static TIMEUNIT = "TIMEUNIT";
	static VOLUMEUNIT = "VOLUMEUNIT";
	static USERDEFINED = "USERDEFINED";
};
export class IfcUnitaryControlElementTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ALARMPANEL = "ALARMPANEL";
	static CONTROLPANEL = "CONTROLPANEL";
	static GASDETECTIONPANEL = "GASDETECTIONPANEL";
	static INDICATORPANEL = "INDICATORPANEL";
	static MIMICPANEL = "MIMICPANEL";
	static HUMIDISTAT = "HUMIDISTAT";
	static THERMOSTAT = "THERMOSTAT";
	static WEATHERSTATION = "WEATHERSTATION";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcUnitaryEquipmentTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRHANDLER = "AIRHANDLER";
	static AIRCONDITIONINGUNIT = "AIRCONDITIONINGUNIT";
	static DEHUMIDIFIER = "DEHUMIDIFIER";
	static SPLITSYSTEM = "SPLITSYSTEM";
	static ROOFTOPUNIT = "ROOFTOPUNIT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcValveTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static AIRRELEASE = "AIRRELEASE";
	static ANTIVACUUM = "ANTIVACUUM";
	static CHANGEOVER = "CHANGEOVER";
	static CHECK = "CHECK";
	static COMMISSIONING = "COMMISSIONING";
	static DIVERTING = "DIVERTING";
	static DRAWOFFCOCK = "DRAWOFFCOCK";
	static DOUBLECHECK = "DOUBLECHECK";
	static DOUBLEREGULATING = "DOUBLEREGULATING";
	static FAUCET = "FAUCET";
	static FLUSHING = "FLUSHING";
	static GASCOCK = "GASCOCK";
	static GASTAP = "GASTAP";
	static ISOLATING = "ISOLATING";
	static MIXING = "MIXING";
	static PRESSUREREDUCING = "PRESSUREREDUCING";
	static PRESSURERELIEF = "PRESSURERELIEF";
	static REGULATING = "REGULATING";
	static SAFETYCUTOFF = "SAFETYCUTOFF";
	static STEAMTRAP = "STEAMTRAP";
	static STOPCOCK = "STOPCOCK";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcVibrationDamperTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static BENDING_YIELD = "BENDING_YIELD";
	static SHEAR_YIELD = "SHEAR_YIELD";
	static AXIAL_YIELD = "AXIAL_YIELD";
	static FRICTION = "FRICTION";
	static VISCOUS = "VISCOUS";
	static RUBBER = "RUBBER";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcVibrationIsolatorTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static COMPRESSION = "COMPRESSION";
	static SPRING = "SPRING";
	static BASE = "BASE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcVoidingFeatureTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static CUTOUT = "CUTOUT";
	static NOTCH = "NOTCH";
	static HOLE = "HOLE";
	static MITER = "MITER";
	static CHAMFER = "CHAMFER";
	static EDGE = "EDGE";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWallTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static MOVABLE = "MOVABLE";
	static PARAPET = "PARAPET";
	static PARTITIONING = "PARTITIONING";
	static PLUMBINGWALL = "PLUMBINGWALL";
	static SHEAR = "SHEAR";
	static SOLIDWALL = "SOLIDWALL";
	static STANDARD = "STANDARD";
	static POLYGONAL = "POLYGONAL";
	static ELEMENTEDWALL = "ELEMENTEDWALL";
	static RETAININGWALL = "RETAININGWALL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWasteTerminalTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FLOORTRAP = "FLOORTRAP";
	static FLOORWASTE = "FLOORWASTE";
	static GULLYSUMP = "GULLYSUMP";
	static GULLYTRAP = "GULLYTRAP";
	static ROOFDRAIN = "ROOFDRAIN";
	static WASTEDISPOSALUNIT = "WASTEDISPOSALUNIT";
	static WASTETRAP = "WASTETRAP";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowPanelOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SIDEHUNGRIGHTHAND = "SIDEHUNGRIGHTHAND";
	static SIDEHUNGLEFTHAND = "SIDEHUNGLEFTHAND";
	static TILTANDTURNRIGHTHAND = "TILTANDTURNRIGHTHAND";
	static TILTANDTURNLEFTHAND = "TILTANDTURNLEFTHAND";
	static TOPHUNG = "TOPHUNG";
	static BOTTOMHUNG = "BOTTOMHUNG";
	static PIVOTHORIZONTAL = "PIVOTHORIZONTAL";
	static PIVOTVERTICAL = "PIVOTVERTICAL";
	static SLIDINGHORIZONTAL = "SLIDINGHORIZONTAL";
	static SLIDINGVERTICAL = "SLIDINGVERTICAL";
	static REMOVABLECASEMENT = "REMOVABLECASEMENT";
	static FIXEDCASEMENT = "FIXEDCASEMENT";
	static OTHEROPERATION = "OTHEROPERATION";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowPanelPositionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static LEFT = "LEFT";
	static MIDDLE = "MIDDLE";
	static RIGHT = "RIGHT";
	static BOTTOM = "BOTTOM";
	static TOP = "TOP";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowStyleConstructionEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ALUMINIUM = "ALUMINIUM";
	static HIGH_GRADE_STEEL = "HIGH_GRADE_STEEL";
	static STEEL = "STEEL";
	static WOOD = "WOOD";
	static ALUMINIUM_WOOD = "ALUMINIUM_WOOD";
	static PLASTIC = "PLASTIC";
	static OTHER_CONSTRUCTION = "OTHER_CONSTRUCTION";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowStyleOperationEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SINGLE_PANEL = "SINGLE_PANEL";
	static DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
	static DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
	static TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
	static TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
	static TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
	static TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
	static TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
	static TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static WINDOW = "WINDOW";
	static SKYLIGHT = "SKYLIGHT";
	static LIGHTDOME = "LIGHTDOME";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWindowTypePartitioningEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static SINGLE_PANEL = "SINGLE_PANEL";
	static DOUBLE_PANEL_VERTICAL = "DOUBLE_PANEL_VERTICAL";
	static DOUBLE_PANEL_HORIZONTAL = "DOUBLE_PANEL_HORIZONTAL";
	static TRIPLE_PANEL_VERTICAL = "TRIPLE_PANEL_VERTICAL";
	static TRIPLE_PANEL_BOTTOM = "TRIPLE_PANEL_BOTTOM";
	static TRIPLE_PANEL_TOP = "TRIPLE_PANEL_TOP";
	static TRIPLE_PANEL_LEFT = "TRIPLE_PANEL_LEFT";
	static TRIPLE_PANEL_RIGHT = "TRIPLE_PANEL_RIGHT";
	static TRIPLE_PANEL_HORIZONTAL = "TRIPLE_PANEL_HORIZONTAL";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWorkCalendarTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static FIRSTSHIFT = "FIRSTSHIFT";
	static SECONDSHIFT = "SECONDSHIFT";
	static THIRDSHIFT = "THIRDSHIFT";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWorkPlanTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ACTUAL = "ACTUAL";
	static BASELINE = "BASELINE";
	static PLANNED = "PLANNED";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export class IfcWorkScheduleTypeEnum {
	value: string;
	constructor(v: string) { this.value = v;}
	static ACTUAL = "ACTUAL";
	static BASELINE = "BASELINE";
	static PLANNED = "PLANNED";
	static USERDEFINED = "USERDEFINED";
	static NOTDEFINED = "NOTDEFINED";
};
export type IfcActorSelect = 
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
;
export type IfcAppliedValueSelect = 
|IfcMeasureWithUnit
|IfcReference
|IfcValue
;
export type IfcAxis2Placement = 
|IfcAxis2Placement2D
|IfcAxis2Placement3D
;
export type IfcBendingParameterSelect = 
|IfcLengthMeasure
|IfcPlaneAngleMeasure
;
export type IfcBooleanOperand = 
|IfcBooleanResult
|IfcCsgPrimitive3D
|IfcHalfSpaceSolid
|IfcSolidModel
|IfcTessellatedFaceSet
;
export type IfcClassificationReferenceSelect = 
|IfcClassification
|IfcClassificationReference
;
export type IfcClassificationSelect = 
|IfcClassification
|IfcClassificationReference
;
export type IfcColour = 
|IfcColourSpecification
|IfcPreDefinedColour
;
export type IfcColourOrFactor = 
|IfcColourRgb
|IfcNormalisedRatioMeasure
;
export type IfcCoordinateReferenceSystemSelect = 
|IfcCoordinateReferenceSystem
|IfcGeometricRepresentationContext
;
export type IfcCsgSelect = 
|IfcBooleanResult
|IfcCsgPrimitive3D
;
export type IfcCurveFontOrScaledCurveFontSelect = 
|IfcCurveStyleFontAndScaling
|IfcCurveStyleFontSelect
;
export type IfcCurveOnSurface = 
|IfcCompositeCurveOnSurface
|IfcPcurve
|IfcSurfaceCurve
;
export type IfcCurveOrEdgeCurve = 
|IfcBoundedCurve
|IfcEdgeCurve
;
export type IfcCurveStyleFontSelect = 
|IfcCurveStyleFont
|IfcPreDefinedCurveFont
;
export type IfcDefinitionSelect = 
|IfcObjectDefinition
|IfcPropertyDefinition
;
export type IfcDerivedMeasureValue = 
|IfcAbsorbedDoseMeasure
|IfcAccelerationMeasure
|IfcAngularVelocityMeasure
|IfcAreaDensityMeasure
|IfcCompoundPlaneAngleMeasure
|IfcCurvatureMeasure
|IfcDoseEquivalentMeasure
|IfcDynamicViscosityMeasure
|IfcElectricCapacitanceMeasure
|IfcElectricChargeMeasure
|IfcElectricConductanceMeasure
|IfcElectricResistanceMeasure
|IfcElectricVoltageMeasure
|IfcEnergyMeasure
|IfcForceMeasure
|IfcFrequencyMeasure
|IfcHeatFluxDensityMeasure
|IfcHeatingValueMeasure
|IfcIlluminanceMeasure
|IfcInductanceMeasure
|IfcIntegerCountRateMeasure
|IfcIonConcentrationMeasure
|IfcIsothermalMoistureCapacityMeasure
|IfcKinematicViscosityMeasure
|IfcLinearForceMeasure
|IfcLinearMomentMeasure
|IfcLinearStiffnessMeasure
|IfcLinearVelocityMeasure
|IfcLuminousFluxMeasure
|IfcLuminousIntensityDistributionMeasure
|IfcMagneticFluxDensityMeasure
|IfcMagneticFluxMeasure
|IfcMassDensityMeasure
|IfcMassFlowRateMeasure
|IfcMassPerLengthMeasure
|IfcModulusOfElasticityMeasure
|IfcModulusOfLinearSubgradeReactionMeasure
|IfcModulusOfRotationalSubgradeReactionMeasure
|IfcModulusOfSubgradeReactionMeasure
|IfcMoistureDiffusivityMeasure
|IfcMolecularWeightMeasure
|IfcMomentOfInertiaMeasure
|IfcMonetaryMeasure
|IfcPHMeasure
|IfcPlanarForceMeasure
|IfcPowerMeasure
|IfcPressureMeasure
|IfcRadioActivityMeasure
|IfcRotationalFrequencyMeasure
|IfcRotationalMassMeasure
|IfcRotationalStiffnessMeasure
|IfcSectionModulusMeasure
|IfcSectionalAreaIntegralMeasure
|IfcShearModulusMeasure
|IfcSoundPowerLevelMeasure
|IfcSoundPowerMeasure
|IfcSoundPressureLevelMeasure
|IfcSoundPressureMeasure
|IfcSpecificHeatCapacityMeasure
|IfcTemperatureGradientMeasure
|IfcTemperatureRateOfChangeMeasure
|IfcThermalAdmittanceMeasure
|IfcThermalConductivityMeasure
|IfcThermalExpansionCoefficientMeasure
|IfcThermalResistanceMeasure
|IfcThermalTransmittanceMeasure
|IfcTorqueMeasure
|IfcVaporPermeabilityMeasure
|IfcVolumetricFlowRateMeasure
|IfcWarpingConstantMeasure
|IfcWarpingMomentMeasure
;
export type IfcDocumentSelect = 
|IfcDocumentInformation
|IfcDocumentReference
;
export type IfcFillStyleSelect = 
|IfcColour
|IfcExternallyDefinedHatchStyle
|IfcFillAreaStyleHatching
|IfcFillAreaStyleTiles
;
export type IfcGeometricSetSelect = 
|IfcCurve
|IfcPoint
|IfcSurface
;
export type IfcGridPlacementDirectionSelect = 
|IfcDirection
|IfcVirtualGridIntersection
;
export type IfcHatchLineDistanceSelect = 
|IfcPositiveLengthMeasure
|IfcVector
;
export type IfcLayeredItem = 
|IfcRepresentation
|IfcRepresentationItem
;
export type IfcLibrarySelect = 
|IfcLibraryInformation
|IfcLibraryReference
;
export type IfcLightDistributionDataSourceSelect = 
|IfcExternalReference
|IfcLightIntensityDistribution
;
export type IfcMaterialSelect = 
|IfcMaterialDefinition
|IfcMaterialList
|IfcMaterialUsageDefinition
;
export type IfcMeasureValue = 
|IfcAmountOfSubstanceMeasure
|IfcAreaMeasure
|IfcComplexNumber
|IfcContextDependentMeasure
|IfcCountMeasure
|IfcDescriptiveMeasure
|IfcElectricCurrentMeasure
|IfcLengthMeasure
|IfcLuminousIntensityMeasure
|IfcMassMeasure
|IfcNonNegativeLengthMeasure
|IfcNormalisedRatioMeasure
|IfcNumericMeasure
|IfcParameterValue
|IfcPlaneAngleMeasure
|IfcPositiveLengthMeasure
|IfcPositivePlaneAngleMeasure
|IfcPositiveRatioMeasure
|IfcRatioMeasure
|IfcSolidAngleMeasure
|IfcThermodynamicTemperatureMeasure
|IfcTimeMeasure
|IfcVolumeMeasure
;
export type IfcMetricValueSelect = 
|IfcAppliedValue
|IfcMeasureWithUnit
|IfcReference
|IfcTable
|IfcTimeSeries
|IfcValue
;
export type IfcModulusOfRotationalSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfRotationalSubgradeReactionMeasure
;
export type IfcModulusOfSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfSubgradeReactionMeasure
;
export type IfcModulusOfTranslationalSubgradeReactionSelect = 
|IfcBoolean
|IfcModulusOfLinearSubgradeReactionMeasure
;
export type IfcObjectReferenceSelect = 
|IfcAddress
|IfcAppliedValue
|IfcExternalReference
|IfcMaterialDefinition
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
|IfcTable
|IfcTimeSeries
;
export type IfcPointOrVertexPoint = 
|IfcPoint
|IfcVertexPoint
;
export type IfcPresentationStyleSelect = 
|IfcCurveStyle
|IfcFillAreaStyle
|IfcNullStyle
|IfcSurfaceStyle
|IfcTextStyle
;
export type IfcProcessSelect = 
|IfcProcess
|IfcTypeProcess
;
export type IfcProductRepresentationSelect = 
|IfcProductDefinitionShape
|IfcRepresentationMap
;
export type IfcProductSelect = 
|IfcProduct
|IfcTypeProduct
;
export type IfcPropertySetDefinitionSelect = 
|IfcPropertySetDefinition
|IfcPropertySetDefinitionSet
;
export type IfcResourceObjectSelect = 
|IfcActorRole
|IfcAppliedValue
|IfcApproval
|IfcConstraint
|IfcContextDependentUnit
|IfcConversionBasedUnit
|IfcExternalInformation
|IfcExternalReference
|IfcMaterialDefinition
|IfcOrganization
|IfcPerson
|IfcPersonAndOrganization
|IfcPhysicalQuantity
|IfcProfileDef
|IfcPropertyAbstraction
|IfcShapeAspect
|IfcTimeSeries
;
export type IfcResourceSelect = 
|IfcResource
|IfcTypeResource
;
export type IfcRotationalStiffnessSelect = 
|IfcBoolean
|IfcRotationalStiffnessMeasure
;
export type IfcSegmentIndexSelect = 
|IfcArcIndex
|IfcLineIndex
;
export type IfcShell = 
|IfcClosedShell
|IfcOpenShell
;
export type IfcSimpleValue = 
|IfcBinary
|IfcBoolean
|IfcDate
|IfcDateTime
|IfcDuration
|IfcIdentifier
|IfcInteger
|IfcLabel
|IfcLogical
|IfcPositiveInteger
|IfcReal
|IfcText
|IfcTime
|IfcTimeStamp
;
export type IfcSizeSelect = 
|IfcDescriptiveMeasure
|IfcLengthMeasure
|IfcNormalisedRatioMeasure
|IfcPositiveLengthMeasure
|IfcPositiveRatioMeasure
|IfcRatioMeasure
;
export type IfcSolidOrShell = 
|IfcClosedShell
|IfcSolidModel
;
export type IfcSpaceBoundarySelect = 
|IfcExternalSpatialElement
|IfcSpace
;
export type IfcSpecularHighlightSelect = 
|IfcSpecularExponent
|IfcSpecularRoughness
;
export type IfcStructuralActivityAssignmentSelect = 
|IfcElement
|IfcStructuralItem
;
export type IfcStyleAssignmentSelect = 
|IfcPresentationStyle
|IfcPresentationStyleAssignment
;
export type IfcSurfaceOrFaceSurface = 
|IfcFaceBasedSurfaceModel
|IfcFaceSurface
|IfcSurface
;
export type IfcSurfaceStyleElementSelect = 
|IfcExternallyDefinedSurfaceStyle
|IfcSurfaceStyleLighting
|IfcSurfaceStyleRefraction
|IfcSurfaceStyleShading
|IfcSurfaceStyleWithTextures
;
export type IfcTextFontSelect = 
|IfcExternallyDefinedTextFont
|IfcPreDefinedTextFont
;
export type IfcTimeOrRatioSelect = 
|IfcDuration
|IfcRatioMeasure
;
export type IfcTranslationalStiffnessSelect = 
|IfcBoolean
|IfcLinearStiffnessMeasure
;
export type IfcTrimmingSelect = 
|IfcCartesianPoint
|IfcParameterValue
;
export type IfcUnit = 
|IfcDerivedUnit
|IfcMonetaryUnit
|IfcNamedUnit
;
export type IfcValue = 
|IfcDerivedMeasureValue
|IfcMeasureValue
|IfcSimpleValue
;
export type IfcVectorOrDirection = 
|IfcDirection
|IfcVector
;
export type IfcWarpingStiffnessSelect = 
|IfcBoolean
|IfcWarpingMomentMeasure
;
function ParseType(name: string, value: any): any {
	if (name === "IFCABSORBEDDOSEMEASURE") { return new IfcAbsorbedDoseMeasure(value); }
	if (name === "IFCACCELERATIONMEASURE") { return new IfcAccelerationMeasure(value); }
	if (name === "IFCAMOUNTOFSUBSTANCEMEASURE") { return new IfcAmountOfSubstanceMeasure(value); }
	if (name === "IFCANGULARVELOCITYMEASURE") { return new IfcAngularVelocityMeasure(value); }
	if (name === "IFCAREADENSITYMEASURE") { return new IfcAreaDensityMeasure(value); }
	if (name === "IFCAREAMEASURE") { return new IfcAreaMeasure(value); }
	if (name === "IFCBINARY") { return new IfcBinary(value); }
	if (name === "IFCBOOLEAN") { return new IfcBoolean(value); }
	if (name === "IFCBOXALIGNMENT") { return new IfcBoxAlignment(value); }
	if (name === "IFCCARDINALPOINTREFERENCE") { return new IfcCardinalPointReference(value); }
	if (name === "IFCCONTEXTDEPENDENTMEASURE") { return new IfcContextDependentMeasure(value); }
	if (name === "IFCCOUNTMEASURE") { return new IfcCountMeasure(value); }
	if (name === "IFCCURVATUREMEASURE") { return new IfcCurvatureMeasure(value); }
	if (name === "IFCDATE") { return new IfcDate(value); }
	if (name === "IFCDATETIME") { return new IfcDateTime(value); }
	if (name === "IFCDAYINMONTHNUMBER") { return new IfcDayInMonthNumber(value); }
	if (name === "IFCDAYINWEEKNUMBER") { return new IfcDayInWeekNumber(value); }
	if (name === "IFCDESCRIPTIVEMEASURE") { return new IfcDescriptiveMeasure(value); }
	if (name === "IFCDIMENSIONCOUNT") { return new IfcDimensionCount(value); }
	if (name === "IFCDOSEEQUIVALENTMEASURE") { return new IfcDoseEquivalentMeasure(value); }
	if (name === "IFCDURATION") { return new IfcDuration(value); }
	if (name === "IFCDYNAMICVISCOSITYMEASURE") { return new IfcDynamicViscosityMeasure(value); }
	if (name === "IFCELECTRICCAPACITANCEMEASURE") { return new IfcElectricCapacitanceMeasure(value); }
	if (name === "IFCELECTRICCHARGEMEASURE") { return new IfcElectricChargeMeasure(value); }
	if (name === "IFCELECTRICCONDUCTANCEMEASURE") { return new IfcElectricConductanceMeasure(value); }
	if (name === "IFCELECTRICCURRENTMEASURE") { return new IfcElectricCurrentMeasure(value); }
	if (name === "IFCELECTRICRESISTANCEMEASURE") { return new IfcElectricResistanceMeasure(value); }
	if (name === "IFCELECTRICVOLTAGEMEASURE") { return new IfcElectricVoltageMeasure(value); }
	if (name === "IFCENERGYMEASURE") { return new IfcEnergyMeasure(value); }
	if (name === "IFCFONTSTYLE") { return new IfcFontStyle(value); }
	if (name === "IFCFONTVARIANT") { return new IfcFontVariant(value); }
	if (name === "IFCFONTWEIGHT") { return new IfcFontWeight(value); }
	if (name === "IFCFORCEMEASURE") { return new IfcForceMeasure(value); }
	if (name === "IFCFREQUENCYMEASURE") { return new IfcFrequencyMeasure(value); }
	if (name === "IFCGLOBALLYUNIQUEID") { return new IfcGloballyUniqueId(value); }
	if (name === "IFCHEATFLUXDENSITYMEASURE") { return new IfcHeatFluxDensityMeasure(value); }
	if (name === "IFCHEATINGVALUEMEASURE") { return new IfcHeatingValueMeasure(value); }
	if (name === "IFCIDENTIFIER") { return new IfcIdentifier(value); }
	if (name === "IFCILLUMINANCEMEASURE") { return new IfcIlluminanceMeasure(value); }
	if (name === "IFCINDUCTANCEMEASURE") { return new IfcInductanceMeasure(value); }
	if (name === "IFCINTEGER") { return new IfcInteger(value); }
	if (name === "IFCINTEGERCOUNTRATEMEASURE") { return new IfcIntegerCountRateMeasure(value); }
	if (name === "IFCIONCONCENTRATIONMEASURE") { return new IfcIonConcentrationMeasure(value); }
	if (name === "IFCISOTHERMALMOISTURECAPACITYMEASURE") { return new IfcIsothermalMoistureCapacityMeasure(value); }
	if (name === "IFCKINEMATICVISCOSITYMEASURE") { return new IfcKinematicViscosityMeasure(value); }
	if (name === "IFCLABEL") { return new IfcLabel(value); }
	if (name === "IFCLANGUAGEID") { return new IfcLanguageId(value); }
	if (name === "IFCLENGTHMEASURE") { return new IfcLengthMeasure(value); }
	if (name === "IFCLINEARFORCEMEASURE") { return new IfcLinearForceMeasure(value); }
	if (name === "IFCLINEARMOMENTMEASURE") { return new IfcLinearMomentMeasure(value); }
	if (name === "IFCLINEARSTIFFNESSMEASURE") { return new IfcLinearStiffnessMeasure(value); }
	if (name === "IFCLINEARVELOCITYMEASURE") { return new IfcLinearVelocityMeasure(value); }
	if (name === "IFCLOGICAL") { return new IfcLogical(value); }
	if (name === "IFCLUMINOUSFLUXMEASURE") { return new IfcLuminousFluxMeasure(value); }
	if (name === "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE") { return new IfcLuminousIntensityDistributionMeasure(value); }
	if (name === "IFCLUMINOUSINTENSITYMEASURE") { return new IfcLuminousIntensityMeasure(value); }
	if (name === "IFCMAGNETICFLUXDENSITYMEASURE") { return new IfcMagneticFluxDensityMeasure(value); }
	if (name === "IFCMAGNETICFLUXMEASURE") { return new IfcMagneticFluxMeasure(value); }
	if (name === "IFCMASSDENSITYMEASURE") { return new IfcMassDensityMeasure(value); }
	if (name === "IFCMASSFLOWRATEMEASURE") { return new IfcMassFlowRateMeasure(value); }
	if (name === "IFCMASSMEASURE") { return new IfcMassMeasure(value); }
	if (name === "IFCMASSPERLENGTHMEASURE") { return new IfcMassPerLengthMeasure(value); }
	if (name === "IFCMODULUSOFELASTICITYMEASURE") { return new IfcModulusOfElasticityMeasure(value); }
	if (name === "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE") { return new IfcModulusOfLinearSubgradeReactionMeasure(value); }
	if (name === "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE") { return new IfcModulusOfRotationalSubgradeReactionMeasure(value); }
	if (name === "IFCMODULUSOFSUBGRADEREACTIONMEASURE") { return new IfcModulusOfSubgradeReactionMeasure(value); }
	if (name === "IFCMOISTUREDIFFUSIVITYMEASURE") { return new IfcMoistureDiffusivityMeasure(value); }
	if (name === "IFCMOLECULARWEIGHTMEASURE") { return new IfcMolecularWeightMeasure(value); }
	if (name === "IFCMOMENTOFINERTIAMEASURE") { return new IfcMomentOfInertiaMeasure(value); }
	if (name === "IFCMONETARYMEASURE") { return new IfcMonetaryMeasure(value); }
	if (name === "IFCMONTHINYEARNUMBER") { return new IfcMonthInYearNumber(value); }
	if (name === "IFCNONNEGATIVELENGTHMEASURE") { return new IfcNonNegativeLengthMeasure(value); }
	if (name === "IFCNORMALISEDRATIOMEASURE") { return new IfcNormalisedRatioMeasure(value); }
	if (name === "IFCNUMERICMEASURE") { return new IfcNumericMeasure(value); }
	if (name === "IFCPHMEASURE") { return new IfcPHMeasure(value); }
	if (name === "IFCPARAMETERVALUE") { return new IfcParameterValue(value); }
	if (name === "IFCPLANARFORCEMEASURE") { return new IfcPlanarForceMeasure(value); }
	if (name === "IFCPLANEANGLEMEASURE") { return new IfcPlaneAngleMeasure(value); }
	if (name === "IFCPOSITIVEINTEGER") { return new IfcPositiveInteger(value); }
	if (name === "IFCPOSITIVELENGTHMEASURE") { return new IfcPositiveLengthMeasure(value); }
	if (name === "IFCPOSITIVEPLANEANGLEMEASURE") { return new IfcPositivePlaneAngleMeasure(value); }
	if (name === "IFCPOSITIVERATIOMEASURE") { return new IfcPositiveRatioMeasure(value); }
	if (name === "IFCPOWERMEASURE") { return new IfcPowerMeasure(value); }
	if (name === "IFCPRESENTABLETEXT") { return new IfcPresentableText(value); }
	if (name === "IFCPRESSUREMEASURE") { return new IfcPressureMeasure(value); }
	if (name === "IFCRADIOACTIVITYMEASURE") { return new IfcRadioActivityMeasure(value); }
	if (name === "IFCRATIOMEASURE") { return new IfcRatioMeasure(value); }
	if (name === "IFCREAL") { return new IfcReal(value); }
	if (name === "IFCROTATIONALFREQUENCYMEASURE") { return new IfcRotationalFrequencyMeasure(value); }
	if (name === "IFCROTATIONALMASSMEASURE") { return new IfcRotationalMassMeasure(value); }
	if (name === "IFCROTATIONALSTIFFNESSMEASURE") { return new IfcRotationalStiffnessMeasure(value); }
	if (name === "IFCSECTIONMODULUSMEASURE") { return new IfcSectionModulusMeasure(value); }
	if (name === "IFCSECTIONALAREAINTEGRALMEASURE") { return new IfcSectionalAreaIntegralMeasure(value); }
	if (name === "IFCSHEARMODULUSMEASURE") { return new IfcShearModulusMeasure(value); }
	if (name === "IFCSOLIDANGLEMEASURE") { return new IfcSolidAngleMeasure(value); }
	if (name === "IFCSOUNDPOWERLEVELMEASURE") { return new IfcSoundPowerLevelMeasure(value); }
	if (name === "IFCSOUNDPOWERMEASURE") { return new IfcSoundPowerMeasure(value); }
	if (name === "IFCSOUNDPRESSURELEVELMEASURE") { return new IfcSoundPressureLevelMeasure(value); }
	if (name === "IFCSOUNDPRESSUREMEASURE") { return new IfcSoundPressureMeasure(value); }
	if (name === "IFCSPECIFICHEATCAPACITYMEASURE") { return new IfcSpecificHeatCapacityMeasure(value); }
	if (name === "IFCSPECULAREXPONENT") { return new IfcSpecularExponent(value); }
	if (name === "IFCSPECULARROUGHNESS") { return new IfcSpecularRoughness(value); }
	if (name === "IFCTEMPERATUREGRADIENTMEASURE") { return new IfcTemperatureGradientMeasure(value); }
	if (name === "IFCTEMPERATURERATEOFCHANGEMEASURE") { return new IfcTemperatureRateOfChangeMeasure(value); }
	if (name === "IFCTEXT") { return new IfcText(value); }
	if (name === "IFCTEXTALIGNMENT") { return new IfcTextAlignment(value); }
	if (name === "IFCTEXTDECORATION") { return new IfcTextDecoration(value); }
	if (name === "IFCTEXTFONTNAME") { return new IfcTextFontName(value); }
	if (name === "IFCTEXTTRANSFORMATION") { return new IfcTextTransformation(value); }
	if (name === "IFCTHERMALADMITTANCEMEASURE") { return new IfcThermalAdmittanceMeasure(value); }
	if (name === "IFCTHERMALCONDUCTIVITYMEASURE") { return new IfcThermalConductivityMeasure(value); }
	if (name === "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE") { return new IfcThermalExpansionCoefficientMeasure(value); }
	if (name === "IFCTHERMALRESISTANCEMEASURE") { return new IfcThermalResistanceMeasure(value); }
	if (name === "IFCTHERMALTRANSMITTANCEMEASURE") { return new IfcThermalTransmittanceMeasure(value); }
	if (name === "IFCTHERMODYNAMICTEMPERATUREMEASURE") { return new IfcThermodynamicTemperatureMeasure(value); }
	if (name === "IFCTIME") { return new IfcTime(value); }
	if (name === "IFCTIMEMEASURE") { return new IfcTimeMeasure(value); }
	if (name === "IFCTIMESTAMP") { return new IfcTimeStamp(value); }
	if (name === "IFCTORQUEMEASURE") { return new IfcTorqueMeasure(value); }
	if (name === "IFCURIREFERENCE") { return new IfcURIReference(value); }
	if (name === "IFCVAPORPERMEABILITYMEASURE") { return new IfcVaporPermeabilityMeasure(value); }
	if (name === "IFCVOLUMEMEASURE") { return new IfcVolumeMeasure(value); }
	if (name === "IFCVOLUMETRICFLOWRATEMEASURE") { return new IfcVolumetricFlowRateMeasure(value); }
	if (name === "IFCWARPINGCONSTANTMEASURE") { return new IfcWarpingConstantMeasure(value); }
	if (name === "IFCWARPINGMOMENTMEASURE") { return new IfcWarpingMomentMeasure(value); }
	if (name === "IFCACTIONREQUESTTYPEENUM") { return new IfcActionRequestTypeEnum(value); }
	if (name === "IFCACTIONSOURCETYPEENUM") { return new IfcActionSourceTypeEnum(value); }
	if (name === "IFCACTIONTYPEENUM") { return new IfcActionTypeEnum(value); }
	if (name === "IFCACTUATORTYPEENUM") { return new IfcActuatorTypeEnum(value); }
	if (name === "IFCADDRESSTYPEENUM") { return new IfcAddressTypeEnum(value); }
	if (name === "IFCAIRTERMINALBOXTYPEENUM") { return new IfcAirTerminalBoxTypeEnum(value); }
	if (name === "IFCAIRTERMINALTYPEENUM") { return new IfcAirTerminalTypeEnum(value); }
	if (name === "IFCAIRTOAIRHEATRECOVERYTYPEENUM") { return new IfcAirToAirHeatRecoveryTypeEnum(value); }
	if (name === "IFCALARMTYPEENUM") { return new IfcAlarmTypeEnum(value); }
	if (name === "IFCALIGNMENTTYPEENUM") { return new IfcAlignmentTypeEnum(value); }
	if (name === "IFCANALYSISMODELTYPEENUM") { return new IfcAnalysisModelTypeEnum(value); }
	if (name === "IFCANALYSISTHEORYTYPEENUM") { return new IfcAnalysisTheoryTypeEnum(value); }
	if (name === "IFCARITHMETICOPERATORENUM") { return new IfcArithmeticOperatorEnum(value); }
	if (name === "IFCASSEMBLYPLACEENUM") { return new IfcAssemblyPlaceEnum(value); }
	if (name === "IFCAUDIOVISUALAPPLIANCETYPEENUM") { return new IfcAudioVisualApplianceTypeEnum(value); }
	if (name === "IFCBSPLINECURVEFORM") { return new IfcBSplineCurveForm(value); }
	if (name === "IFCBSPLINESURFACEFORM") { return new IfcBSplineSurfaceForm(value); }
	if (name === "IFCBEAMTYPEENUM") { return new IfcBeamTypeEnum(value); }
	if (name === "IFCBEARINGTYPEDISPLACEMENTENUM") { return new IfcBearingTypeDisplacementEnum(value); }
	if (name === "IFCBEARINGTYPEENUM") { return new IfcBearingTypeEnum(value); }
	if (name === "IFCBENCHMARKENUM") { return new IfcBenchmarkEnum(value); }
	if (name === "IFCBOILERTYPEENUM") { return new IfcBoilerTypeEnum(value); }
	if (name === "IFCBOOLEANOPERATOR") { return new IfcBooleanOperator(value); }
	if (name === "IFCBRIDGEPARTTYPEENUM") { return new IfcBridgePartTypeEnum(value); }
	if (name === "IFCBRIDGETYPEENUM") { return new IfcBridgeTypeEnum(value); }
	if (name === "IFCBUILDINGELEMENTPARTTYPEENUM") { return new IfcBuildingElementPartTypeEnum(value); }
	if (name === "IFCBUILDINGELEMENTPROXYTYPEENUM") { return new IfcBuildingElementProxyTypeEnum(value); }
	if (name === "IFCBUILDINGSYSTEMTYPEENUM") { return new IfcBuildingSystemTypeEnum(value); }
	if (name === "IFCBURNERTYPEENUM") { return new IfcBurnerTypeEnum(value); }
	if (name === "IFCCABLECARRIERFITTINGTYPEENUM") { return new IfcCableCarrierFittingTypeEnum(value); }
	if (name === "IFCCABLECARRIERSEGMENTTYPEENUM") { return new IfcCableCarrierSegmentTypeEnum(value); }
	if (name === "IFCCABLEFITTINGTYPEENUM") { return new IfcCableFittingTypeEnum(value); }
	if (name === "IFCCABLESEGMENTTYPEENUM") { return new IfcCableSegmentTypeEnum(value); }
	if (name === "IFCCAISSONFOUNDATIONTYPEENUM") { return new IfcCaissonFoundationTypeEnum(value); }
	if (name === "IFCCHANGEACTIONENUM") { return new IfcChangeActionEnum(value); }
	if (name === "IFCCHILLERTYPEENUM") { return new IfcChillerTypeEnum(value); }
	if (name === "IFCCHIMNEYTYPEENUM") { return new IfcChimneyTypeEnum(value); }
	if (name === "IFCCOILTYPEENUM") { return new IfcCoilTypeEnum(value); }
	if (name === "IFCCOLUMNTYPEENUM") { return new IfcColumnTypeEnum(value); }
	if (name === "IFCCOMMUNICATIONSAPPLIANCETYPEENUM") { return new IfcCommunicationsApplianceTypeEnum(value); }
	if (name === "IFCCOMPLEXPROPERTYTEMPLATETYPEENUM") { return new IfcComplexPropertyTemplateTypeEnum(value); }
	if (name === "IFCCOMPRESSORTYPEENUM") { return new IfcCompressorTypeEnum(value); }
	if (name === "IFCCONDENSERTYPEENUM") { return new IfcCondenserTypeEnum(value); }
	if (name === "IFCCONNECTIONTYPEENUM") { return new IfcConnectionTypeEnum(value); }
	if (name === "IFCCONSTRAINTENUM") { return new IfcConstraintEnum(value); }
	if (name === "IFCCONSTRUCTIONEQUIPMENTRESOURCETYPEENUM") { return new IfcConstructionEquipmentResourceTypeEnum(value); }
	if (name === "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM") { return new IfcConstructionMaterialResourceTypeEnum(value); }
	if (name === "IFCCONSTRUCTIONPRODUCTRESOURCETYPEENUM") { return new IfcConstructionProductResourceTypeEnum(value); }
	if (name === "IFCCONTROLLERTYPEENUM") { return new IfcControllerTypeEnum(value); }
	if (name === "IFCCOOLEDBEAMTYPEENUM") { return new IfcCooledBeamTypeEnum(value); }
	if (name === "IFCCOOLINGTOWERTYPEENUM") { return new IfcCoolingTowerTypeEnum(value); }
	if (name === "IFCCOSTITEMTYPEENUM") { return new IfcCostItemTypeEnum(value); }
	if (name === "IFCCOSTSCHEDULETYPEENUM") { return new IfcCostScheduleTypeEnum(value); }
	if (name === "IFCCOVERINGTYPEENUM") { return new IfcCoveringTypeEnum(value); }
	if (name === "IFCCREWRESOURCETYPEENUM") { return new IfcCrewResourceTypeEnum(value); }
	if (name === "IFCCURTAINWALLTYPEENUM") { return new IfcCurtainWallTypeEnum(value); }
	if (name === "IFCCURVEINTERPOLATIONENUM") { return new IfcCurveInterpolationEnum(value); }
	if (name === "IFCDAMPERTYPEENUM") { return new IfcDamperTypeEnum(value); }
	if (name === "IFCDATAORIGINENUM") { return new IfcDataOriginEnum(value); }
	if (name === "IFCDERIVEDUNITENUM") { return new IfcDerivedUnitEnum(value); }
	if (name === "IFCDIRECTIONSENSEENUM") { return new IfcDirectionSenseEnum(value); }
	if (name === "IFCDISCRETEACCESSORYTYPEENUM") { return new IfcDiscreteAccessoryTypeEnum(value); }
	if (name === "IFCDISTRIBUTIONCHAMBERELEMENTTYPEENUM") { return new IfcDistributionChamberElementTypeEnum(value); }
	if (name === "IFCDISTRIBUTIONPORTTYPEENUM") { return new IfcDistributionPortTypeEnum(value); }
	if (name === "IFCDISTRIBUTIONSYSTEMENUM") { return new IfcDistributionSystemEnum(value); }
	if (name === "IFCDOCUMENTCONFIDENTIALITYENUM") { return new IfcDocumentConfidentialityEnum(value); }
	if (name === "IFCDOCUMENTSTATUSENUM") { return new IfcDocumentStatusEnum(value); }
	if (name === "IFCDOORPANELOPERATIONENUM") { return new IfcDoorPanelOperationEnum(value); }
	if (name === "IFCDOORPANELPOSITIONENUM") { return new IfcDoorPanelPositionEnum(value); }
	if (name === "IFCDOORSTYLECONSTRUCTIONENUM") { return new IfcDoorStyleConstructionEnum(value); }
	if (name === "IFCDOORSTYLEOPERATIONENUM") { return new IfcDoorStyleOperationEnum(value); }
	if (name === "IFCDOORTYPEENUM") { return new IfcDoorTypeEnum(value); }
	if (name === "IFCDOORTYPEOPERATIONENUM") { return new IfcDoorTypeOperationEnum(value); }
	if (name === "IFCDUCTFITTINGTYPEENUM") { return new IfcDuctFittingTypeEnum(value); }
	if (name === "IFCDUCTSEGMENTTYPEENUM") { return new IfcDuctSegmentTypeEnum(value); }
	if (name === "IFCDUCTSILENCERTYPEENUM") { return new IfcDuctSilencerTypeEnum(value); }
	if (name === "IFCELECTRICAPPLIANCETYPEENUM") { return new IfcElectricApplianceTypeEnum(value); }
	if (name === "IFCELECTRICDISTRIBUTIONBOARDTYPEENUM") { return new IfcElectricDistributionBoardTypeEnum(value); }
	if (name === "IFCELECTRICFLOWSTORAGEDEVICETYPEENUM") { return new IfcElectricFlowStorageDeviceTypeEnum(value); }
	if (name === "IFCELECTRICGENERATORTYPEENUM") { return new IfcElectricGeneratorTypeEnum(value); }
	if (name === "IFCELECTRICMOTORTYPEENUM") { return new IfcElectricMotorTypeEnum(value); }
	if (name === "IFCELECTRICTIMECONTROLTYPEENUM") { return new IfcElectricTimeControlTypeEnum(value); }
	if (name === "IFCELEMENTASSEMBLYTYPEENUM") { return new IfcElementAssemblyTypeEnum(value); }
	if (name === "IFCELEMENTCOMPOSITIONENUM") { return new IfcElementCompositionEnum(value); }
	if (name === "IFCENGINETYPEENUM") { return new IfcEngineTypeEnum(value); }
	if (name === "IFCEVAPORATIVECOOLERTYPEENUM") { return new IfcEvaporativeCoolerTypeEnum(value); }
	if (name === "IFCEVAPORATORTYPEENUM") { return new IfcEvaporatorTypeEnum(value); }
	if (name === "IFCEVENTTRIGGERTYPEENUM") { return new IfcEventTriggerTypeEnum(value); }
	if (name === "IFCEVENTTYPEENUM") { return new IfcEventTypeEnum(value); }
	if (name === "IFCEXTERNALSPATIALELEMENTTYPEENUM") { return new IfcExternalSpatialElementTypeEnum(value); }
	if (name === "IFCFANTYPEENUM") { return new IfcFanTypeEnum(value); }
	if (name === "IFCFASTENERTYPEENUM") { return new IfcFastenerTypeEnum(value); }
	if (name === "IFCFILTERTYPEENUM") { return new IfcFilterTypeEnum(value); }
	if (name === "IFCFIRESUPPRESSIONTERMINALTYPEENUM") { return new IfcFireSuppressionTerminalTypeEnum(value); }
	if (name === "IFCFLOWDIRECTIONENUM") { return new IfcFlowDirectionEnum(value); }
	if (name === "IFCFLOWINSTRUMENTTYPEENUM") { return new IfcFlowInstrumentTypeEnum(value); }
	if (name === "IFCFLOWMETERTYPEENUM") { return new IfcFlowMeterTypeEnum(value); }
	if (name === "IFCFOOTINGTYPEENUM") { return new IfcFootingTypeEnum(value); }
	if (name === "IFCFURNITURETYPEENUM") { return new IfcFurnitureTypeEnum(value); }
	if (name === "IFCGEOGRAPHICELEMENTTYPEENUM") { return new IfcGeographicElementTypeEnum(value); }
	if (name === "IFCGEOMETRICPROJECTIONENUM") { return new IfcGeometricProjectionEnum(value); }
	if (name === "IFCGLOBALORLOCALENUM") { return new IfcGlobalOrLocalEnum(value); }
	if (name === "IFCGRIDTYPEENUM") { return new IfcGridTypeEnum(value); }
	if (name === "IFCHEATEXCHANGERTYPEENUM") { return new IfcHeatExchangerTypeEnum(value); }
	if (name === "IFCHUMIDIFIERTYPEENUM") { return new IfcHumidifierTypeEnum(value); }
	if (name === "IFCINTERCEPTORTYPEENUM") { return new IfcInterceptorTypeEnum(value); }
	if (name === "IFCINTERNALOREXTERNALENUM") { return new IfcInternalOrExternalEnum(value); }
	if (name === "IFCINVENTORYTYPEENUM") { return new IfcInventoryTypeEnum(value); }
	if (name === "IFCJUNCTIONBOXTYPEENUM") { return new IfcJunctionBoxTypeEnum(value); }
	if (name === "IFCKNOTTYPE") { return new IfcKnotType(value); }
	if (name === "IFCLABORRESOURCETYPEENUM") { return new IfcLaborResourceTypeEnum(value); }
	if (name === "IFCLAMPTYPEENUM") { return new IfcLampTypeEnum(value); }
	if (name === "IFCLAYERSETDIRECTIONENUM") { return new IfcLayerSetDirectionEnum(value); }
	if (name === "IFCLIGHTDISTRIBUTIONCURVEENUM") { return new IfcLightDistributionCurveEnum(value); }
	if (name === "IFCLIGHTEMISSIONSOURCEENUM") { return new IfcLightEmissionSourceEnum(value); }
	if (name === "IFCLIGHTFIXTURETYPEENUM") { return new IfcLightFixtureTypeEnum(value); }
	if (name === "IFCLOADGROUPTYPEENUM") { return new IfcLoadGroupTypeEnum(value); }
	if (name === "IFCLOGICALOPERATORENUM") { return new IfcLogicalOperatorEnum(value); }
	if (name === "IFCMECHANICALFASTENERTYPEENUM") { return new IfcMechanicalFastenerTypeEnum(value); }
	if (name === "IFCMEDICALDEVICETYPEENUM") { return new IfcMedicalDeviceTypeEnum(value); }
	if (name === "IFCMEMBERTYPEENUM") { return new IfcMemberTypeEnum(value); }
	if (name === "IFCMOTORCONNECTIONTYPEENUM") { return new IfcMotorConnectionTypeEnum(value); }
	if (name === "IFCNULLSTYLE") { return new IfcNullStyle(value); }
	if (name === "IFCOBJECTTYPEENUM") { return new IfcObjectTypeEnum(value); }
	if (name === "IFCOBJECTIVEENUM") { return new IfcObjectiveEnum(value); }
	if (name === "IFCOCCUPANTTYPEENUM") { return new IfcOccupantTypeEnum(value); }
	if (name === "IFCOPENINGELEMENTTYPEENUM") { return new IfcOpeningElementTypeEnum(value); }
	if (name === "IFCOUTLETTYPEENUM") { return new IfcOutletTypeEnum(value); }
	if (name === "IFCPERFORMANCEHISTORYTYPEENUM") { return new IfcPerformanceHistoryTypeEnum(value); }
	if (name === "IFCPERMEABLECOVERINGOPERATIONENUM") { return new IfcPermeableCoveringOperationEnum(value); }
	if (name === "IFCPERMITTYPEENUM") { return new IfcPermitTypeEnum(value); }
	if (name === "IFCPHYSICALORVIRTUALENUM") { return new IfcPhysicalOrVirtualEnum(value); }
	if (name === "IFCPILECONSTRUCTIONENUM") { return new IfcPileConstructionEnum(value); }
	if (name === "IFCPILETYPEENUM") { return new IfcPileTypeEnum(value); }
	if (name === "IFCPIPEFITTINGTYPEENUM") { return new IfcPipeFittingTypeEnum(value); }
	if (name === "IFCPIPESEGMENTTYPEENUM") { return new IfcPipeSegmentTypeEnum(value); }
	if (name === "IFCPLATETYPEENUM") { return new IfcPlateTypeEnum(value); }
	if (name === "IFCPREFERREDSURFACECURVEREPRESENTATION") { return new IfcPreferredSurfaceCurveRepresentation(value); }
	if (name === "IFCPROCEDURETYPEENUM") { return new IfcProcedureTypeEnum(value); }
	if (name === "IFCPROFILETYPEENUM") { return new IfcProfileTypeEnum(value); }
	if (name === "IFCPROJECTORDERTYPEENUM") { return new IfcProjectOrderTypeEnum(value); }
	if (name === "IFCPROJECTEDORTRUELENGTHENUM") { return new IfcProjectedOrTrueLengthEnum(value); }
	if (name === "IFCPROJECTIONELEMENTTYPEENUM") { return new IfcProjectionElementTypeEnum(value); }
	if (name === "IFCPROPERTYSETTEMPLATETYPEENUM") { return new IfcPropertySetTemplateTypeEnum(value); }
	if (name === "IFCPROTECTIVEDEVICETRIPPINGUNITTYPEENUM") { return new IfcProtectiveDeviceTrippingUnitTypeEnum(value); }
	if (name === "IFCPROTECTIVEDEVICETYPEENUM") { return new IfcProtectiveDeviceTypeEnum(value); }
	if (name === "IFCPUMPTYPEENUM") { return new IfcPumpTypeEnum(value); }
	if (name === "IFCRAILINGTYPEENUM") { return new IfcRailingTypeEnum(value); }
	if (name === "IFCRAMPFLIGHTTYPEENUM") { return new IfcRampFlightTypeEnum(value); }
	if (name === "IFCRAMPTYPEENUM") { return new IfcRampTypeEnum(value); }
	if (name === "IFCRECURRENCETYPEENUM") { return new IfcRecurrenceTypeEnum(value); }
	if (name === "IFCREFERENTTYPEENUM") { return new IfcReferentTypeEnum(value); }
	if (name === "IFCREFLECTANCEMETHODENUM") { return new IfcReflectanceMethodEnum(value); }
	if (name === "IFCREINFORCINGBARROLEENUM") { return new IfcReinforcingBarRoleEnum(value); }
	if (name === "IFCREINFORCINGBARSURFACEENUM") { return new IfcReinforcingBarSurfaceEnum(value); }
	if (name === "IFCREINFORCINGBARTYPEENUM") { return new IfcReinforcingBarTypeEnum(value); }
	if (name === "IFCREINFORCINGMESHTYPEENUM") { return new IfcReinforcingMeshTypeEnum(value); }
	if (name === "IFCROLEENUM") { return new IfcRoleEnum(value); }
	if (name === "IFCROOFTYPEENUM") { return new IfcRoofTypeEnum(value); }
	if (name === "IFCSIPREFIX") { return new IfcSIPrefix(value); }
	if (name === "IFCSIUNITNAME") { return new IfcSIUnitName(value); }
	if (name === "IFCSANITARYTERMINALTYPEENUM") { return new IfcSanitaryTerminalTypeEnum(value); }
	if (name === "IFCSECTIONTYPEENUM") { return new IfcSectionTypeEnum(value); }
	if (name === "IFCSENSORTYPEENUM") { return new IfcSensorTypeEnum(value); }
	if (name === "IFCSEQUENCEENUM") { return new IfcSequenceEnum(value); }
	if (name === "IFCSHADINGDEVICETYPEENUM") { return new IfcShadingDeviceTypeEnum(value); }
	if (name === "IFCSIMPLEPROPERTYTEMPLATETYPEENUM") { return new IfcSimplePropertyTemplateTypeEnum(value); }
	if (name === "IFCSLABTYPEENUM") { return new IfcSlabTypeEnum(value); }
	if (name === "IFCSOLARDEVICETYPEENUM") { return new IfcSolarDeviceTypeEnum(value); }
	if (name === "IFCSPACEHEATERTYPEENUM") { return new IfcSpaceHeaterTypeEnum(value); }
	if (name === "IFCSPACETYPEENUM") { return new IfcSpaceTypeEnum(value); }
	if (name === "IFCSPATIALZONETYPEENUM") { return new IfcSpatialZoneTypeEnum(value); }
	if (name === "IFCSTACKTERMINALTYPEENUM") { return new IfcStackTerminalTypeEnum(value); }
	if (name === "IFCSTAIRFLIGHTTYPEENUM") { return new IfcStairFlightTypeEnum(value); }
	if (name === "IFCSTAIRTYPEENUM") { return new IfcStairTypeEnum(value); }
	if (name === "IFCSTATEENUM") { return new IfcStateEnum(value); }
	if (name === "IFCSTRUCTURALCURVEACTIVITYTYPEENUM") { return new IfcStructuralCurveActivityTypeEnum(value); }
	if (name === "IFCSTRUCTURALCURVEMEMBERTYPEENUM") { return new IfcStructuralCurveMemberTypeEnum(value); }
	if (name === "IFCSTRUCTURALSURFACEACTIVITYTYPEENUM") { return new IfcStructuralSurfaceActivityTypeEnum(value); }
	if (name === "IFCSTRUCTURALSURFACEMEMBERTYPEENUM") { return new IfcStructuralSurfaceMemberTypeEnum(value); }
	if (name === "IFCSUBCONTRACTRESOURCETYPEENUM") { return new IfcSubContractResourceTypeEnum(value); }
	if (name === "IFCSURFACEFEATURETYPEENUM") { return new IfcSurfaceFeatureTypeEnum(value); }
	if (name === "IFCSURFACESIDE") { return new IfcSurfaceSide(value); }
	if (name === "IFCSWITCHINGDEVICETYPEENUM") { return new IfcSwitchingDeviceTypeEnum(value); }
	if (name === "IFCSYSTEMFURNITUREELEMENTTYPEENUM") { return new IfcSystemFurnitureElementTypeEnum(value); }
	if (name === "IFCTANKTYPEENUM") { return new IfcTankTypeEnum(value); }
	if (name === "IFCTASKDURATIONENUM") { return new IfcTaskDurationEnum(value); }
	if (name === "IFCTASKTYPEENUM") { return new IfcTaskTypeEnum(value); }
	if (name === "IFCTENDONANCHORTYPEENUM") { return new IfcTendonAnchorTypeEnum(value); }
	if (name === "IFCTENDONCONDUITTYPEENUM") { return new IfcTendonConduitTypeEnum(value); }
	if (name === "IFCTENDONTYPEENUM") { return new IfcTendonTypeEnum(value); }
	if (name === "IFCTEXTPATH") { return new IfcTextPath(value); }
	if (name === "IFCTIMESERIESDATATYPEENUM") { return new IfcTimeSeriesDataTypeEnum(value); }
	if (name === "IFCTRANSFORMERTYPEENUM") { return new IfcTransformerTypeEnum(value); }
	if (name === "IFCTRANSITIONCODE") { return new IfcTransitionCode(value); }
	if (name === "IFCTRANSITIONCURVETYPE") { return new IfcTransitionCurveType(value); }
	if (name === "IFCTRANSPORTELEMENTTYPEENUM") { return new IfcTransportElementTypeEnum(value); }
	if (name === "IFCTRIMMINGPREFERENCE") { return new IfcTrimmingPreference(value); }
	if (name === "IFCTUBEBUNDLETYPEENUM") { return new IfcTubeBundleTypeEnum(value); }
	if (name === "IFCUNITENUM") { return new IfcUnitEnum(value); }
	if (name === "IFCUNITARYCONTROLELEMENTTYPEENUM") { return new IfcUnitaryControlElementTypeEnum(value); }
	if (name === "IFCUNITARYEQUIPMENTTYPEENUM") { return new IfcUnitaryEquipmentTypeEnum(value); }
	if (name === "IFCVALVETYPEENUM") { return new IfcValveTypeEnum(value); }
	if (name === "IFCVIBRATIONDAMPERTYPEENUM") { return new IfcVibrationDamperTypeEnum(value); }
	if (name === "IFCVIBRATIONISOLATORTYPEENUM") { return new IfcVibrationIsolatorTypeEnum(value); }
	if (name === "IFCVOIDINGFEATURETYPEENUM") { return new IfcVoidingFeatureTypeEnum(value); }
	if (name === "IFCWALLTYPEENUM") { return new IfcWallTypeEnum(value); }
	if (name === "IFCWASTETERMINALTYPEENUM") { return new IfcWasteTerminalTypeEnum(value); }
	if (name === "IFCWINDOWPANELOPERATIONENUM") { return new IfcWindowPanelOperationEnum(value); }
	if (name === "IFCWINDOWPANELPOSITIONENUM") { return new IfcWindowPanelPositionEnum(value); }
	if (name === "IFCWINDOWSTYLECONSTRUCTIONENUM") { return new IfcWindowStyleConstructionEnum(value); }
	if (name === "IFCWINDOWSTYLEOPERATIONENUM") { return new IfcWindowStyleOperationEnum(value); }
	if (name === "IFCWINDOWTYPEENUM") { return new IfcWindowTypeEnum(value); }
	if (name === "IFCWINDOWTYPEPARTITIONINGENUM") { return new IfcWindowTypePartitioningEnum(value); }
	if (name === "IFCWORKCALENDARTYPEENUM") { return new IfcWorkCalendarTypeEnum(value); }
	if (name === "IFCWORKPLANTYPEENUM") { return new IfcWorkPlanTypeEnum(value); }
	if (name === "IFCWORKSCHEDULETYPEENUM") { return new IfcWorkScheduleTypeEnum(value); }
	console.log("Unknown type: " + name);
};
export class IfcActionRequest {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcActionRequestTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcActionRequestTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcActionRequest
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcActionRequestTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		return new IfcActionRequest(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, LongDescription);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcActor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheActor: IfcActorSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheActor: IfcActorSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcActor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let TheActor;
		if (tape[ptr]) {
		TheActor = tape[ptr++];
		} else { TheActor = null; ptr++; }
		return new IfcActor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcActorRole {
	constructor(expressID: number, type: number, Role: IfcRoleEnum , UserDefinedRole: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Role = Role;
		this.UserDefinedRole = UserDefinedRole;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Role: IfcRoleEnum ;
	UserDefinedRole: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcActorRole
	{
		let ptr = 0;
		let Role;
		if (tape[ptr]) {
		Role = new IfcRoleEnum(tape[ptr++]);
		} else { Role = null; ptr++; }
		let UserDefinedRole;
		if (tape[ptr]) {
		UserDefinedRole = tape[ptr++];
		} else { UserDefinedRole = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcActorRole(expressID, type, Role, UserDefinedRole, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.Role.value)
		if(this.UserDefinedRole){
		args.push(STRING)
		args.push(this.UserDefinedRole)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcActuator {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcActuatorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcActuatorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcActuator
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcActuatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcActuator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcActuatorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcActuatorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcActuatorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcActuatorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcActuatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcActuatorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAddress {
	constructor(expressID: number, type: number, Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
	}
	expressID: number;
	type: number;
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAddress
	{
		let ptr = 0;
		let Purpose;
		if (tape[ptr]) {
		Purpose = new IfcAddressTypeEnum(tape[ptr++]);
		} else { Purpose = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UserDefinedPurpose;
		if (tape[ptr]) {
		UserDefinedPurpose = tape[ptr++];
		} else { UserDefinedPurpose = null; ptr++; }
		return new IfcAddress(expressID, type, Purpose, Description, UserDefinedPurpose);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Purpose){
		args.push(ENUM);
		args.push(this.Purpose.value)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPurpose){
		args.push(STRING)
		args.push(this.UserDefinedPurpose)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAdvancedBrep {
	constructor(expressID: number, type: number, Outer: Handle<IfcClosedShell> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	expressID: number;
	type: number;
	Outer: Handle<IfcClosedShell> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedBrep
	{
		let ptr = 0;
		let Outer;
		if (tape[ptr]) {
		Outer = tape[ptr++];
		} else { Outer = null; ptr++; }
		return new IfcAdvancedBrep(expressID, type, Outer);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Outer)
		return args;
	}
};
export class IfcAdvancedBrepWithVoids {
	constructor(expressID: number, type: number, Outer: Handle<IfcClosedShell> , Voids: Handle<IfcClosedShell>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
		this.Voids = Voids;
	}
	expressID: number;
	type: number;
	Outer: Handle<IfcClosedShell> ;
	Voids: Handle<IfcClosedShell>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedBrepWithVoids
	{
		let ptr = 0;
		let Outer;
		if (tape[ptr]) {
		Outer = tape[ptr++];
		} else { Outer = null; ptr++; }
		let Voids;
		if (tape[ptr]) {
		Voids = [];
		let Voids_index = 0;
		while (Voids_index < tape[ptr].length) {
			Voids.push(tape[ptr][Voids_index++]);
		}
	ptr++;
		} else { Voids = null; ptr++; }
		return new IfcAdvancedBrepWithVoids(expressID, type, Outer, Voids);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Outer)
		args.push(SET_BEGIN)
		this.Voids.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcAdvancedFace {
	constructor(expressID: number, type: number, Bounds: Handle<IfcFaceBound>[] , FaceSurface: Handle<IfcSurface> , SameSense: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	expressID: number;
	type: number;
	Bounds: Handle<IfcFaceBound>[] ;
	FaceSurface: Handle<IfcSurface> ;
	SameSense: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAdvancedFace
	{
		let ptr = 0;
		let Bounds;
		if (tape[ptr]) {
		Bounds = [];
		let Bounds_index = 0;
		while (Bounds_index < tape[ptr].length) {
			Bounds.push(tape[ptr][Bounds_index++]);
		}
	ptr++;
		} else { Bounds = null; ptr++; }
		let FaceSurface;
		if (tape[ptr]) {
		FaceSurface = tape[ptr++];
		} else { FaceSurface = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		return new IfcAdvancedFace(expressID, type, Bounds, FaceSurface, SameSense);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Bounds.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.FaceSurface)
		return args;
	}
};
export class IfcAirTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirTerminalTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirTerminalTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAirTerminalBox {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirTerminalBoxTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirTerminalBoxTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalBox
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirTerminalBoxTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirTerminalBox(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAirTerminalBoxType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirTerminalBoxTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirTerminalBoxTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalBoxType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirTerminalBoxTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirTerminalBoxType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAirTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirTerminalTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirTerminalTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAirToAirHeatRecovery {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAirToAirHeatRecoveryTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAirToAirHeatRecoveryTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirToAirHeatRecovery
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirToAirHeatRecoveryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirToAirHeatRecovery(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAirToAirHeatRecoveryType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAirToAirHeatRecoveryTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAirToAirHeatRecoveryTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAirToAirHeatRecoveryType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAirToAirHeatRecoveryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAirToAirHeatRecoveryType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAlarm {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAlarmTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAlarmTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlarm
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAlarmTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAlarm(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAlarmType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAlarmTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAlarmTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlarmType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAlarmTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAlarmType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAlignment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Axis: Handle<IfcCurve> , PredefinedType: IfcAlignmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Axis: Handle<IfcCurve> ;
	PredefinedType: IfcAlignmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAlignmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAlignment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Axis)
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAlignment2DHorizontal {
	constructor(expressID: number, type: number, StartDistAlong: IfcLengthMeasure | null, Segments: Handle<IfcAlignment2DHorizontalSegment>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartDistAlong = StartDistAlong;
		this.Segments = Segments;
	}
	expressID: number;
	type: number;
	StartDistAlong: IfcLengthMeasure | null;
	Segments: Handle<IfcAlignment2DHorizontalSegment>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DHorizontal
	{
		let ptr = 0;
		let StartDistAlong;
		if (tape[ptr]) {
		StartDistAlong = tape[ptr++];
		} else { StartDistAlong = null; ptr++; }
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		return new IfcAlignment2DHorizontal(expressID, type, StartDistAlong, Segments);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.StartDistAlong){
		args.push(REAL)
		args.push(this.StartDistAlong)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcAlignment2DHorizontalSegment {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, CurveGeometry: Handle<IfcCurveSegment2D> )
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.CurveGeometry = CurveGeometry;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	CurveGeometry: Handle<IfcCurveSegment2D> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DHorizontalSegment
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		let CurveGeometry;
		if (tape[ptr]) {
		CurveGeometry = tape[ptr++];
		} else { CurveGeometry = null; ptr++; }
		return new IfcAlignment2DHorizontalSegment(expressID, type, TangentialContinuity, StartTag, EndTag, CurveGeometry);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.CurveGeometry)
		return args;
	}
};
export class IfcAlignment2DSegment {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DSegment
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		return new IfcAlignment2DSegment(expressID, type, TangentialContinuity, StartTag, EndTag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAlignment2DVerSegCircularArc {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure , Radius: IfcPositiveLengthMeasure , IsConvex: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.Radius = Radius;
		this.IsConvex = IsConvex;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	IsConvex: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DVerSegCircularArc
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		let StartDistAlong;
		if (tape[ptr]) {
		StartDistAlong = tape[ptr++];
		} else { StartDistAlong = null; ptr++; }
		let HorizontalLength;
		if (tape[ptr]) {
		HorizontalLength = tape[ptr++];
		} else { HorizontalLength = null; ptr++; }
		let StartHeight;
		if (tape[ptr]) {
		StartHeight = tape[ptr++];
		} else { StartHeight = null; ptr++; }
		let StartGradient;
		if (tape[ptr]) {
		StartGradient = tape[ptr++];
		} else { StartGradient = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let IsConvex;
		if (tape[ptr]) {
		IsConvex = tape[ptr++];
		} else { IsConvex = null; ptr++; }
		return new IfcAlignment2DVerSegCircularArc(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, Radius, IsConvex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.StartDistAlong)
		args.push(REAL)
		args.push(this.StartHeight)
		args.push(REAL)
		args.push(this.StartGradient)
		return args;
	}
};
export class IfcAlignment2DVerSegLine {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DVerSegLine
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		let StartDistAlong;
		if (tape[ptr]) {
		StartDistAlong = tape[ptr++];
		} else { StartDistAlong = null; ptr++; }
		let HorizontalLength;
		if (tape[ptr]) {
		HorizontalLength = tape[ptr++];
		} else { HorizontalLength = null; ptr++; }
		let StartHeight;
		if (tape[ptr]) {
		StartHeight = tape[ptr++];
		} else { StartHeight = null; ptr++; }
		let StartGradient;
		if (tape[ptr]) {
		StartGradient = tape[ptr++];
		} else { StartGradient = null; ptr++; }
		return new IfcAlignment2DVerSegLine(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.StartDistAlong)
		args.push(REAL)
		args.push(this.StartHeight)
		args.push(REAL)
		args.push(this.StartGradient)
		return args;
	}
};
export class IfcAlignment2DVerSegParabolicArc {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure , ParabolaConstant: IfcPositiveLengthMeasure , IsConvex: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
		this.ParabolaConstant = ParabolaConstant;
		this.IsConvex = IsConvex;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	ParabolaConstant: IfcPositiveLengthMeasure ;
	IsConvex: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DVerSegParabolicArc
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		let StartDistAlong;
		if (tape[ptr]) {
		StartDistAlong = tape[ptr++];
		} else { StartDistAlong = null; ptr++; }
		let HorizontalLength;
		if (tape[ptr]) {
		HorizontalLength = tape[ptr++];
		} else { HorizontalLength = null; ptr++; }
		let StartHeight;
		if (tape[ptr]) {
		StartHeight = tape[ptr++];
		} else { StartHeight = null; ptr++; }
		let StartGradient;
		if (tape[ptr]) {
		StartGradient = tape[ptr++];
		} else { StartGradient = null; ptr++; }
		let ParabolaConstant;
		if (tape[ptr]) {
		ParabolaConstant = tape[ptr++];
		} else { ParabolaConstant = null; ptr++; }
		let IsConvex;
		if (tape[ptr]) {
		IsConvex = tape[ptr++];
		} else { IsConvex = null; ptr++; }
		return new IfcAlignment2DVerSegParabolicArc(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient, ParabolaConstant, IsConvex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.StartDistAlong)
		args.push(REAL)
		args.push(this.StartHeight)
		args.push(REAL)
		args.push(this.StartGradient)
		return args;
	}
};
export class IfcAlignment2DVertical {
	constructor(expressID: number, type: number, Segments: Handle<IfcAlignment2DVerticalSegment>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
	}
	expressID: number;
	type: number;
	Segments: Handle<IfcAlignment2DVerticalSegment>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DVertical
	{
		let ptr = 0;
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		return new IfcAlignment2DVertical(expressID, type, Segments);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcAlignment2DVerticalSegment {
	constructor(expressID: number, type: number, TangentialContinuity: IfcBoolean | null, StartTag: IfcLabel | null, EndTag: IfcLabel | null, StartDistAlong: IfcLengthMeasure , HorizontalLength: IfcPositiveLengthMeasure , StartHeight: IfcLengthMeasure , StartGradient: IfcRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.TangentialContinuity = TangentialContinuity;
		this.StartTag = StartTag;
		this.EndTag = EndTag;
		this.StartDistAlong = StartDistAlong;
		this.HorizontalLength = HorizontalLength;
		this.StartHeight = StartHeight;
		this.StartGradient = StartGradient;
	}
	expressID: number;
	type: number;
	TangentialContinuity: IfcBoolean | null;
	StartTag: IfcLabel | null;
	EndTag: IfcLabel | null;
	StartDistAlong: IfcLengthMeasure ;
	HorizontalLength: IfcPositiveLengthMeasure ;
	StartHeight: IfcLengthMeasure ;
	StartGradient: IfcRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignment2DVerticalSegment
	{
		let ptr = 0;
		let TangentialContinuity;
		if (tape[ptr]) {
		TangentialContinuity = tape[ptr++];
		} else { TangentialContinuity = null; ptr++; }
		let StartTag;
		if (tape[ptr]) {
		StartTag = tape[ptr++];
		} else { StartTag = null; ptr++; }
		let EndTag;
		if (tape[ptr]) {
		EndTag = tape[ptr++];
		} else { EndTag = null; ptr++; }
		let StartDistAlong;
		if (tape[ptr]) {
		StartDistAlong = tape[ptr++];
		} else { StartDistAlong = null; ptr++; }
		let HorizontalLength;
		if (tape[ptr]) {
		HorizontalLength = tape[ptr++];
		} else { HorizontalLength = null; ptr++; }
		let StartHeight;
		if (tape[ptr]) {
		StartHeight = tape[ptr++];
		} else { StartHeight = null; ptr++; }
		let StartGradient;
		if (tape[ptr]) {
		StartGradient = tape[ptr++];
		} else { StartGradient = null; ptr++; }
		return new IfcAlignment2DVerticalSegment(expressID, type, TangentialContinuity, StartTag, EndTag, StartDistAlong, HorizontalLength, StartHeight, StartGradient);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TangentialContinuity){
		}
		else{ args.push(EMPTY); }
		if(this.StartTag){
		args.push(STRING)
		args.push(this.StartTag)
		}
		else{ args.push(EMPTY); }
		if(this.EndTag){
		args.push(STRING)
		args.push(this.EndTag)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.StartDistAlong)
		args.push(REAL)
		args.push(this.StartHeight)
		args.push(REAL)
		args.push(this.StartGradient)
		return args;
	}
};
export class IfcAlignmentCurve {
	constructor(expressID: number, type: number, Horizontal: Handle<IfcAlignment2DHorizontal> , Vertical: Handle<IfcAlignment2DVertical> | null, Tag: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Horizontal = Horizontal;
		this.Vertical = Vertical;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	Horizontal: Handle<IfcAlignment2DHorizontal> ;
	Vertical: Handle<IfcAlignment2DVertical> | null;
	Tag: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAlignmentCurve
	{
		let ptr = 0;
		let Horizontal;
		if (tape[ptr]) {
		Horizontal = tape[ptr++];
		} else { Horizontal = null; ptr++; }
		let Vertical;
		if (tape[ptr]) {
		Vertical = tape[ptr++];
		} else { Vertical = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcAlignmentCurve(expressID, type, Horizontal, Vertical, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Horizontal)
		if(this.Vertical){
		args.push(REF)
		args.push(this.Vertical)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAnnotation {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotation
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcAnnotation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAnnotationFillArea {
	constructor(expressID: number, type: number, OuterBoundary: Handle<IfcCurve> , InnerBoundaries: Handle<IfcCurve>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	expressID: number;
	type: number;
	OuterBoundary: Handle<IfcCurve> ;
	InnerBoundaries: Handle<IfcCurve>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAnnotationFillArea
	{
		let ptr = 0;
		let OuterBoundary;
		if (tape[ptr]) {
		OuterBoundary = tape[ptr++];
		} else { OuterBoundary = null; ptr++; }
		let InnerBoundaries;
		if (tape[ptr]) {
		InnerBoundaries = [];
		let InnerBoundaries_index = 0;
		while (InnerBoundaries_index < tape[ptr].length) {
			InnerBoundaries.push(tape[ptr][InnerBoundaries_index++]);
		}
	ptr++;
		} else { InnerBoundaries = null; ptr++; }
		return new IfcAnnotationFillArea(expressID, type, OuterBoundary, InnerBoundaries);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.OuterBoundary)
		if(this.InnerBoundaries){
		args.push(SET_BEGIN)
		this.InnerBoundaries.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcApplication {
	constructor(expressID: number, type: number, ApplicationDeveloper: Handle<IfcOrganization> , Version: IfcLabel , ApplicationFullName: IfcLabel , ApplicationIdentifier: IfcIdentifier )
	{
		this.expressID = expressID;
		this.type = type;
		this.ApplicationDeveloper = ApplicationDeveloper;
		this.Version = Version;
		this.ApplicationFullName = ApplicationFullName;
		this.ApplicationIdentifier = ApplicationIdentifier;
	}
	expressID: number;
	type: number;
	ApplicationDeveloper: Handle<IfcOrganization> ;
	Version: IfcLabel ;
	ApplicationFullName: IfcLabel ;
	ApplicationIdentifier: IfcIdentifier ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcApplication
	{
		let ptr = 0;
		let ApplicationDeveloper;
		if (tape[ptr]) {
		ApplicationDeveloper = tape[ptr++];
		} else { ApplicationDeveloper = null; ptr++; }
		let Version;
		if (tape[ptr]) {
		Version = tape[ptr++];
		} else { Version = null; ptr++; }
		let ApplicationFullName;
		if (tape[ptr]) {
		ApplicationFullName = tape[ptr++];
		} else { ApplicationFullName = null; ptr++; }
		let ApplicationIdentifier;
		if (tape[ptr]) {
		ApplicationIdentifier = tape[ptr++];
		} else { ApplicationIdentifier = null; ptr++; }
		return new IfcApplication(expressID, type, ApplicationDeveloper, Version, ApplicationFullName, ApplicationIdentifier);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ApplicationDeveloper)
		args.push(STRING)
		args.push(this.Version)
		args.push(STRING)
		args.push(this.ApplicationFullName)
		args.push(STRING)
		args.push(this.ApplicationIdentifier)
		return args;
	}
};
export class IfcAppliedValue {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, AppliedValue: IfcAppliedValueSelect | null, UnitBasis: Handle<IfcMeasureWithUnit> | null, ApplicableDate: IfcDate | null, FixedUntilDate: IfcDate | null, Category: IfcLabel | null, Condition: IfcLabel | null, ArithmeticOperator: IfcArithmeticOperatorEnum | null, Components: Handle<IfcAppliedValue>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	AppliedValue: IfcAppliedValueSelect | null;
	UnitBasis: Handle<IfcMeasureWithUnit> | null;
	ApplicableDate: IfcDate | null;
	FixedUntilDate: IfcDate | null;
	Category: IfcLabel | null;
	Condition: IfcLabel | null;
	ArithmeticOperator: IfcArithmeticOperatorEnum | null;
	Components: Handle<IfcAppliedValue>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAppliedValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let AppliedValue;
		if (tape[ptr]) {
		AppliedValue = tape[ptr++];
		} else { AppliedValue = null; ptr++; }
		let UnitBasis;
		if (tape[ptr]) {
		UnitBasis = tape[ptr++];
		} else { UnitBasis = null; ptr++; }
		let ApplicableDate;
		if (tape[ptr]) {
		ApplicableDate = tape[ptr++];
		} else { ApplicableDate = null; ptr++; }
		let FixedUntilDate;
		if (tape[ptr]) {
		FixedUntilDate = tape[ptr++];
		} else { FixedUntilDate = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		let Condition;
		if (tape[ptr]) {
		Condition = tape[ptr++];
		} else { Condition = null; ptr++; }
		let ArithmeticOperator;
		if (tape[ptr]) {
		ArithmeticOperator = new IfcArithmeticOperatorEnum(tape[ptr++]);
		} else { ArithmeticOperator = null; ptr++; }
		let Components;
		if (tape[ptr]) {
		Components = [];
		let Components_index = 0;
		while (Components_index < tape[ptr].length) {
			Components.push(tape[ptr][Components_index++]);
		}
	ptr++;
		} else { Components = null; ptr++; }
		return new IfcAppliedValue(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedValue){
		}
		else{ args.push(EMPTY); }
		if(this.UnitBasis){
		args.push(REF)
		args.push(this.UnitBasis)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableDate){
		args.push(STRING)
		args.push(this.ApplicableDate)
		}
		else{ args.push(EMPTY); }
		if(this.FixedUntilDate){
		args.push(STRING)
		args.push(this.FixedUntilDate)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		if(this.Condition){
		args.push(STRING)
		args.push(this.Condition)
		}
		else{ args.push(EMPTY); }
		if(this.ArithmeticOperator){
		args.push(ENUM);
		args.push(this.ArithmeticOperator.value)
		}
		else{ args.push(EMPTY); }
		if(this.Components){
		args.push(SET_BEGIN)
		this.Components.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcApproval {
	constructor(expressID: number, type: number, Identifier: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, TimeOfApproval: IfcDateTime | null, Status: IfcLabel | null, Level: IfcLabel | null, Qualifier: IfcText | null, RequestingApproval: IfcActorSelect | null, GivingApproval: IfcActorSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Identifier = Identifier;
		this.Name = Name;
		this.Description = Description;
		this.TimeOfApproval = TimeOfApproval;
		this.Status = Status;
		this.Level = Level;
		this.Qualifier = Qualifier;
		this.RequestingApproval = RequestingApproval;
		this.GivingApproval = GivingApproval;
	}
	expressID: number;
	type: number;
	Identifier: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TimeOfApproval: IfcDateTime | null;
	Status: IfcLabel | null;
	Level: IfcLabel | null;
	Qualifier: IfcText | null;
	RequestingApproval: IfcActorSelect | null;
	GivingApproval: IfcActorSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcApproval
	{
		let ptr = 0;
		let Identifier;
		if (tape[ptr]) {
		Identifier = tape[ptr++];
		} else { Identifier = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let TimeOfApproval;
		if (tape[ptr]) {
		TimeOfApproval = tape[ptr++];
		} else { TimeOfApproval = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let Level;
		if (tape[ptr]) {
		Level = tape[ptr++];
		} else { Level = null; ptr++; }
		let Qualifier;
		if (tape[ptr]) {
		Qualifier = tape[ptr++];
		} else { Qualifier = null; ptr++; }
		let RequestingApproval;
		if (tape[ptr]) {
		RequestingApproval = tape[ptr++];
		} else { RequestingApproval = null; ptr++; }
		let GivingApproval;
		if (tape[ptr]) {
		GivingApproval = tape[ptr++];
		} else { GivingApproval = null; ptr++; }
		return new IfcApproval(expressID, type, Identifier, Name, Description, TimeOfApproval, Status, Level, Qualifier, RequestingApproval, GivingApproval);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Identifier){
		args.push(STRING)
		args.push(this.Identifier)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.TimeOfApproval){
		args.push(STRING)
		args.push(this.TimeOfApproval)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.Level){
		args.push(STRING)
		args.push(this.Level)
		}
		else{ args.push(EMPTY); }
		if(this.Qualifier){
		args.push(STRING)
		args.push(this.Qualifier)
		}
		else{ args.push(EMPTY); }
		if(this.RequestingApproval){
		}
		else{ args.push(EMPTY); }
		if(this.GivingApproval){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcApprovalRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingApproval: Handle<IfcApproval> , RelatedApprovals: Handle<IfcApproval>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingApproval = RelatingApproval;
		this.RelatedApprovals = RelatedApprovals;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingApproval: Handle<IfcApproval> ;
	RelatedApprovals: Handle<IfcApproval>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcApprovalRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingApproval;
		if (tape[ptr]) {
		RelatingApproval = tape[ptr++];
		} else { RelatingApproval = null; ptr++; }
		let RelatedApprovals;
		if (tape[ptr]) {
		RelatedApprovals = [];
		let RelatedApprovals_index = 0;
		while (RelatedApprovals_index < tape[ptr].length) {
			RelatedApprovals.push(tape[ptr][RelatedApprovals_index++]);
		}
	ptr++;
		} else { RelatedApprovals = null; ptr++; }
		return new IfcApprovalRelationship(expressID, type, Name, Description, RelatingApproval, RelatedApprovals);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingApproval)
		args.push(SET_BEGIN)
		this.RelatedApprovals.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcArbitraryClosedProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, OuterCurve: Handle<IfcCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	OuterCurve: Handle<IfcCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryClosedProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let OuterCurve;
		if (tape[ptr]) {
		OuterCurve = tape[ptr++];
		} else { OuterCurve = null; ptr++; }
		return new IfcArbitraryClosedProfileDef(expressID, type, ProfileType, ProfileName, OuterCurve);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.OuterCurve)
		return args;
	}
};
export class IfcArbitraryOpenProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Curve: Handle<IfcBoundedCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Curve: Handle<IfcBoundedCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryOpenProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Curve;
		if (tape[ptr]) {
		Curve = tape[ptr++];
		} else { Curve = null; ptr++; }
		return new IfcArbitraryOpenProfileDef(expressID, type, ProfileType, ProfileName, Curve);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Curve)
		return args;
	}
};
export class IfcArbitraryProfileDefWithVoids {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, OuterCurve: Handle<IfcCurve> , InnerCurves: Handle<IfcCurve>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.OuterCurve = OuterCurve;
		this.InnerCurves = InnerCurves;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	OuterCurve: Handle<IfcCurve> ;
	InnerCurves: Handle<IfcCurve>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcArbitraryProfileDefWithVoids
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let OuterCurve;
		if (tape[ptr]) {
		OuterCurve = tape[ptr++];
		} else { OuterCurve = null; ptr++; }
		let InnerCurves;
		if (tape[ptr]) {
		InnerCurves = [];
		let InnerCurves_index = 0;
		while (InnerCurves_index < tape[ptr].length) {
			InnerCurves.push(tape[ptr][InnerCurves_index++]);
		}
	ptr++;
		} else { InnerCurves = null; ptr++; }
		return new IfcArbitraryProfileDefWithVoids(expressID, type, ProfileType, ProfileName, OuterCurve, InnerCurves);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.OuterCurve)
		args.push(SET_BEGIN)
		this.InnerCurves.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcAsset {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, OriginalValue: Handle<IfcCostValue> | null, CurrentValue: Handle<IfcCostValue> | null, TotalReplacementCost: Handle<IfcCostValue> | null, Owner: IfcActorSelect | null, User: IfcActorSelect | null, ResponsiblePerson: Handle<IfcPerson> | null, IncorporationDate: IfcDate | null, DepreciatedValue: Handle<IfcCostValue> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.OriginalValue = OriginalValue;
		this.CurrentValue = CurrentValue;
		this.TotalReplacementCost = TotalReplacementCost;
		this.Owner = Owner;
		this.User = User;
		this.ResponsiblePerson = ResponsiblePerson;
		this.IncorporationDate = IncorporationDate;
		this.DepreciatedValue = DepreciatedValue;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	OriginalValue: Handle<IfcCostValue> | null;
	CurrentValue: Handle<IfcCostValue> | null;
	TotalReplacementCost: Handle<IfcCostValue> | null;
	Owner: IfcActorSelect | null;
	User: IfcActorSelect | null;
	ResponsiblePerson: Handle<IfcPerson> | null;
	IncorporationDate: IfcDate | null;
	DepreciatedValue: Handle<IfcCostValue> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAsset
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let OriginalValue;
		if (tape[ptr]) {
		OriginalValue = tape[ptr++];
		} else { OriginalValue = null; ptr++; }
		let CurrentValue;
		if (tape[ptr]) {
		CurrentValue = tape[ptr++];
		} else { CurrentValue = null; ptr++; }
		let TotalReplacementCost;
		if (tape[ptr]) {
		TotalReplacementCost = tape[ptr++];
		} else { TotalReplacementCost = null; ptr++; }
		let Owner;
		if (tape[ptr]) {
		Owner = tape[ptr++];
		} else { Owner = null; ptr++; }
		let User;
		if (tape[ptr]) {
		User = tape[ptr++];
		} else { User = null; ptr++; }
		let ResponsiblePerson;
		if (tape[ptr]) {
		ResponsiblePerson = tape[ptr++];
		} else { ResponsiblePerson = null; ptr++; }
		let IncorporationDate;
		if (tape[ptr]) {
		IncorporationDate = tape[ptr++];
		} else { IncorporationDate = null; ptr++; }
		let DepreciatedValue;
		if (tape[ptr]) {
		DepreciatedValue = tape[ptr++];
		} else { DepreciatedValue = null; ptr++; }
		return new IfcAsset(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, OriginalValue, CurrentValue, TotalReplacementCost, Owner, User, ResponsiblePerson, IncorporationDate, DepreciatedValue);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.OriginalValue){
		args.push(REF)
		args.push(this.OriginalValue)
		}
		else{ args.push(EMPTY); }
		if(this.CurrentValue){
		args.push(REF)
		args.push(this.CurrentValue)
		}
		else{ args.push(EMPTY); }
		if(this.TotalReplacementCost){
		args.push(REF)
		args.push(this.TotalReplacementCost)
		}
		else{ args.push(EMPTY); }
		if(this.Owner){
		}
		else{ args.push(EMPTY); }
		if(this.User){
		}
		else{ args.push(EMPTY); }
		if(this.ResponsiblePerson){
		args.push(REF)
		args.push(this.ResponsiblePerson)
		}
		else{ args.push(EMPTY); }
		if(this.IncorporationDate){
		args.push(STRING)
		args.push(this.IncorporationDate)
		}
		else{ args.push(EMPTY); }
		if(this.DepreciatedValue){
		args.push(REF)
		args.push(this.DepreciatedValue)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAsymmetricIShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, BottomFlangeWidth: IfcPositiveLengthMeasure , OverallDepth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , BottomFlangeThickness: IfcPositiveLengthMeasure , BottomFlangeFilletRadius: IfcNonNegativeLengthMeasure | null, TopFlangeWidth: IfcPositiveLengthMeasure , TopFlangeThickness: IfcPositiveLengthMeasure | null, TopFlangeFilletRadius: IfcNonNegativeLengthMeasure | null, BottomFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, BottomFlangeSlope: IfcPlaneAngleMeasure | null, TopFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, TopFlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomFlangeWidth = BottomFlangeWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.BottomFlangeThickness = BottomFlangeThickness;
		this.BottomFlangeFilletRadius = BottomFlangeFilletRadius;
		this.TopFlangeWidth = TopFlangeWidth;
		this.TopFlangeThickness = TopFlangeThickness;
		this.TopFlangeFilletRadius = TopFlangeFilletRadius;
		this.BottomFlangeEdgeRadius = BottomFlangeEdgeRadius;
		this.BottomFlangeSlope = BottomFlangeSlope;
		this.TopFlangeEdgeRadius = TopFlangeEdgeRadius;
		this.TopFlangeSlope = TopFlangeSlope;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	BottomFlangeWidth: IfcPositiveLengthMeasure ;
	OverallDepth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	BottomFlangeThickness: IfcPositiveLengthMeasure ;
	BottomFlangeFilletRadius: IfcNonNegativeLengthMeasure | null;
	TopFlangeWidth: IfcPositiveLengthMeasure ;
	TopFlangeThickness: IfcPositiveLengthMeasure | null;
	TopFlangeFilletRadius: IfcNonNegativeLengthMeasure | null;
	BottomFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	BottomFlangeSlope: IfcPlaneAngleMeasure | null;
	TopFlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	TopFlangeSlope: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAsymmetricIShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let BottomFlangeWidth;
		if (tape[ptr]) {
		BottomFlangeWidth = tape[ptr++];
		} else { BottomFlangeWidth = null; ptr++; }
		let OverallDepth;
		if (tape[ptr]) {
		OverallDepth = tape[ptr++];
		} else { OverallDepth = null; ptr++; }
		let WebThickness;
		if (tape[ptr]) {
		WebThickness = tape[ptr++];
		} else { WebThickness = null; ptr++; }
		let BottomFlangeThickness;
		if (tape[ptr]) {
		BottomFlangeThickness = tape[ptr++];
		} else { BottomFlangeThickness = null; ptr++; }
		let BottomFlangeFilletRadius;
		if (tape[ptr]) {
		BottomFlangeFilletRadius = tape[ptr++];
		} else { BottomFlangeFilletRadius = null; ptr++; }
		let TopFlangeWidth;
		if (tape[ptr]) {
		TopFlangeWidth = tape[ptr++];
		} else { TopFlangeWidth = null; ptr++; }
		let TopFlangeThickness;
		if (tape[ptr]) {
		TopFlangeThickness = tape[ptr++];
		} else { TopFlangeThickness = null; ptr++; }
		let TopFlangeFilletRadius;
		if (tape[ptr]) {
		TopFlangeFilletRadius = tape[ptr++];
		} else { TopFlangeFilletRadius = null; ptr++; }
		let BottomFlangeEdgeRadius;
		if (tape[ptr]) {
		BottomFlangeEdgeRadius = tape[ptr++];
		} else { BottomFlangeEdgeRadius = null; ptr++; }
		let BottomFlangeSlope;
		if (tape[ptr]) {
		BottomFlangeSlope = tape[ptr++];
		} else { BottomFlangeSlope = null; ptr++; }
		let TopFlangeEdgeRadius;
		if (tape[ptr]) {
		TopFlangeEdgeRadius = tape[ptr++];
		} else { TopFlangeEdgeRadius = null; ptr++; }
		let TopFlangeSlope;
		if (tape[ptr]) {
		TopFlangeSlope = tape[ptr++];
		} else { TopFlangeSlope = null; ptr++; }
		return new IfcAsymmetricIShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, BottomFlangeWidth, OverallDepth, WebThickness, BottomFlangeThickness, BottomFlangeFilletRadius, TopFlangeWidth, TopFlangeThickness, TopFlangeFilletRadius, BottomFlangeEdgeRadius, BottomFlangeSlope, TopFlangeEdgeRadius, TopFlangeSlope);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.BottomFlangeFilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.TopFlangeThickness){
		}
		else{ args.push(EMPTY); }
		if(this.TopFlangeFilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.BottomFlangeEdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.BottomFlangeSlope){
		args.push(REAL)
		args.push(this.BottomFlangeSlope)
		}
		else{ args.push(EMPTY); }
		if(this.TopFlangeEdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.TopFlangeSlope){
		args.push(REAL)
		args.push(this.TopFlangeSlope)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAudioVisualAppliance {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcAudioVisualApplianceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcAudioVisualApplianceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAudioVisualAppliance
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAudioVisualApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAudioVisualAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAudioVisualApplianceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcAudioVisualApplianceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcAudioVisualApplianceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAudioVisualApplianceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAudioVisualApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcAudioVisualApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcAxis1Placement {
	constructor(expressID: number, type: number, Location: Handle<IfcCartesianPoint> , Axis: Handle<IfcDirection> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Axis = Axis;
	}
	expressID: number;
	type: number;
	Location: Handle<IfcCartesianPoint> ;
	Axis: Handle<IfcDirection> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAxis1Placement
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		return new IfcAxis1Placement(expressID, type, Location, Axis);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Location)
		if(this.Axis){
		args.push(REF)
		args.push(this.Axis)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAxis2Placement2D {
	constructor(expressID: number, type: number, Location: Handle<IfcCartesianPoint> , RefDirection: Handle<IfcDirection> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.RefDirection = RefDirection;
	}
	expressID: number;
	type: number;
	Location: Handle<IfcCartesianPoint> ;
	RefDirection: Handle<IfcDirection> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement2D
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let RefDirection;
		if (tape[ptr]) {
		RefDirection = tape[ptr++];
		} else { RefDirection = null; ptr++; }
		return new IfcAxis2Placement2D(expressID, type, Location, RefDirection);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Location)
		if(this.RefDirection){
		args.push(REF)
		args.push(this.RefDirection)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcAxis2Placement3D {
	constructor(expressID: number, type: number, Location: Handle<IfcCartesianPoint> , Axis: Handle<IfcDirection> | null, RefDirection: Handle<IfcDirection> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Axis = Axis;
		this.RefDirection = RefDirection;
	}
	expressID: number;
	type: number;
	Location: Handle<IfcCartesianPoint> ;
	Axis: Handle<IfcDirection> | null;
	RefDirection: Handle<IfcDirection> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcAxis2Placement3D
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		let RefDirection;
		if (tape[ptr]) {
		RefDirection = tape[ptr++];
		} else { RefDirection = null; ptr++; }
		return new IfcAxis2Placement3D(expressID, type, Location, Axis, RefDirection);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Location)
		if(this.Axis){
		args.push(REF)
		args.push(this.Axis)
		}
		else{ args.push(EMPTY); }
		if(this.RefDirection){
		args.push(REF)
		args.push(this.RefDirection)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBSplineCurve {
	constructor(expressID: number, type: number, Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineCurve
	{
		let ptr = 0;
		let Degree;
		if (tape[ptr]) {
		Degree = tape[ptr++];
		} else { Degree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let CurveForm;
		if (tape[ptr]) {
		CurveForm = new IfcBSplineCurveForm(tape[ptr++]);
		} else { CurveForm = null; ptr++; }
		let ClosedCurve;
		if (tape[ptr]) {
		ClosedCurve = tape[ptr++];
		} else { ClosedCurve = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcBSplineCurve(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.Degree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.CurveForm.value)
		return args;
	}
};
export class IfcBSplineCurveWithKnots {
	constructor(expressID: number, type: number, Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical , KnotMultiplicities: IfcInteger[] , Knots: IfcParameterValue[] , KnotSpec: IfcKnotType )
	{
		this.expressID = expressID;
		this.type = type;
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
	}
	expressID: number;
	type: number;
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	KnotMultiplicities: IfcInteger[] ;
	Knots: IfcParameterValue[] ;
	KnotSpec: IfcKnotType ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineCurveWithKnots
	{
		let ptr = 0;
		let Degree;
		if (tape[ptr]) {
		Degree = tape[ptr++];
		} else { Degree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let CurveForm;
		if (tape[ptr]) {
		CurveForm = new IfcBSplineCurveForm(tape[ptr++]);
		} else { CurveForm = null; ptr++; }
		let ClosedCurve;
		if (tape[ptr]) {
		ClosedCurve = tape[ptr++];
		} else { ClosedCurve = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		let KnotMultiplicities;
		if (tape[ptr]) {
		KnotMultiplicities = [];
		let KnotMultiplicities_index = 0;
		while (KnotMultiplicities_index < tape[ptr].length) {
			KnotMultiplicities.push(tape[ptr][KnotMultiplicities_index++]);
		}
	ptr++;
		} else { KnotMultiplicities = null; ptr++; }
		let Knots;
		if (tape[ptr]) {
		Knots = [];
		let Knots_index = 0;
		while (Knots_index < tape[ptr].length) {
			Knots.push(tape[ptr][Knots_index++]);
		}
	ptr++;
		} else { Knots = null; ptr++; }
		let KnotSpec;
		if (tape[ptr]) {
		KnotSpec = new IfcKnotType(tape[ptr++]);
		} else { KnotSpec = null; ptr++; }
		return new IfcBSplineCurveWithKnots(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.Degree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.CurveForm.value)
		args.push(REAL)
		args.push(...this.KnotMultiplicities)
		args.push(REAL)
		args.push(...this.Knots)
		args.push(ENUM);
		args.push(this.KnotSpec.value)
		return args;
	}
};
export class IfcBSplineSurface {
	constructor(expressID: number, type: number, UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineSurface
	{
		let ptr = 0;
		let UDegree;
		if (tape[ptr]) {
		UDegree = tape[ptr++];
		} else { UDegree = null; ptr++; }
		let VDegree;
		if (tape[ptr]) {
		VDegree = tape[ptr++];
		} else { VDegree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let SurfaceForm;
		if (tape[ptr]) {
		SurfaceForm = new IfcBSplineSurfaceForm(tape[ptr++]);
		} else { SurfaceForm = null; ptr++; }
		let UClosed;
		if (tape[ptr]) {
		UClosed = tape[ptr++];
		} else { UClosed = null; ptr++; }
		let VClosed;
		if (tape[ptr]) {
		VClosed = tape[ptr++];
		} else { VClosed = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcBSplineSurface(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.UDegree)
		args.push(REAL)
		args.push(this.VDegree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.SurfaceForm.value)
		return args;
	}
};
export class IfcBSplineSurfaceWithKnots {
	constructor(expressID: number, type: number, UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical , UMultiplicities: IfcInteger[] , VMultiplicities: IfcInteger[] , UKnots: IfcParameterValue[] , VKnots: IfcParameterValue[] , KnotSpec: IfcKnotType )
	{
		this.expressID = expressID;
		this.type = type;
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
		this.UMultiplicities = UMultiplicities;
		this.VMultiplicities = VMultiplicities;
		this.UKnots = UKnots;
		this.VKnots = VKnots;
		this.KnotSpec = KnotSpec;
	}
	expressID: number;
	type: number;
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	UMultiplicities: IfcInteger[] ;
	VMultiplicities: IfcInteger[] ;
	UKnots: IfcParameterValue[] ;
	VKnots: IfcParameterValue[] ;
	KnotSpec: IfcKnotType ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBSplineSurfaceWithKnots
	{
		let ptr = 0;
		let UDegree;
		if (tape[ptr]) {
		UDegree = tape[ptr++];
		} else { UDegree = null; ptr++; }
		let VDegree;
		if (tape[ptr]) {
		VDegree = tape[ptr++];
		} else { VDegree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let SurfaceForm;
		if (tape[ptr]) {
		SurfaceForm = new IfcBSplineSurfaceForm(tape[ptr++]);
		} else { SurfaceForm = null; ptr++; }
		let UClosed;
		if (tape[ptr]) {
		UClosed = tape[ptr++];
		} else { UClosed = null; ptr++; }
		let VClosed;
		if (tape[ptr]) {
		VClosed = tape[ptr++];
		} else { VClosed = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		let UMultiplicities;
		if (tape[ptr]) {
		UMultiplicities = [];
		let UMultiplicities_index = 0;
		while (UMultiplicities_index < tape[ptr].length) {
			UMultiplicities.push(tape[ptr][UMultiplicities_index++]);
		}
	ptr++;
		} else { UMultiplicities = null; ptr++; }
		let VMultiplicities;
		if (tape[ptr]) {
		VMultiplicities = [];
		let VMultiplicities_index = 0;
		while (VMultiplicities_index < tape[ptr].length) {
			VMultiplicities.push(tape[ptr][VMultiplicities_index++]);
		}
	ptr++;
		} else { VMultiplicities = null; ptr++; }
		let UKnots;
		if (tape[ptr]) {
		UKnots = [];
		let UKnots_index = 0;
		while (UKnots_index < tape[ptr].length) {
			UKnots.push(tape[ptr][UKnots_index++]);
		}
	ptr++;
		} else { UKnots = null; ptr++; }
		let VKnots;
		if (tape[ptr]) {
		VKnots = [];
		let VKnots_index = 0;
		while (VKnots_index < tape[ptr].length) {
			VKnots.push(tape[ptr][VKnots_index++]);
		}
	ptr++;
		} else { VKnots = null; ptr++; }
		let KnotSpec;
		if (tape[ptr]) {
		KnotSpec = new IfcKnotType(tape[ptr++]);
		} else { KnotSpec = null; ptr++; }
		return new IfcBSplineSurfaceWithKnots(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.UDegree)
		args.push(REAL)
		args.push(this.VDegree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.SurfaceForm.value)
		args.push(REAL)
		args.push(...this.UMultiplicities)
		args.push(REAL)
		args.push(...this.VMultiplicities)
		args.push(REAL)
		args.push(...this.UKnots)
		args.push(REAL)
		args.push(...this.VKnots)
		args.push(ENUM);
		args.push(this.KnotSpec.value)
		return args;
	}
};
export class IfcBeam {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBeamTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBeamTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBeam
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBeamTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBeam(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBeamStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBeamTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBeamTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBeamStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBeamTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBeamStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBeamType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBeamTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBeamTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBeamType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBeamTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBeamType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcBearing {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBearingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBearingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBearing
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBearingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBearing(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBearingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBearingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBearingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBearingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBearingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBearingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcBlobTexture {
	constructor(expressID: number, type: number, RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier[] | null, RasterFormat: IfcIdentifier , RasterCode: IfcBinary )
	{
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.RasterFormat = RasterFormat;
		this.RasterCode = RasterCode;
	}
	expressID: number;
	type: number;
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier[] | null;
	RasterFormat: IfcIdentifier ;
	RasterCode: IfcBinary ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBlobTexture
	{
		let ptr = 0;
		let RepeatS;
		if (tape[ptr]) {
		RepeatS = tape[ptr++];
		} else { RepeatS = null; ptr++; }
		let RepeatT;
		if (tape[ptr]) {
		RepeatT = tape[ptr++];
		} else { RepeatT = null; ptr++; }
		let Mode;
		if (tape[ptr]) {
		Mode = tape[ptr++];
		} else { Mode = null; ptr++; }
		let TextureTransform;
		if (tape[ptr]) {
		TextureTransform = tape[ptr++];
		} else { TextureTransform = null; ptr++; }
		let Parameter;
		if (tape[ptr]) {
		Parameter = [];
		let Parameter_index = 0;
		while (Parameter_index < tape[ptr].length) {
			Parameter.push(tape[ptr][Parameter_index++]);
		}
	ptr++;
		} else { Parameter = null; ptr++; }
		let RasterFormat;
		if (tape[ptr]) {
		RasterFormat = tape[ptr++];
		} else { RasterFormat = null; ptr++; }
		let RasterCode;
		if (tape[ptr]) {
		RasterCode = tape[ptr++];
		} else { RasterCode = null; ptr++; }
		return new IfcBlobTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, RasterFormat, RasterCode);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Mode){
		args.push(STRING)
		args.push(this.Mode)
		}
		else{ args.push(EMPTY); }
		if(this.TextureTransform){
		args.push(REF)
		args.push(this.TextureTransform)
		}
		else{ args.push(EMPTY); }
		if(this.Parameter){
		args.push(STRING)
		args.push(...this.Parameter)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.RasterFormat)
		args.push(REAL)
		args.push(this.RasterCode)
		return args;
	}
};
export class IfcBlock {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , XLength: IfcPositiveLengthMeasure , YLength: IfcPositiveLengthMeasure , ZLength: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.XLength = XLength;
		this.YLength = YLength;
		this.ZLength = ZLength;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	XLength: IfcPositiveLengthMeasure ;
	YLength: IfcPositiveLengthMeasure ;
	ZLength: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBlock
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let XLength;
		if (tape[ptr]) {
		XLength = tape[ptr++];
		} else { XLength = null; ptr++; }
		let YLength;
		if (tape[ptr]) {
		YLength = tape[ptr++];
		} else { YLength = null; ptr++; }
		let ZLength;
		if (tape[ptr]) {
		ZLength = tape[ptr++];
		} else { ZLength = null; ptr++; }
		return new IfcBlock(expressID, type, Position, XLength, YLength, ZLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcBoiler {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBoilerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBoilerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoiler
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBoilerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBoiler(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoilerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBoilerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBoilerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoilerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBoilerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBoilerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcBooleanClippingResult {
	constructor(expressID: number, type: number, Operator: IfcBooleanOperator , FirstOperand: IfcBooleanOperand , SecondOperand: IfcBooleanOperand )
	{
		this.expressID = expressID;
		this.type = type;
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	expressID: number;
	type: number;
	Operator: IfcBooleanOperator ;
	FirstOperand: IfcBooleanOperand ;
	SecondOperand: IfcBooleanOperand ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanClippingResult
	{
		let ptr = 0;
		let Operator;
		if (tape[ptr]) {
		Operator = new IfcBooleanOperator(tape[ptr++]);
		} else { Operator = null; ptr++; }
		let FirstOperand;
		if (tape[ptr]) {
		FirstOperand = tape[ptr++];
		} else { FirstOperand = null; ptr++; }
		let SecondOperand;
		if (tape[ptr]) {
		SecondOperand = tape[ptr++];
		} else { SecondOperand = null; ptr++; }
		return new IfcBooleanClippingResult(expressID, type, Operator, FirstOperand, SecondOperand);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.Operator.value)
		return args;
	}
};
export class IfcBooleanResult {
	constructor(expressID: number, type: number, Operator: IfcBooleanOperator , FirstOperand: IfcBooleanOperand , SecondOperand: IfcBooleanOperand )
	{
		this.expressID = expressID;
		this.type = type;
		this.Operator = Operator;
		this.FirstOperand = FirstOperand;
		this.SecondOperand = SecondOperand;
	}
	expressID: number;
	type: number;
	Operator: IfcBooleanOperator ;
	FirstOperand: IfcBooleanOperand ;
	SecondOperand: IfcBooleanOperand ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBooleanResult
	{
		let ptr = 0;
		let Operator;
		if (tape[ptr]) {
		Operator = new IfcBooleanOperator(tape[ptr++]);
		} else { Operator = null; ptr++; }
		let FirstOperand;
		if (tape[ptr]) {
		FirstOperand = tape[ptr++];
		} else { FirstOperand = null; ptr++; }
		let SecondOperand;
		if (tape[ptr]) {
		SecondOperand = tape[ptr++];
		} else { SecondOperand = null; ptr++; }
		return new IfcBooleanResult(expressID, type, Operator, FirstOperand, SecondOperand);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.Operator.value)
		return args;
	}
};
export class IfcBoundaryCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcBoundaryCondition(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoundaryCurve {
	constructor(expressID: number, type: number, Segments: Handle<IfcCompositeCurveSegment>[] , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Segments: Handle<IfcCompositeCurveSegment>[] ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryCurve
	{
		let ptr = 0;
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcBoundaryCurve(expressID, type, Segments, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcBoundaryEdgeCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TranslationalStiffnessByLengthX: IfcModulusOfTranslationalSubgradeReactionSelect | null, TranslationalStiffnessByLengthY: IfcModulusOfTranslationalSubgradeReactionSelect | null, TranslationalStiffnessByLengthZ: IfcModulusOfTranslationalSubgradeReactionSelect | null, RotationalStiffnessByLengthX: IfcModulusOfRotationalSubgradeReactionSelect | null, RotationalStiffnessByLengthY: IfcModulusOfRotationalSubgradeReactionSelect | null, RotationalStiffnessByLengthZ: IfcModulusOfRotationalSubgradeReactionSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessByLengthX = TranslationalStiffnessByLengthX;
		this.TranslationalStiffnessByLengthY = TranslationalStiffnessByLengthY;
		this.TranslationalStiffnessByLengthZ = TranslationalStiffnessByLengthZ;
		this.RotationalStiffnessByLengthX = RotationalStiffnessByLengthX;
		this.RotationalStiffnessByLengthY = RotationalStiffnessByLengthY;
		this.RotationalStiffnessByLengthZ = RotationalStiffnessByLengthZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TranslationalStiffnessByLengthX: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	TranslationalStiffnessByLengthY: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	TranslationalStiffnessByLengthZ: IfcModulusOfTranslationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthX: IfcModulusOfRotationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthY: IfcModulusOfRotationalSubgradeReactionSelect | null;
	RotationalStiffnessByLengthZ: IfcModulusOfRotationalSubgradeReactionSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryEdgeCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TranslationalStiffnessByLengthX;
		if (tape[ptr]) {
		TranslationalStiffnessByLengthX = tape[ptr++];
		} else { TranslationalStiffnessByLengthX = null; ptr++; }
		let TranslationalStiffnessByLengthY;
		if (tape[ptr]) {
		TranslationalStiffnessByLengthY = tape[ptr++];
		} else { TranslationalStiffnessByLengthY = null; ptr++; }
		let TranslationalStiffnessByLengthZ;
		if (tape[ptr]) {
		TranslationalStiffnessByLengthZ = tape[ptr++];
		} else { TranslationalStiffnessByLengthZ = null; ptr++; }
		let RotationalStiffnessByLengthX;
		if (tape[ptr]) {
		RotationalStiffnessByLengthX = tape[ptr++];
		} else { RotationalStiffnessByLengthX = null; ptr++; }
		let RotationalStiffnessByLengthY;
		if (tape[ptr]) {
		RotationalStiffnessByLengthY = tape[ptr++];
		} else { RotationalStiffnessByLengthY = null; ptr++; }
		let RotationalStiffnessByLengthZ;
		if (tape[ptr]) {
		RotationalStiffnessByLengthZ = tape[ptr++];
		} else { RotationalStiffnessByLengthZ = null; ptr++; }
		return new IfcBoundaryEdgeCondition(expressID, type, Name, TranslationalStiffnessByLengthX, TranslationalStiffnessByLengthY, TranslationalStiffnessByLengthZ, RotationalStiffnessByLengthX, RotationalStiffnessByLengthY, RotationalStiffnessByLengthZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByLengthX){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByLengthY){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByLengthZ){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessByLengthX){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessByLengthY){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessByLengthZ){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoundaryFaceCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TranslationalStiffnessByAreaX: IfcModulusOfSubgradeReactionSelect | null, TranslationalStiffnessByAreaY: IfcModulusOfSubgradeReactionSelect | null, TranslationalStiffnessByAreaZ: IfcModulusOfSubgradeReactionSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessByAreaX = TranslationalStiffnessByAreaX;
		this.TranslationalStiffnessByAreaY = TranslationalStiffnessByAreaY;
		this.TranslationalStiffnessByAreaZ = TranslationalStiffnessByAreaZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TranslationalStiffnessByAreaX: IfcModulusOfSubgradeReactionSelect | null;
	TranslationalStiffnessByAreaY: IfcModulusOfSubgradeReactionSelect | null;
	TranslationalStiffnessByAreaZ: IfcModulusOfSubgradeReactionSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryFaceCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TranslationalStiffnessByAreaX;
		if (tape[ptr]) {
		TranslationalStiffnessByAreaX = tape[ptr++];
		} else { TranslationalStiffnessByAreaX = null; ptr++; }
		let TranslationalStiffnessByAreaY;
		if (tape[ptr]) {
		TranslationalStiffnessByAreaY = tape[ptr++];
		} else { TranslationalStiffnessByAreaY = null; ptr++; }
		let TranslationalStiffnessByAreaZ;
		if (tape[ptr]) {
		TranslationalStiffnessByAreaZ = tape[ptr++];
		} else { TranslationalStiffnessByAreaZ = null; ptr++; }
		return new IfcBoundaryFaceCondition(expressID, type, Name, TranslationalStiffnessByAreaX, TranslationalStiffnessByAreaY, TranslationalStiffnessByAreaZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByAreaX){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByAreaY){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessByAreaZ){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoundaryNodeCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null, RotationalStiffnessX: IfcRotationalStiffnessSelect | null, RotationalStiffnessY: IfcRotationalStiffnessSelect | null, RotationalStiffnessZ: IfcRotationalStiffnessSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null;
	RotationalStiffnessX: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessY: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessZ: IfcRotationalStiffnessSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TranslationalStiffnessX;
		if (tape[ptr]) {
		TranslationalStiffnessX = tape[ptr++];
		} else { TranslationalStiffnessX = null; ptr++; }
		let TranslationalStiffnessY;
		if (tape[ptr]) {
		TranslationalStiffnessY = tape[ptr++];
		} else { TranslationalStiffnessY = null; ptr++; }
		let TranslationalStiffnessZ;
		if (tape[ptr]) {
		TranslationalStiffnessZ = tape[ptr++];
		} else { TranslationalStiffnessZ = null; ptr++; }
		let RotationalStiffnessX;
		if (tape[ptr]) {
		RotationalStiffnessX = tape[ptr++];
		} else { RotationalStiffnessX = null; ptr++; }
		let RotationalStiffnessY;
		if (tape[ptr]) {
		RotationalStiffnessY = tape[ptr++];
		} else { RotationalStiffnessY = null; ptr++; }
		let RotationalStiffnessZ;
		if (tape[ptr]) {
		RotationalStiffnessZ = tape[ptr++];
		} else { RotationalStiffnessZ = null; ptr++; }
		return new IfcBoundaryNodeCondition(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessX){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessY){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessZ){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessX){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessY){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessZ){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoundaryNodeConditionWarping {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null, TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null, RotationalStiffnessX: IfcRotationalStiffnessSelect | null, RotationalStiffnessY: IfcRotationalStiffnessSelect | null, RotationalStiffnessZ: IfcRotationalStiffnessSelect | null, WarpingStiffness: IfcWarpingStiffnessSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TranslationalStiffnessX = TranslationalStiffnessX;
		this.TranslationalStiffnessY = TranslationalStiffnessY;
		this.TranslationalStiffnessZ = TranslationalStiffnessZ;
		this.RotationalStiffnessX = RotationalStiffnessX;
		this.RotationalStiffnessY = RotationalStiffnessY;
		this.RotationalStiffnessZ = RotationalStiffnessZ;
		this.WarpingStiffness = WarpingStiffness;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TranslationalStiffnessX: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessY: IfcTranslationalStiffnessSelect | null;
	TranslationalStiffnessZ: IfcTranslationalStiffnessSelect | null;
	RotationalStiffnessX: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessY: IfcRotationalStiffnessSelect | null;
	RotationalStiffnessZ: IfcRotationalStiffnessSelect | null;
	WarpingStiffness: IfcWarpingStiffnessSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundaryNodeConditionWarping
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TranslationalStiffnessX;
		if (tape[ptr]) {
		TranslationalStiffnessX = tape[ptr++];
		} else { TranslationalStiffnessX = null; ptr++; }
		let TranslationalStiffnessY;
		if (tape[ptr]) {
		TranslationalStiffnessY = tape[ptr++];
		} else { TranslationalStiffnessY = null; ptr++; }
		let TranslationalStiffnessZ;
		if (tape[ptr]) {
		TranslationalStiffnessZ = tape[ptr++];
		} else { TranslationalStiffnessZ = null; ptr++; }
		let RotationalStiffnessX;
		if (tape[ptr]) {
		RotationalStiffnessX = tape[ptr++];
		} else { RotationalStiffnessX = null; ptr++; }
		let RotationalStiffnessY;
		if (tape[ptr]) {
		RotationalStiffnessY = tape[ptr++];
		} else { RotationalStiffnessY = null; ptr++; }
		let RotationalStiffnessZ;
		if (tape[ptr]) {
		RotationalStiffnessZ = tape[ptr++];
		} else { RotationalStiffnessZ = null; ptr++; }
		let WarpingStiffness;
		if (tape[ptr]) {
		WarpingStiffness = tape[ptr++];
		} else { WarpingStiffness = null; ptr++; }
		return new IfcBoundaryNodeConditionWarping(expressID, type, Name, TranslationalStiffnessX, TranslationalStiffnessY, TranslationalStiffnessZ, RotationalStiffnessX, RotationalStiffnessY, RotationalStiffnessZ, WarpingStiffness);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessX){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessY){
		}
		else{ args.push(EMPTY); }
		if(this.TranslationalStiffnessZ){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessX){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessY){
		}
		else{ args.push(EMPTY); }
		if(this.RotationalStiffnessZ){
		}
		else{ args.push(EMPTY); }
		if(this.WarpingStiffness){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBoundedCurve {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedCurve
	{
		let ptr = 0;
		return new IfcBoundedCurve(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcBoundedSurface {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundedSurface
	{
		let ptr = 0;
		return new IfcBoundedSurface(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcBoundingBox {
	constructor(expressID: number, type: number, Corner: Handle<IfcCartesianPoint> , XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , ZDim: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Corner = Corner;
		this.XDim = XDim;
		this.YDim = YDim;
		this.ZDim = ZDim;
	}
	expressID: number;
	type: number;
	Corner: Handle<IfcCartesianPoint> ;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	ZDim: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoundingBox
	{
		let ptr = 0;
		let Corner;
		if (tape[ptr]) {
		Corner = tape[ptr++];
		} else { Corner = null; ptr++; }
		let XDim;
		if (tape[ptr]) {
		XDim = tape[ptr++];
		} else { XDim = null; ptr++; }
		let YDim;
		if (tape[ptr]) {
		YDim = tape[ptr++];
		} else { YDim = null; ptr++; }
		let ZDim;
		if (tape[ptr]) {
		ZDim = tape[ptr++];
		} else { ZDim = null; ptr++; }
		return new IfcBoundingBox(expressID, type, Corner, XDim, YDim, ZDim);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Corner)
		return args;
	}
};
export class IfcBoxedHalfSpace {
	constructor(expressID: number, type: number, BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean , Enclosure: Handle<IfcBoundingBox> )
	{
		this.expressID = expressID;
		this.type = type;
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
		this.Enclosure = Enclosure;
	}
	expressID: number;
	type: number;
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	Enclosure: Handle<IfcBoundingBox> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBoxedHalfSpace
	{
		let ptr = 0;
		let BaseSurface;
		if (tape[ptr]) {
		BaseSurface = tape[ptr++];
		} else { BaseSurface = null; ptr++; }
		let AgreementFlag;
		if (tape[ptr]) {
		AgreementFlag = tape[ptr++];
		} else { AgreementFlag = null; ptr++; }
		let Enclosure;
		if (tape[ptr]) {
		Enclosure = tape[ptr++];
		} else { Enclosure = null; ptr++; }
		return new IfcBoxedHalfSpace(expressID, type, BaseSurface, AgreementFlag, Enclosure);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BaseSurface)
		args.push(REF)
		args.push(this.Enclosure)
		return args;
	}
};
export class IfcBridge {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcBridgeTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcBridgeTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBridge
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBridgeTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBridge(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBridgePart {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcBridgePartTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcBridgePartTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBridgePart
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBridgePartTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBridgePart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuilding {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, ElevationOfRefHeight: IfcLengthMeasure | null, ElevationOfTerrain: IfcLengthMeasure | null, BuildingAddress: Handle<IfcPostalAddress> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.ElevationOfRefHeight = ElevationOfRefHeight;
		this.ElevationOfTerrain = ElevationOfTerrain;
		this.BuildingAddress = BuildingAddress;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	ElevationOfRefHeight: IfcLengthMeasure | null;
	ElevationOfTerrain: IfcLengthMeasure | null;
	BuildingAddress: Handle<IfcPostalAddress> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuilding
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let ElevationOfRefHeight;
		if (tape[ptr]) {
		ElevationOfRefHeight = tape[ptr++];
		} else { ElevationOfRefHeight = null; ptr++; }
		let ElevationOfTerrain;
		if (tape[ptr]) {
		ElevationOfTerrain = tape[ptr++];
		} else { ElevationOfTerrain = null; ptr++; }
		let BuildingAddress;
		if (tape[ptr]) {
		BuildingAddress = tape[ptr++];
		} else { BuildingAddress = null; ptr++; }
		return new IfcBuilding(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, ElevationOfRefHeight, ElevationOfTerrain, BuildingAddress);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ElevationOfRefHeight){
		args.push(REAL)
		args.push(this.ElevationOfRefHeight)
		}
		else{ args.push(EMPTY); }
		if(this.ElevationOfTerrain){
		args.push(REAL)
		args.push(this.ElevationOfTerrain)
		}
		else{ args.push(EMPTY); }
		if(this.BuildingAddress){
		args.push(REF)
		args.push(this.BuildingAddress)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcBuildingElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingElementPart {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBuildingElementPartTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBuildingElementPartTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementPart
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBuildingElementPartTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBuildingElementPart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingElementPartType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBuildingElementPartTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBuildingElementPartTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementPartType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBuildingElementPartTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBuildingElementPartType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcBuildingElementProxy {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBuildingElementProxyTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBuildingElementProxyTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxy
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBuildingElementProxyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBuildingElementProxy(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingElementProxyType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBuildingElementProxyTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBuildingElementProxyTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementProxyType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBuildingElementProxyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBuildingElementProxyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcBuildingElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcBuildingElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingStorey {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, Elevation: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.Elevation = Elevation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	Elevation: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingStorey
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let Elevation;
		if (tape[ptr]) {
		Elevation = tape[ptr++];
		} else { Elevation = null; ptr++; }
		return new IfcBuildingStorey(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, Elevation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Elevation){
		args.push(REAL)
		args.push(this.Elevation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBuildingSystem {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcBuildingSystemTypeEnum | null, LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcBuildingSystemTypeEnum | null;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBuildingSystem
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBuildingSystemTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcBuildingSystem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBurner {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcBurnerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcBurnerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBurner
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBurnerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBurner(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcBurnerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcBurnerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcBurnerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcBurnerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcBurnerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcBurnerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , Width: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure , Girth: IfcPositiveLengthMeasure , InternalFilletRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.WallThickness = WallThickness;
		this.Girth = Girth;
		this.InternalFilletRadius = InternalFilletRadius;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	Width: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	Girth: IfcPositiveLengthMeasure ;
	InternalFilletRadius: IfcNonNegativeLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let Width;
		if (tape[ptr]) {
		Width = tape[ptr++];
		} else { Width = null; ptr++; }
		let WallThickness;
		if (tape[ptr]) {
		WallThickness = tape[ptr++];
		} else { WallThickness = null; ptr++; }
		let Girth;
		if (tape[ptr]) {
		Girth = tape[ptr++];
		} else { Girth = null; ptr++; }
		let InternalFilletRadius;
		if (tape[ptr]) {
		InternalFilletRadius = tape[ptr++];
		} else { InternalFilletRadius = null; ptr++; }
		return new IfcCShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, Width, WallThickness, Girth, InternalFilletRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.InternalFilletRadius){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCableCarrierFitting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableCarrierFittingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableCarrierFittingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierFitting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableCarrierFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableCarrierFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCableCarrierFittingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableCarrierFittingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableCarrierFittingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierFittingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableCarrierFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableCarrierFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCableCarrierSegment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableCarrierSegmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableCarrierSegmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierSegment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableCarrierSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableCarrierSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCableCarrierSegmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableCarrierSegmentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableCarrierSegmentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableCarrierSegmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableCarrierSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableCarrierSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCableFitting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableFittingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableFittingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableFitting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCableFittingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableFittingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableFittingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableFittingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCableSegment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCableSegmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCableSegmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableSegment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCableSegmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCableSegmentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCableSegmentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCableSegmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCableSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCableSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCaissonFoundation {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCaissonFoundationTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCaissonFoundationTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCaissonFoundation
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCaissonFoundationTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCaissonFoundation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCaissonFoundationType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCaissonFoundationTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCaissonFoundationTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCaissonFoundationType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCaissonFoundationTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCaissonFoundationType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCartesianPoint {
	constructor(expressID: number, type: number, Coordinates: IfcLengthMeasure[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
	}
	expressID: number;
	type: number;
	Coordinates: IfcLengthMeasure[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPoint
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = [];
		let Coordinates_index = 0;
		while (Coordinates_index < tape[ptr].length) {
			Coordinates.push(tape[ptr][Coordinates_index++]);
		}
	ptr++;
		} else { Coordinates = null; ptr++; }
		return new IfcCartesianPoint(expressID, type, Coordinates);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.Coordinates)
		return args;
	}
};
export class IfcCartesianPointList {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList
	{
		let ptr = 0;
		return new IfcCartesianPointList(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcCartesianPointList2D {
	constructor(expressID: number, type: number, CoordList: IfcLengthMeasure[] , TagList: IfcLabel[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	expressID: number;
	type: number;
	CoordList: IfcLengthMeasure[] ;
	TagList: IfcLabel[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList2D
	{
		let ptr = 0;
		let CoordList;
		if (tape[ptr]) {
		CoordList = [];
		let CoordList_index = 0;
		while (CoordList_index < tape[ptr].length) {
			CoordList.push(tape[ptr][CoordList_index++]);
		}
	ptr++;
		} else { CoordList = null; ptr++; }
		let TagList;
		if (tape[ptr]) {
		TagList = [];
		let TagList_index = 0;
		while (TagList_index < tape[ptr].length) {
			TagList.push(tape[ptr][TagList_index++]);
		}
	ptr++;
		} else { TagList = null; ptr++; }
		return new IfcCartesianPointList2D(expressID, type, CoordList, TagList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.CoordList)
		if(this.TagList){
		args.push(STRING)
		args.push(...this.TagList)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianPointList3D {
	constructor(expressID: number, type: number, CoordList: IfcLengthMeasure[] , TagList: IfcLabel[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.CoordList = CoordList;
		this.TagList = TagList;
	}
	expressID: number;
	type: number;
	CoordList: IfcLengthMeasure[] ;
	TagList: IfcLabel[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianPointList3D
	{
		let ptr = 0;
		let CoordList;
		if (tape[ptr]) {
		CoordList = [];
		let CoordList_index = 0;
		while (CoordList_index < tape[ptr].length) {
			CoordList.push(tape[ptr][CoordList_index++]);
		}
	ptr++;
		} else { CoordList = null; ptr++; }
		let TagList;
		if (tape[ptr]) {
		TagList = [];
		let TagList_index = 0;
		while (TagList_index < tape[ptr].length) {
			TagList.push(tape[ptr][TagList_index++]);
		}
	ptr++;
		} else { TagList = null; ptr++; }
		return new IfcCartesianPointList3D(expressID, type, CoordList, TagList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.CoordList)
		if(this.TagList){
		args.push(STRING)
		args.push(...this.TagList)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianTransformationOperator {
	constructor(expressID: number, type: number, Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	expressID: number;
	type: number;
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator
	{
		let ptr = 0;
		let Axis1;
		if (tape[ptr]) {
		Axis1 = tape[ptr++];
		} else { Axis1 = null; ptr++; }
		let Axis2;
		if (tape[ptr]) {
		Axis2 = tape[ptr++];
		} else { Axis2 = null; ptr++; }
		let LocalOrigin;
		if (tape[ptr]) {
		LocalOrigin = tape[ptr++];
		} else { LocalOrigin = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		return new IfcCartesianTransformationOperator(expressID, type, Axis1, Axis2, LocalOrigin, Scale);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Axis1){
		args.push(REF)
		args.push(this.Axis1)
		}
		else{ args.push(EMPTY); }
		if(this.Axis2){
		args.push(REF)
		args.push(this.Axis2)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LocalOrigin)
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianTransformationOperator2D {
	constructor(expressID: number, type: number, Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
	}
	expressID: number;
	type: number;
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2D
	{
		let ptr = 0;
		let Axis1;
		if (tape[ptr]) {
		Axis1 = tape[ptr++];
		} else { Axis1 = null; ptr++; }
		let Axis2;
		if (tape[ptr]) {
		Axis2 = tape[ptr++];
		} else { Axis2 = null; ptr++; }
		let LocalOrigin;
		if (tape[ptr]) {
		LocalOrigin = tape[ptr++];
		} else { LocalOrigin = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		return new IfcCartesianTransformationOperator2D(expressID, type, Axis1, Axis2, LocalOrigin, Scale);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Axis1){
		args.push(REF)
		args.push(this.Axis1)
		}
		else{ args.push(EMPTY); }
		if(this.Axis2){
		args.push(REF)
		args.push(this.Axis2)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LocalOrigin)
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianTransformationOperator2DnonUniform {
	constructor(expressID: number, type: number, Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Scale2: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Scale2 = Scale2;
	}
	expressID: number;
	type: number;
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Scale2: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator2DnonUniform
	{
		let ptr = 0;
		let Axis1;
		if (tape[ptr]) {
		Axis1 = tape[ptr++];
		} else { Axis1 = null; ptr++; }
		let Axis2;
		if (tape[ptr]) {
		Axis2 = tape[ptr++];
		} else { Axis2 = null; ptr++; }
		let LocalOrigin;
		if (tape[ptr]) {
		LocalOrigin = tape[ptr++];
		} else { LocalOrigin = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		let Scale2;
		if (tape[ptr]) {
		Scale2 = tape[ptr++];
		} else { Scale2 = null; ptr++; }
		return new IfcCartesianTransformationOperator2DnonUniform(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Scale2);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Axis1){
		args.push(REF)
		args.push(this.Axis1)
		}
		else{ args.push(EMPTY); }
		if(this.Axis2){
		args.push(REF)
		args.push(this.Axis2)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LocalOrigin)
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		if(this.Scale2){
		args.push(REAL)
		args.push(this.Scale2)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianTransformationOperator3D {
	constructor(expressID: number, type: number, Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Axis3: Handle<IfcDirection> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
	}
	expressID: number;
	type: number;
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Axis3: Handle<IfcDirection> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3D
	{
		let ptr = 0;
		let Axis1;
		if (tape[ptr]) {
		Axis1 = tape[ptr++];
		} else { Axis1 = null; ptr++; }
		let Axis2;
		if (tape[ptr]) {
		Axis2 = tape[ptr++];
		} else { Axis2 = null; ptr++; }
		let LocalOrigin;
		if (tape[ptr]) {
		LocalOrigin = tape[ptr++];
		} else { LocalOrigin = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		let Axis3;
		if (tape[ptr]) {
		Axis3 = tape[ptr++];
		} else { Axis3 = null; ptr++; }
		return new IfcCartesianTransformationOperator3D(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Axis1){
		args.push(REF)
		args.push(this.Axis1)
		}
		else{ args.push(EMPTY); }
		if(this.Axis2){
		args.push(REF)
		args.push(this.Axis2)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LocalOrigin)
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		if(this.Axis3){
		args.push(REF)
		args.push(this.Axis3)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCartesianTransformationOperator3DnonUniform {
	constructor(expressID: number, type: number, Axis1: Handle<IfcDirection> | null, Axis2: Handle<IfcDirection> | null, LocalOrigin: Handle<IfcCartesianPoint> , Scale: IfcReal | null, Axis3: Handle<IfcDirection> | null, Scale2: IfcReal | null, Scale3: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Axis1 = Axis1;
		this.Axis2 = Axis2;
		this.LocalOrigin = LocalOrigin;
		this.Scale = Scale;
		this.Axis3 = Axis3;
		this.Scale2 = Scale2;
		this.Scale3 = Scale3;
	}
	expressID: number;
	type: number;
	Axis1: Handle<IfcDirection> | null;
	Axis2: Handle<IfcDirection> | null;
	LocalOrigin: Handle<IfcCartesianPoint> ;
	Scale: IfcReal | null;
	Axis3: Handle<IfcDirection> | null;
	Scale2: IfcReal | null;
	Scale3: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCartesianTransformationOperator3DnonUniform
	{
		let ptr = 0;
		let Axis1;
		if (tape[ptr]) {
		Axis1 = tape[ptr++];
		} else { Axis1 = null; ptr++; }
		let Axis2;
		if (tape[ptr]) {
		Axis2 = tape[ptr++];
		} else { Axis2 = null; ptr++; }
		let LocalOrigin;
		if (tape[ptr]) {
		LocalOrigin = tape[ptr++];
		} else { LocalOrigin = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		let Axis3;
		if (tape[ptr]) {
		Axis3 = tape[ptr++];
		} else { Axis3 = null; ptr++; }
		let Scale2;
		if (tape[ptr]) {
		Scale2 = tape[ptr++];
		} else { Scale2 = null; ptr++; }
		let Scale3;
		if (tape[ptr]) {
		Scale3 = tape[ptr++];
		} else { Scale3 = null; ptr++; }
		return new IfcCartesianTransformationOperator3DnonUniform(expressID, type, Axis1, Axis2, LocalOrigin, Scale, Axis3, Scale2, Scale3);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Axis1){
		args.push(REF)
		args.push(this.Axis1)
		}
		else{ args.push(EMPTY); }
		if(this.Axis2){
		args.push(REF)
		args.push(this.Axis2)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LocalOrigin)
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		if(this.Axis3){
		args.push(REF)
		args.push(this.Axis3)
		}
		else{ args.push(EMPTY); }
		if(this.Scale2){
		args.push(REAL)
		args.push(this.Scale2)
		}
		else{ args.push(EMPTY); }
		if(this.Scale3){
		args.push(REAL)
		args.push(this.Scale3)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCenterLineProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Curve: Handle<IfcBoundedCurve> , Thickness: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Curve = Curve;
		this.Thickness = Thickness;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Curve: Handle<IfcBoundedCurve> ;
	Thickness: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCenterLineProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Curve;
		if (tape[ptr]) {
		Curve = tape[ptr++];
		} else { Curve = null; ptr++; }
		let Thickness;
		if (tape[ptr]) {
		Thickness = tape[ptr++];
		} else { Thickness = null; ptr++; }
		return new IfcCenterLineProfileDef(expressID, type, ProfileType, ProfileName, Curve, Thickness);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Curve)
		return args;
	}
};
export class IfcChiller {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcChillerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcChillerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcChiller
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcChillerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcChiller(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcChillerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcChillerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcChillerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcChillerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcChillerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcChillerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcChimney {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcChimneyTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcChimneyTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcChimney
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcChimneyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcChimney(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcChimneyType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcChimneyTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcChimneyTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcChimneyType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcChimneyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcChimneyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCircle {
	constructor(expressID: number, type: number, Position: IfcAxis2Placement , Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	Position: IfcAxis2Placement ;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCircle
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcCircle(expressID, type, Position, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcCircleHollowProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Radius: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
		this.WallThickness = WallThickness;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Radius: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCircleHollowProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let WallThickness;
		if (tape[ptr]) {
		WallThickness = tape[ptr++];
		} else { WallThickness = null; ptr++; }
		return new IfcCircleHollowProfileDef(expressID, type, ProfileType, ProfileName, Position, Radius, WallThickness);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCircleProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCircleProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcCircleProfileDef(expressID, type, ProfileType, ProfileName, Position, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCircularArcSegment2D {
	constructor(expressID: number, type: number, StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure , Radius: IfcPositiveLengthMeasure , IsCCW: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
		this.Radius = Radius;
		this.IsCCW = IsCCW;
	}
	expressID: number;
	type: number;
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	IsCCW: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCircularArcSegment2D
	{
		let ptr = 0;
		let StartPoint;
		if (tape[ptr]) {
		StartPoint = tape[ptr++];
		} else { StartPoint = null; ptr++; }
		let StartDirection;
		if (tape[ptr]) {
		StartDirection = tape[ptr++];
		} else { StartDirection = null; ptr++; }
		let SegmentLength;
		if (tape[ptr]) {
		SegmentLength = tape[ptr++];
		} else { SegmentLength = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let IsCCW;
		if (tape[ptr]) {
		IsCCW = tape[ptr++];
		} else { IsCCW = null; ptr++; }
		return new IfcCircularArcSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength, Radius, IsCCW);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.StartPoint)
		args.push(REAL)
		args.push(this.StartDirection)
		return args;
	}
};
export class IfcCivilElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCivilElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcCivilElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCivilElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCivilElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcCivilElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcClassification {
	constructor(expressID: number, type: number, Source: IfcLabel | null, Edition: IfcLabel | null, EditionDate: IfcDate | null, Name: IfcLabel , Description: IfcText | null, Location: IfcURIReference | null, ReferenceTokens: IfcIdentifier[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Source = Source;
		this.Edition = Edition;
		this.EditionDate = EditionDate;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.ReferenceTokens = ReferenceTokens;
	}
	expressID: number;
	type: number;
	Source: IfcLabel | null;
	Edition: IfcLabel | null;
	EditionDate: IfcDate | null;
	Name: IfcLabel ;
	Description: IfcText | null;
	Location: IfcURIReference | null;
	ReferenceTokens: IfcIdentifier[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcClassification
	{
		let ptr = 0;
		let Source;
		if (tape[ptr]) {
		Source = tape[ptr++];
		} else { Source = null; ptr++; }
		let Edition;
		if (tape[ptr]) {
		Edition = tape[ptr++];
		} else { Edition = null; ptr++; }
		let EditionDate;
		if (tape[ptr]) {
		EditionDate = tape[ptr++];
		} else { EditionDate = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let ReferenceTokens;
		if (tape[ptr]) {
		ReferenceTokens = [];
		let ReferenceTokens_index = 0;
		while (ReferenceTokens_index < tape[ptr].length) {
			ReferenceTokens.push(tape[ptr][ReferenceTokens_index++]);
		}
	ptr++;
		} else { ReferenceTokens = null; ptr++; }
		return new IfcClassification(expressID, type, Source, Edition, EditionDate, Name, Description, Location, ReferenceTokens);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Source){
		args.push(STRING)
		args.push(this.Source)
		}
		else{ args.push(EMPTY); }
		if(this.Edition){
		args.push(STRING)
		args.push(this.Edition)
		}
		else{ args.push(EMPTY); }
		if(this.EditionDate){
		args.push(STRING)
		args.push(this.EditionDate)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.ReferenceTokens){
		args.push(STRING)
		args.push(...this.ReferenceTokens)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcClassificationReference {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, ReferencedSource: IfcClassificationReferenceSelect | null, Description: IfcText | null, Sort: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.ReferencedSource = ReferencedSource;
		this.Description = Description;
		this.Sort = Sort;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	ReferencedSource: IfcClassificationReferenceSelect | null;
	Description: IfcText | null;
	Sort: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcClassificationReference
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let ReferencedSource;
		if (tape[ptr]) {
		ReferencedSource = tape[ptr++];
		} else { ReferencedSource = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Sort;
		if (tape[ptr]) {
		Sort = tape[ptr++];
		} else { Sort = null; ptr++; }
		return new IfcClassificationReference(expressID, type, Location, Identification, Name, ReferencedSource, Description, Sort);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.ReferencedSource){
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Sort){
		args.push(STRING)
		args.push(this.Sort)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcClosedShell {
	constructor(expressID: number, type: number, CfsFaces: Handle<IfcFace>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.CfsFaces = CfsFaces;
	}
	expressID: number;
	type: number;
	CfsFaces: Handle<IfcFace>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcClosedShell
	{
		let ptr = 0;
		let CfsFaces;
		if (tape[ptr]) {
		CfsFaces = [];
		let CfsFaces_index = 0;
		while (CfsFaces_index < tape[ptr].length) {
			CfsFaces.push(tape[ptr][CfsFaces_index++]);
		}
	ptr++;
		} else { CfsFaces = null; ptr++; }
		return new IfcClosedShell(expressID, type, CfsFaces);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.CfsFaces.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCoil {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoilTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoilTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoil
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoilTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCoil(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCoilType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoilTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoilTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoilType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoilTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCoilType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcColourRgb {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Red: IfcNormalisedRatioMeasure , Green: IfcNormalisedRatioMeasure , Blue: IfcNormalisedRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Red = Red;
		this.Green = Green;
		this.Blue = Blue;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Red: IfcNormalisedRatioMeasure ;
	Green: IfcNormalisedRatioMeasure ;
	Blue: IfcNormalisedRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColourRgb
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Red;
		if (tape[ptr]) {
		Red = tape[ptr++];
		} else { Red = null; ptr++; }
		let Green;
		if (tape[ptr]) {
		Green = tape[ptr++];
		} else { Green = null; ptr++; }
		let Blue;
		if (tape[ptr]) {
		Blue = tape[ptr++];
		} else { Blue = null; ptr++; }
		return new IfcColourRgb(expressID, type, Name, Red, Green, Blue);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcColourRgbList {
	constructor(expressID: number, type: number, ColourList: IfcNormalisedRatioMeasure[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ColourList = ColourList;
	}
	expressID: number;
	type: number;
	ColourList: IfcNormalisedRatioMeasure[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColourRgbList
	{
		let ptr = 0;
		let ColourList;
		if (tape[ptr]) {
		ColourList = [];
		let ColourList_index = 0;
		while (ColourList_index < tape[ptr].length) {
			ColourList.push(tape[ptr][ColourList_index++]);
		}
	ptr++;
		} else { ColourList = null; ptr++; }
		return new IfcColourRgbList(expressID, type, ColourList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcColourSpecification {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColourSpecification
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcColourSpecification(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcColumn {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcColumnTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcColumnTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColumn
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcColumnTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcColumn(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcColumnStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcColumnTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcColumnTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColumnStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcColumnTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcColumnStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcColumnType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcColumnTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcColumnTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcColumnType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcColumnTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcColumnType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCommunicationsAppliance {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCommunicationsApplianceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCommunicationsApplianceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCommunicationsAppliance
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCommunicationsApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCommunicationsAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCommunicationsApplianceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCommunicationsApplianceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCommunicationsApplianceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCommunicationsApplianceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCommunicationsApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCommunicationsApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcComplexProperty {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, UsageName: IfcIdentifier , HasProperties: Handle<IfcProperty>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.HasProperties = HasProperties;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UsageName: IfcIdentifier ;
	HasProperties: Handle<IfcProperty>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcComplexProperty
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UsageName;
		if (tape[ptr]) {
		UsageName = tape[ptr++];
		} else { UsageName = null; ptr++; }
		let HasProperties;
		if (tape[ptr]) {
		HasProperties = [];
		let HasProperties_index = 0;
		while (HasProperties_index < tape[ptr].length) {
			HasProperties.push(tape[ptr][HasProperties_index++]);
		}
	ptr++;
		} else { HasProperties = null; ptr++; }
		return new IfcComplexProperty(expressID, type, Name, Description, UsageName, HasProperties);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.UsageName)
		args.push(SET_BEGIN)
		this.HasProperties.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcComplexPropertyTemplate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, UsageName: IfcLabel | null, TemplateType: IfcComplexPropertyTemplateTypeEnum | null, HasPropertyTemplates: Handle<IfcPropertyTemplate>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.TemplateType = TemplateType;
		this.HasPropertyTemplates = HasPropertyTemplates;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	UsageName: IfcLabel | null;
	TemplateType: IfcComplexPropertyTemplateTypeEnum | null;
	HasPropertyTemplates: Handle<IfcPropertyTemplate>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcComplexPropertyTemplate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UsageName;
		if (tape[ptr]) {
		UsageName = tape[ptr++];
		} else { UsageName = null; ptr++; }
		let TemplateType;
		if (tape[ptr]) {
		TemplateType = new IfcComplexPropertyTemplateTypeEnum(tape[ptr++]);
		} else { TemplateType = null; ptr++; }
		let HasPropertyTemplates;
		if (tape[ptr]) {
		HasPropertyTemplates = [];
		let HasPropertyTemplates_index = 0;
		while (HasPropertyTemplates_index < tape[ptr].length) {
			HasPropertyTemplates.push(tape[ptr][HasPropertyTemplates_index++]);
		}
	ptr++;
		} else { HasPropertyTemplates = null; ptr++; }
		return new IfcComplexPropertyTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description, UsageName, TemplateType, HasPropertyTemplates);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UsageName){
		args.push(STRING)
		args.push(this.UsageName)
		}
		else{ args.push(EMPTY); }
		if(this.TemplateType){
		args.push(ENUM);
		args.push(this.TemplateType.value)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertyTemplates){
		args.push(SET_BEGIN)
		this.HasPropertyTemplates.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCompositeCurve {
	constructor(expressID: number, type: number, Segments: Handle<IfcCompositeCurveSegment>[] , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Segments: Handle<IfcCompositeCurveSegment>[] ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurve
	{
		let ptr = 0;
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcCompositeCurve(expressID, type, Segments, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCompositeCurveOnSurface {
	constructor(expressID: number, type: number, Segments: Handle<IfcCompositeCurveSegment>[] , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Segments: Handle<IfcCompositeCurveSegment>[] ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurveOnSurface
	{
		let ptr = 0;
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcCompositeCurveOnSurface(expressID, type, Segments, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCompositeCurveSegment {
	constructor(expressID: number, type: number, Transition: IfcTransitionCode , SameSense: IfcBoolean , ParentCurve: Handle<IfcCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Transition = Transition;
		this.SameSense = SameSense;
		this.ParentCurve = ParentCurve;
	}
	expressID: number;
	type: number;
	Transition: IfcTransitionCode ;
	SameSense: IfcBoolean ;
	ParentCurve: Handle<IfcCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeCurveSegment
	{
		let ptr = 0;
		let Transition;
		if (tape[ptr]) {
		Transition = new IfcTransitionCode(tape[ptr++]);
		} else { Transition = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		let ParentCurve;
		if (tape[ptr]) {
		ParentCurve = tape[ptr++];
		} else { ParentCurve = null; ptr++; }
		return new IfcCompositeCurveSegment(expressID, type, Transition, SameSense, ParentCurve);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.Transition.value)
		args.push(REF)
		args.push(this.ParentCurve)
		return args;
	}
};
export class IfcCompositeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Profiles: Handle<IfcProfileDef>[] , Label: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Profiles = Profiles;
		this.Label = Label;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Profiles: Handle<IfcProfileDef>[] ;
	Label: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompositeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Profiles;
		if (tape[ptr]) {
		Profiles = [];
		let Profiles_index = 0;
		while (Profiles_index < tape[ptr].length) {
			Profiles.push(tape[ptr][Profiles_index++]);
		}
	ptr++;
		} else { Profiles = null; ptr++; }
		let Label;
		if (tape[ptr]) {
		Label = tape[ptr++];
		} else { Label = null; ptr++; }
		return new IfcCompositeProfileDef(expressID, type, ProfileType, ProfileName, Profiles, Label);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Profiles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.Label){
		args.push(STRING)
		args.push(this.Label)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCompressor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCompressorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCompressorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompressor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCompressorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCompressor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCompressorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCompressorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCompressorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCompressorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCompressorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCompressorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCondenser {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCondenserTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCondenserTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCondenser
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCondenserTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCondenser(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCondenserType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCondenserTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCondenserTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCondenserType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCondenserTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCondenserType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcConic {
	constructor(expressID: number, type: number, Position: IfcAxis2Placement )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	Position: IfcAxis2Placement ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConic
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcConic(expressID, type, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcConnectedFaceSet {
	constructor(expressID: number, type: number, CfsFaces: Handle<IfcFace>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.CfsFaces = CfsFaces;
	}
	expressID: number;
	type: number;
	CfsFaces: Handle<IfcFace>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectedFaceSet
	{
		let ptr = 0;
		let CfsFaces;
		if (tape[ptr]) {
		CfsFaces = [];
		let CfsFaces_index = 0;
		while (CfsFaces_index < tape[ptr].length) {
			CfsFaces.push(tape[ptr][CfsFaces_index++]);
		}
	ptr++;
		} else { CfsFaces = null; ptr++; }
		return new IfcConnectedFaceSet(expressID, type, CfsFaces);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.CfsFaces.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcConnectionCurveGeometry {
	constructor(expressID: number, type: number, CurveOnRelatingElement: IfcCurveOrEdgeCurve , CurveOnRelatedElement: IfcCurveOrEdgeCurve | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.CurveOnRelatingElement = CurveOnRelatingElement;
		this.CurveOnRelatedElement = CurveOnRelatedElement;
	}
	expressID: number;
	type: number;
	CurveOnRelatingElement: IfcCurveOrEdgeCurve ;
	CurveOnRelatedElement: IfcCurveOrEdgeCurve | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionCurveGeometry
	{
		let ptr = 0;
		let CurveOnRelatingElement;
		if (tape[ptr]) {
		CurveOnRelatingElement = tape[ptr++];
		} else { CurveOnRelatingElement = null; ptr++; }
		let CurveOnRelatedElement;
		if (tape[ptr]) {
		CurveOnRelatedElement = tape[ptr++];
		} else { CurveOnRelatedElement = null; ptr++; }
		return new IfcConnectionCurveGeometry(expressID, type, CurveOnRelatingElement, CurveOnRelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.CurveOnRelatedElement){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConnectionGeometry {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionGeometry
	{
		let ptr = 0;
		return new IfcConnectionGeometry(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcConnectionPointEccentricity {
	constructor(expressID: number, type: number, PointOnRelatingElement: IfcPointOrVertexPoint , PointOnRelatedElement: IfcPointOrVertexPoint | null, EccentricityInX: IfcLengthMeasure | null, EccentricityInY: IfcLengthMeasure | null, EccentricityInZ: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
		this.EccentricityInX = EccentricityInX;
		this.EccentricityInY = EccentricityInY;
		this.EccentricityInZ = EccentricityInZ;
	}
	expressID: number;
	type: number;
	PointOnRelatingElement: IfcPointOrVertexPoint ;
	PointOnRelatedElement: IfcPointOrVertexPoint | null;
	EccentricityInX: IfcLengthMeasure | null;
	EccentricityInY: IfcLengthMeasure | null;
	EccentricityInZ: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointEccentricity
	{
		let ptr = 0;
		let PointOnRelatingElement;
		if (tape[ptr]) {
		PointOnRelatingElement = tape[ptr++];
		} else { PointOnRelatingElement = null; ptr++; }
		let PointOnRelatedElement;
		if (tape[ptr]) {
		PointOnRelatedElement = tape[ptr++];
		} else { PointOnRelatedElement = null; ptr++; }
		let EccentricityInX;
		if (tape[ptr]) {
		EccentricityInX = tape[ptr++];
		} else { EccentricityInX = null; ptr++; }
		let EccentricityInY;
		if (tape[ptr]) {
		EccentricityInY = tape[ptr++];
		} else { EccentricityInY = null; ptr++; }
		let EccentricityInZ;
		if (tape[ptr]) {
		EccentricityInZ = tape[ptr++];
		} else { EccentricityInZ = null; ptr++; }
		return new IfcConnectionPointEccentricity(expressID, type, PointOnRelatingElement, PointOnRelatedElement, EccentricityInX, EccentricityInY, EccentricityInZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PointOnRelatedElement){
		}
		else{ args.push(EMPTY); }
		if(this.EccentricityInX){
		args.push(REAL)
		args.push(this.EccentricityInX)
		}
		else{ args.push(EMPTY); }
		if(this.EccentricityInY){
		args.push(REAL)
		args.push(this.EccentricityInY)
		}
		else{ args.push(EMPTY); }
		if(this.EccentricityInZ){
		args.push(REAL)
		args.push(this.EccentricityInZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConnectionPointGeometry {
	constructor(expressID: number, type: number, PointOnRelatingElement: IfcPointOrVertexPoint , PointOnRelatedElement: IfcPointOrVertexPoint | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.PointOnRelatingElement = PointOnRelatingElement;
		this.PointOnRelatedElement = PointOnRelatedElement;
	}
	expressID: number;
	type: number;
	PointOnRelatingElement: IfcPointOrVertexPoint ;
	PointOnRelatedElement: IfcPointOrVertexPoint | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionPointGeometry
	{
		let ptr = 0;
		let PointOnRelatingElement;
		if (tape[ptr]) {
		PointOnRelatingElement = tape[ptr++];
		} else { PointOnRelatingElement = null; ptr++; }
		let PointOnRelatedElement;
		if (tape[ptr]) {
		PointOnRelatedElement = tape[ptr++];
		} else { PointOnRelatedElement = null; ptr++; }
		return new IfcConnectionPointGeometry(expressID, type, PointOnRelatingElement, PointOnRelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PointOnRelatedElement){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConnectionSurfaceGeometry {
	constructor(expressID: number, type: number, SurfaceOnRelatingElement: IfcSurfaceOrFaceSurface , SurfaceOnRelatedElement: IfcSurfaceOrFaceSurface | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SurfaceOnRelatingElement = SurfaceOnRelatingElement;
		this.SurfaceOnRelatedElement = SurfaceOnRelatedElement;
	}
	expressID: number;
	type: number;
	SurfaceOnRelatingElement: IfcSurfaceOrFaceSurface ;
	SurfaceOnRelatedElement: IfcSurfaceOrFaceSurface | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionSurfaceGeometry
	{
		let ptr = 0;
		let SurfaceOnRelatingElement;
		if (tape[ptr]) {
		SurfaceOnRelatingElement = tape[ptr++];
		} else { SurfaceOnRelatingElement = null; ptr++; }
		let SurfaceOnRelatedElement;
		if (tape[ptr]) {
		SurfaceOnRelatedElement = tape[ptr++];
		} else { SurfaceOnRelatedElement = null; ptr++; }
		return new IfcConnectionSurfaceGeometry(expressID, type, SurfaceOnRelatingElement, SurfaceOnRelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.SurfaceOnRelatedElement){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConnectionVolumeGeometry {
	constructor(expressID: number, type: number, VolumeOnRelatingElement: IfcSolidOrShell , VolumeOnRelatedElement: IfcSolidOrShell | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.VolumeOnRelatingElement = VolumeOnRelatingElement;
		this.VolumeOnRelatedElement = VolumeOnRelatedElement;
	}
	expressID: number;
	type: number;
	VolumeOnRelatingElement: IfcSolidOrShell ;
	VolumeOnRelatedElement: IfcSolidOrShell | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConnectionVolumeGeometry
	{
		let ptr = 0;
		let VolumeOnRelatingElement;
		if (tape[ptr]) {
		VolumeOnRelatingElement = tape[ptr++];
		} else { VolumeOnRelatingElement = null; ptr++; }
		let VolumeOnRelatedElement;
		if (tape[ptr]) {
		VolumeOnRelatedElement = tape[ptr++];
		} else { VolumeOnRelatedElement = null; ptr++; }
		return new IfcConnectionVolumeGeometry(expressID, type, VolumeOnRelatingElement, VolumeOnRelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.VolumeOnRelatedElement){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstraint {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstraint
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConstraintGrade;
		if (tape[ptr]) {
		ConstraintGrade = new IfcConstraintEnum(tape[ptr++]);
		} else { ConstraintGrade = null; ptr++; }
		let ConstraintSource;
		if (tape[ptr]) {
		ConstraintSource = tape[ptr++];
		} else { ConstraintSource = null; ptr++; }
		let CreatingActor;
		if (tape[ptr]) {
		CreatingActor = tape[ptr++];
		} else { CreatingActor = null; ptr++; }
		let CreationTime;
		if (tape[ptr]) {
		CreationTime = tape[ptr++];
		} else { CreationTime = null; ptr++; }
		let UserDefinedGrade;
		if (tape[ptr]) {
		UserDefinedGrade = tape[ptr++];
		} else { UserDefinedGrade = null; ptr++; }
		return new IfcConstraint(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ConstraintGrade.value)
		if(this.ConstraintSource){
		args.push(STRING)
		args.push(this.ConstraintSource)
		}
		else{ args.push(EMPTY); }
		if(this.CreatingActor){
		}
		else{ args.push(EMPTY); }
		if(this.CreationTime){
		args.push(STRING)
		args.push(this.CreationTime)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedGrade){
		args.push(STRING)
		args.push(this.UserDefinedGrade)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstructionEquipmentResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionEquipmentResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionEquipmentResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionEquipmentResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionEquipmentResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionEquipmentResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstructionEquipmentResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionEquipmentResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionEquipmentResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionEquipmentResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionEquipmentResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionEquipmentResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcConstructionMaterialResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionMaterialResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionMaterialResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionMaterialResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionMaterialResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionMaterialResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstructionMaterialResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionMaterialResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionMaterialResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionMaterialResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionMaterialResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionMaterialResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcConstructionProductResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionProductResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionProductResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionProductResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionProductResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionProductResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstructionProductResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcConstructionProductResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcConstructionProductResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionProductResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcConstructionProductResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcConstructionProductResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcConstructionResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		return new IfcConstructionResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcConstructionResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConstructionResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		return new IfcConstructionResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcContext {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcContext
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let Phase;
		if (tape[ptr]) {
		Phase = tape[ptr++];
		} else { Phase = null; ptr++; }
		let RepresentationContexts;
		if (tape[ptr]) {
		RepresentationContexts = [];
		let RepresentationContexts_index = 0;
		while (RepresentationContexts_index < tape[ptr].length) {
			RepresentationContexts.push(tape[ptr][RepresentationContexts_index++]);
		}
	ptr++;
		} else { RepresentationContexts = null; ptr++; }
		let UnitsInContext;
		if (tape[ptr]) {
		UnitsInContext = tape[ptr++];
		} else { UnitsInContext = null; ptr++; }
		return new IfcContext(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.Phase){
		args.push(STRING)
		args.push(this.Phase)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationContexts){
		args.push(SET_BEGIN)
		this.RepresentationContexts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.UnitsInContext){
		args.push(REF)
		args.push(this.UnitsInContext)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcContextDependentUnit {
	constructor(expressID: number, type: number, Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcContextDependentUnit
	{
		let ptr = 0;
		let Dimensions;
		if (tape[ptr]) {
		Dimensions = tape[ptr++];
		} else { Dimensions = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcContextDependentUnit(expressID, type, Dimensions, UnitType, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Dimensions)
		args.push(ENUM);
		args.push(this.UnitType.value)
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcControl {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcControl
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		return new IfcControl(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcController {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcControllerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcControllerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcController
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcControllerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcController(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcControllerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcControllerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcControllerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcControllerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcControllerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcControllerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcConversionBasedUnit {
	constructor(expressID: number, type: number, Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel , ConversionFactor: Handle<IfcMeasureWithUnit> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
	}
	expressID: number;
	type: number;
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	ConversionFactor: Handle<IfcMeasureWithUnit> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConversionBasedUnit
	{
		let ptr = 0;
		let Dimensions;
		if (tape[ptr]) {
		Dimensions = tape[ptr++];
		} else { Dimensions = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let ConversionFactor;
		if (tape[ptr]) {
		ConversionFactor = tape[ptr++];
		} else { ConversionFactor = null; ptr++; }
		return new IfcConversionBasedUnit(expressID, type, Dimensions, UnitType, Name, ConversionFactor);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Dimensions)
		args.push(ENUM);
		args.push(this.UnitType.value)
		args.push(STRING)
		args.push(this.Name)
		args.push(REF)
		args.push(this.ConversionFactor)
		return args;
	}
};
export class IfcConversionBasedUnitWithOffset {
	constructor(expressID: number, type: number, Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Name: IfcLabel , ConversionFactor: Handle<IfcMeasureWithUnit> , ConversionOffset: IfcReal )
	{
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Name = Name;
		this.ConversionFactor = ConversionFactor;
		this.ConversionOffset = ConversionOffset;
	}
	expressID: number;
	type: number;
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Name: IfcLabel ;
	ConversionFactor: Handle<IfcMeasureWithUnit> ;
	ConversionOffset: IfcReal ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcConversionBasedUnitWithOffset
	{
		let ptr = 0;
		let Dimensions;
		if (tape[ptr]) {
		Dimensions = tape[ptr++];
		} else { Dimensions = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let ConversionFactor;
		if (tape[ptr]) {
		ConversionFactor = tape[ptr++];
		} else { ConversionFactor = null; ptr++; }
		let ConversionOffset;
		if (tape[ptr]) {
		ConversionOffset = tape[ptr++];
		} else { ConversionOffset = null; ptr++; }
		return new IfcConversionBasedUnitWithOffset(expressID, type, Dimensions, UnitType, Name, ConversionFactor, ConversionOffset);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Dimensions)
		args.push(ENUM);
		args.push(this.UnitType.value)
		args.push(STRING)
		args.push(this.Name)
		args.push(REF)
		args.push(this.ConversionFactor)
		args.push(REAL)
		args.push(this.ConversionOffset)
		return args;
	}
};
export class IfcCooledBeam {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCooledBeamTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCooledBeamTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCooledBeam
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCooledBeamTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCooledBeam(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCooledBeamType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCooledBeamTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCooledBeamTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCooledBeamType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCooledBeamTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCooledBeamType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCoolingTower {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoolingTowerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoolingTowerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoolingTower
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoolingTowerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCoolingTower(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCoolingTowerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoolingTowerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoolingTowerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoolingTowerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoolingTowerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCoolingTowerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCoordinateOperation {
	constructor(expressID: number, type: number, SourceCRS: IfcCoordinateReferenceSystemSelect , TargetCRS: Handle<IfcCoordinateReferenceSystem> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
	}
	expressID: number;
	type: number;
	SourceCRS: IfcCoordinateReferenceSystemSelect ;
	TargetCRS: Handle<IfcCoordinateReferenceSystem> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoordinateOperation
	{
		let ptr = 0;
		let SourceCRS;
		if (tape[ptr]) {
		SourceCRS = tape[ptr++];
		} else { SourceCRS = null; ptr++; }
		let TargetCRS;
		if (tape[ptr]) {
		TargetCRS = tape[ptr++];
		} else { TargetCRS = null; ptr++; }
		return new IfcCoordinateOperation(expressID, type, SourceCRS, TargetCRS);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.TargetCRS)
		return args;
	}
};
export class IfcCoordinateReferenceSystem {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, GeodeticDatum: IfcIdentifier | null, VerticalDatum: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.GeodeticDatum = GeodeticDatum;
		this.VerticalDatum = VerticalDatum;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	GeodeticDatum: IfcIdentifier | null;
	VerticalDatum: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoordinateReferenceSystem
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let GeodeticDatum;
		if (tape[ptr]) {
		GeodeticDatum = tape[ptr++];
		} else { GeodeticDatum = null; ptr++; }
		let VerticalDatum;
		if (tape[ptr]) {
		VerticalDatum = tape[ptr++];
		} else { VerticalDatum = null; ptr++; }
		return new IfcCoordinateReferenceSystem(expressID, type, Name, Description, GeodeticDatum, VerticalDatum);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.GeodeticDatum){
		args.push(STRING)
		args.push(this.GeodeticDatum)
		}
		else{ args.push(EMPTY); }
		if(this.VerticalDatum){
		args.push(STRING)
		args.push(this.VerticalDatum)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCostItem {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcCostItemTypeEnum | null, CostValues: Handle<IfcCostValue>[] | null, CostQuantities: Handle<IfcPhysicalQuantity>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.CostValues = CostValues;
		this.CostQuantities = CostQuantities;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcCostItemTypeEnum | null;
	CostValues: Handle<IfcCostValue>[] | null;
	CostQuantities: Handle<IfcPhysicalQuantity>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCostItem
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCostItemTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let CostValues;
		if (tape[ptr]) {
		CostValues = [];
		let CostValues_index = 0;
		while (CostValues_index < tape[ptr].length) {
			CostValues.push(tape[ptr][CostValues_index++]);
		}
	ptr++;
		} else { CostValues = null; ptr++; }
		let CostQuantities;
		if (tape[ptr]) {
		CostQuantities = [];
		let CostQuantities_index = 0;
		while (CostQuantities_index < tape[ptr].length) {
			CostQuantities.push(tape[ptr][CostQuantities_index++]);
		}
	ptr++;
		} else { CostQuantities = null; ptr++; }
		return new IfcCostItem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, CostValues, CostQuantities);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.CostValues){
		args.push(SET_BEGIN)
		this.CostValues.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.CostQuantities){
		args.push(SET_BEGIN)
		this.CostQuantities.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCostSchedule {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcCostScheduleTypeEnum | null, Status: IfcLabel | null, SubmittedOn: IfcDateTime | null, UpdateDate: IfcDateTime | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.SubmittedOn = SubmittedOn;
		this.UpdateDate = UpdateDate;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcCostScheduleTypeEnum | null;
	Status: IfcLabel | null;
	SubmittedOn: IfcDateTime | null;
	UpdateDate: IfcDateTime | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCostSchedule
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCostScheduleTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let SubmittedOn;
		if (tape[ptr]) {
		SubmittedOn = tape[ptr++];
		} else { SubmittedOn = null; ptr++; }
		let UpdateDate;
		if (tape[ptr]) {
		UpdateDate = tape[ptr++];
		} else { UpdateDate = null; ptr++; }
		return new IfcCostSchedule(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, SubmittedOn, UpdateDate);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.SubmittedOn){
		args.push(STRING)
		args.push(this.SubmittedOn)
		}
		else{ args.push(EMPTY); }
		if(this.UpdateDate){
		args.push(STRING)
		args.push(this.UpdateDate)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCostValue {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, AppliedValue: IfcAppliedValueSelect | null, UnitBasis: Handle<IfcMeasureWithUnit> | null, ApplicableDate: IfcDate | null, FixedUntilDate: IfcDate | null, Category: IfcLabel | null, Condition: IfcLabel | null, ArithmeticOperator: IfcArithmeticOperatorEnum | null, Components: Handle<IfcAppliedValue>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AppliedValue = AppliedValue;
		this.UnitBasis = UnitBasis;
		this.ApplicableDate = ApplicableDate;
		this.FixedUntilDate = FixedUntilDate;
		this.Category = Category;
		this.Condition = Condition;
		this.ArithmeticOperator = ArithmeticOperator;
		this.Components = Components;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	AppliedValue: IfcAppliedValueSelect | null;
	UnitBasis: Handle<IfcMeasureWithUnit> | null;
	ApplicableDate: IfcDate | null;
	FixedUntilDate: IfcDate | null;
	Category: IfcLabel | null;
	Condition: IfcLabel | null;
	ArithmeticOperator: IfcArithmeticOperatorEnum | null;
	Components: Handle<IfcAppliedValue>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCostValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let AppliedValue;
		if (tape[ptr]) {
		AppliedValue = tape[ptr++];
		} else { AppliedValue = null; ptr++; }
		let UnitBasis;
		if (tape[ptr]) {
		UnitBasis = tape[ptr++];
		} else { UnitBasis = null; ptr++; }
		let ApplicableDate;
		if (tape[ptr]) {
		ApplicableDate = tape[ptr++];
		} else { ApplicableDate = null; ptr++; }
		let FixedUntilDate;
		if (tape[ptr]) {
		FixedUntilDate = tape[ptr++];
		} else { FixedUntilDate = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		let Condition;
		if (tape[ptr]) {
		Condition = tape[ptr++];
		} else { Condition = null; ptr++; }
		let ArithmeticOperator;
		if (tape[ptr]) {
		ArithmeticOperator = new IfcArithmeticOperatorEnum(tape[ptr++]);
		} else { ArithmeticOperator = null; ptr++; }
		let Components;
		if (tape[ptr]) {
		Components = [];
		let Components_index = 0;
		while (Components_index < tape[ptr].length) {
			Components.push(tape[ptr][Components_index++]);
		}
	ptr++;
		} else { Components = null; ptr++; }
		return new IfcCostValue(expressID, type, Name, Description, AppliedValue, UnitBasis, ApplicableDate, FixedUntilDate, Category, Condition, ArithmeticOperator, Components);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedValue){
		}
		else{ args.push(EMPTY); }
		if(this.UnitBasis){
		args.push(REF)
		args.push(this.UnitBasis)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableDate){
		args.push(STRING)
		args.push(this.ApplicableDate)
		}
		else{ args.push(EMPTY); }
		if(this.FixedUntilDate){
		args.push(STRING)
		args.push(this.FixedUntilDate)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		if(this.Condition){
		args.push(STRING)
		args.push(this.Condition)
		}
		else{ args.push(EMPTY); }
		if(this.ArithmeticOperator){
		args.push(ENUM);
		args.push(this.ArithmeticOperator.value)
		}
		else{ args.push(EMPTY); }
		if(this.Components){
		args.push(SET_BEGIN)
		this.Components.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCovering {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCoveringTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCoveringTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCovering
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoveringTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCovering(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCoveringType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCoveringTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCoveringTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCoveringType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCoveringTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCoveringType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCrewResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcCrewResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcCrewResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCrewResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCrewResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCrewResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCrewResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcCrewResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcCrewResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCrewResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCrewResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCrewResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCsgPrimitive3D {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCsgPrimitive3D
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcCsgPrimitive3D(expressID, type, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcCsgSolid {
	constructor(expressID: number, type: number, TreeRootExpression: IfcCsgSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.TreeRootExpression = TreeRootExpression;
	}
	expressID: number;
	type: number;
	TreeRootExpression: IfcCsgSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCsgSolid
	{
		let ptr = 0;
		let TreeRootExpression;
		if (tape[ptr]) {
		TreeRootExpression = tape[ptr++];
		} else { TreeRootExpression = null; ptr++; }
		return new IfcCsgSolid(expressID, type, TreeRootExpression);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcCurrencyRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingMonetaryUnit: Handle<IfcMonetaryUnit> , RelatedMonetaryUnit: Handle<IfcMonetaryUnit> , ExchangeRate: IfcPositiveRatioMeasure , RateDateTime: IfcDateTime | null, RateSource: Handle<IfcLibraryInformation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingMonetaryUnit = RelatingMonetaryUnit;
		this.RelatedMonetaryUnit = RelatedMonetaryUnit;
		this.ExchangeRate = ExchangeRate;
		this.RateDateTime = RateDateTime;
		this.RateSource = RateSource;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingMonetaryUnit: Handle<IfcMonetaryUnit> ;
	RelatedMonetaryUnit: Handle<IfcMonetaryUnit> ;
	ExchangeRate: IfcPositiveRatioMeasure ;
	RateDateTime: IfcDateTime | null;
	RateSource: Handle<IfcLibraryInformation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurrencyRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingMonetaryUnit;
		if (tape[ptr]) {
		RelatingMonetaryUnit = tape[ptr++];
		} else { RelatingMonetaryUnit = null; ptr++; }
		let RelatedMonetaryUnit;
		if (tape[ptr]) {
		RelatedMonetaryUnit = tape[ptr++];
		} else { RelatedMonetaryUnit = null; ptr++; }
		let ExchangeRate;
		if (tape[ptr]) {
		ExchangeRate = tape[ptr++];
		} else { ExchangeRate = null; ptr++; }
		let RateDateTime;
		if (tape[ptr]) {
		RateDateTime = tape[ptr++];
		} else { RateDateTime = null; ptr++; }
		let RateSource;
		if (tape[ptr]) {
		RateSource = tape[ptr++];
		} else { RateSource = null; ptr++; }
		return new IfcCurrencyRelationship(expressID, type, Name, Description, RelatingMonetaryUnit, RelatedMonetaryUnit, ExchangeRate, RateDateTime, RateSource);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingMonetaryUnit)
		args.push(REF)
		args.push(this.RelatedMonetaryUnit)
		if(this.RateDateTime){
		args.push(STRING)
		args.push(this.RateDateTime)
		}
		else{ args.push(EMPTY); }
		if(this.RateSource){
		args.push(REF)
		args.push(this.RateSource)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCurtainWall {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcCurtainWallTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcCurtainWallTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWall
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCurtainWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCurtainWall(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCurtainWallType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcCurtainWallTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcCurtainWallTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurtainWallType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcCurtainWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcCurtainWallType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcCurve {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurve
	{
		let ptr = 0;
		return new IfcCurve(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcCurveBoundedPlane {
	constructor(expressID: number, type: number, BasisSurface: Handle<IfcPlane> , OuterBoundary: Handle<IfcCurve> , InnerBoundaries: Handle<IfcCurve>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.OuterBoundary = OuterBoundary;
		this.InnerBoundaries = InnerBoundaries;
	}
	expressID: number;
	type: number;
	BasisSurface: Handle<IfcPlane> ;
	OuterBoundary: Handle<IfcCurve> ;
	InnerBoundaries: Handle<IfcCurve>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveBoundedPlane
	{
		let ptr = 0;
		let BasisSurface;
		if (tape[ptr]) {
		BasisSurface = tape[ptr++];
		} else { BasisSurface = null; ptr++; }
		let OuterBoundary;
		if (tape[ptr]) {
		OuterBoundary = tape[ptr++];
		} else { OuterBoundary = null; ptr++; }
		let InnerBoundaries;
		if (tape[ptr]) {
		InnerBoundaries = [];
		let InnerBoundaries_index = 0;
		while (InnerBoundaries_index < tape[ptr].length) {
			InnerBoundaries.push(tape[ptr][InnerBoundaries_index++]);
		}
	ptr++;
		} else { InnerBoundaries = null; ptr++; }
		return new IfcCurveBoundedPlane(expressID, type, BasisSurface, OuterBoundary, InnerBoundaries);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisSurface)
		args.push(REF)
		args.push(this.OuterBoundary)
		args.push(SET_BEGIN)
		this.InnerBoundaries.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCurveBoundedSurface {
	constructor(expressID: number, type: number, BasisSurface: Handle<IfcSurface> , Boundaries: Handle<IfcBoundaryCurve>[] , ImplicitOuter: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.Boundaries = Boundaries;
		this.ImplicitOuter = ImplicitOuter;
	}
	expressID: number;
	type: number;
	BasisSurface: Handle<IfcSurface> ;
	Boundaries: Handle<IfcBoundaryCurve>[] ;
	ImplicitOuter: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveBoundedSurface
	{
		let ptr = 0;
		let BasisSurface;
		if (tape[ptr]) {
		BasisSurface = tape[ptr++];
		} else { BasisSurface = null; ptr++; }
		let Boundaries;
		if (tape[ptr]) {
		Boundaries = [];
		let Boundaries_index = 0;
		while (Boundaries_index < tape[ptr].length) {
			Boundaries.push(tape[ptr][Boundaries_index++]);
		}
	ptr++;
		} else { Boundaries = null; ptr++; }
		let ImplicitOuter;
		if (tape[ptr]) {
		ImplicitOuter = tape[ptr++];
		} else { ImplicitOuter = null; ptr++; }
		return new IfcCurveBoundedSurface(expressID, type, BasisSurface, Boundaries, ImplicitOuter);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisSurface)
		args.push(SET_BEGIN)
		this.Boundaries.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCurveSegment2D {
	constructor(expressID: number, type: number, StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	expressID: number;
	type: number;
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveSegment2D
	{
		let ptr = 0;
		let StartPoint;
		if (tape[ptr]) {
		StartPoint = tape[ptr++];
		} else { StartPoint = null; ptr++; }
		let StartDirection;
		if (tape[ptr]) {
		StartDirection = tape[ptr++];
		} else { StartDirection = null; ptr++; }
		let SegmentLength;
		if (tape[ptr]) {
		SegmentLength = tape[ptr++];
		} else { SegmentLength = null; ptr++; }
		return new IfcCurveSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.StartPoint)
		args.push(REAL)
		args.push(this.StartDirection)
		return args;
	}
};
export class IfcCurveStyle {
	constructor(expressID: number, type: number, Name: IfcLabel | null, CurveFont: IfcCurveFontOrScaledCurveFontSelect | null, CurveWidth: IfcSizeSelect | null, CurveColour: IfcColour | null, ModelOrDraughting: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveWidth = CurveWidth;
		this.CurveColour = CurveColour;
		this.ModelOrDraughting = ModelOrDraughting;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	CurveFont: IfcCurveFontOrScaledCurveFontSelect | null;
	CurveWidth: IfcSizeSelect | null;
	CurveColour: IfcColour | null;
	ModelOrDraughting: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let CurveFont;
		if (tape[ptr]) {
		CurveFont = tape[ptr++];
		} else { CurveFont = null; ptr++; }
		let CurveWidth;
		if (tape[ptr]) {
		CurveWidth = tape[ptr++];
		} else { CurveWidth = null; ptr++; }
		let CurveColour;
		if (tape[ptr]) {
		CurveColour = tape[ptr++];
		} else { CurveColour = null; ptr++; }
		let ModelOrDraughting;
		if (tape[ptr]) {
		ModelOrDraughting = tape[ptr++];
		} else { ModelOrDraughting = null; ptr++; }
		return new IfcCurveStyle(expressID, type, Name, CurveFont, CurveWidth, CurveColour, ModelOrDraughting);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.CurveFont){
		}
		else{ args.push(EMPTY); }
		if(this.CurveWidth){
		}
		else{ args.push(EMPTY); }
		if(this.CurveColour){
		}
		else{ args.push(EMPTY); }
		if(this.ModelOrDraughting){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCurveStyleFont {
	constructor(expressID: number, type: number, Name: IfcLabel | null, PatternList: Handle<IfcCurveStyleFontPattern>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.PatternList = PatternList;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	PatternList: Handle<IfcCurveStyleFontPattern>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFont
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let PatternList;
		if (tape[ptr]) {
		PatternList = [];
		let PatternList_index = 0;
		while (PatternList_index < tape[ptr].length) {
			PatternList.push(tape[ptr][PatternList_index++]);
		}
	ptr++;
		} else { PatternList = null; ptr++; }
		return new IfcCurveStyleFont(expressID, type, Name, PatternList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.PatternList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcCurveStyleFontAndScaling {
	constructor(expressID: number, type: number, Name: IfcLabel | null, CurveFont: IfcCurveStyleFontSelect , CurveFontScaling: IfcPositiveRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.CurveFont = CurveFont;
		this.CurveFontScaling = CurveFontScaling;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	CurveFont: IfcCurveStyleFontSelect ;
	CurveFontScaling: IfcPositiveRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontAndScaling
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let CurveFont;
		if (tape[ptr]) {
		CurveFont = tape[ptr++];
		} else { CurveFont = null; ptr++; }
		let CurveFontScaling;
		if (tape[ptr]) {
		CurveFontScaling = tape[ptr++];
		} else { CurveFontScaling = null; ptr++; }
		return new IfcCurveStyleFontAndScaling(expressID, type, Name, CurveFont, CurveFontScaling);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcCurveStyleFontPattern {
	constructor(expressID: number, type: number, VisibleSegmentLength: IfcLengthMeasure , InvisibleSegmentLength: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.VisibleSegmentLength = VisibleSegmentLength;
		this.InvisibleSegmentLength = InvisibleSegmentLength;
	}
	expressID: number;
	type: number;
	VisibleSegmentLength: IfcLengthMeasure ;
	InvisibleSegmentLength: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCurveStyleFontPattern
	{
		let ptr = 0;
		let VisibleSegmentLength;
		if (tape[ptr]) {
		VisibleSegmentLength = tape[ptr++];
		} else { VisibleSegmentLength = null; ptr++; }
		let InvisibleSegmentLength;
		if (tape[ptr]) {
		InvisibleSegmentLength = tape[ptr++];
		} else { InvisibleSegmentLength = null; ptr++; }
		return new IfcCurveStyleFontPattern(expressID, type, VisibleSegmentLength, InvisibleSegmentLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.VisibleSegmentLength)
		return args;
	}
};
export class IfcCylindricalSurface {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcCylindricalSurface
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcCylindricalSurface(expressID, type, Position, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcDamper {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDamperTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDamperTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDamper
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDamperTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDamper(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDamperType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDamperTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDamperTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDamperType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDamperTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDamperType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcDeepFoundation {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDeepFoundation
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcDeepFoundation(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDeepFoundationType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDeepFoundationType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcDeepFoundationType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDerivedProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, ParentProfile: Handle<IfcProfileDef> , Operator: Handle<IfcCartesianTransformationOperator2D> , Label: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	ParentProfile: Handle<IfcProfileDef> ;
	Operator: Handle<IfcCartesianTransformationOperator2D> ;
	Label: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let ParentProfile;
		if (tape[ptr]) {
		ParentProfile = tape[ptr++];
		} else { ParentProfile = null; ptr++; }
		let Operator;
		if (tape[ptr]) {
		Operator = tape[ptr++];
		} else { Operator = null; ptr++; }
		let Label;
		if (tape[ptr]) {
		Label = tape[ptr++];
		} else { Label = null; ptr++; }
		return new IfcDerivedProfileDef(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ParentProfile)
		args.push(REF)
		args.push(this.Operator)
		if(this.Label){
		args.push(STRING)
		args.push(this.Label)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDerivedUnit {
	constructor(expressID: number, type: number, Elements: Handle<IfcDerivedUnitElement>[] , UnitType: IfcDerivedUnitEnum , UserDefinedType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
		this.UnitType = UnitType;
		this.UserDefinedType = UserDefinedType;
	}
	expressID: number;
	type: number;
	Elements: Handle<IfcDerivedUnitElement>[] ;
	UnitType: IfcDerivedUnitEnum ;
	UserDefinedType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnit
	{
		let ptr = 0;
		let Elements;
		if (tape[ptr]) {
		Elements = [];
		let Elements_index = 0;
		while (Elements_index < tape[ptr].length) {
			Elements.push(tape[ptr][Elements_index++]);
		}
	ptr++;
		} else { Elements = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcDerivedUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		let UserDefinedType;
		if (tape[ptr]) {
		UserDefinedType = tape[ptr++];
		} else { UserDefinedType = null; ptr++; }
		return new IfcDerivedUnit(expressID, type, Elements, UnitType, UserDefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Elements.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.UnitType.value)
		if(this.UserDefinedType){
		args.push(STRING)
		args.push(this.UserDefinedType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDerivedUnitElement {
	constructor(expressID: number, type: number, Unit: Handle<IfcNamedUnit> , Exponent: Handle<number> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Unit = Unit;
		this.Exponent = Exponent;
	}
	expressID: number;
	type: number;
	Unit: Handle<IfcNamedUnit> ;
	Exponent: Handle<number> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDerivedUnitElement
	{
		let ptr = 0;
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let Exponent;
		if (tape[ptr]) {
		Exponent = tape[ptr++];
		} else { Exponent = null; ptr++; }
		return new IfcDerivedUnitElement(expressID, type, Unit, Exponent);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Unit)
		args.push(REF)
		args.push(this.Exponent)
		return args;
	}
};
export class IfcDimensionalExponents {
	constructor(expressID: number, type: number, LengthExponent: Handle<number> , MassExponent: Handle<number> , TimeExponent: Handle<number> , ElectricCurrentExponent: Handle<number> , ThermodynamicTemperatureExponent: Handle<number> , AmountOfSubstanceExponent: Handle<number> , LuminousIntensityExponent: Handle<number> )
	{
		this.expressID = expressID;
		this.type = type;
		this.LengthExponent = LengthExponent;
		this.MassExponent = MassExponent;
		this.TimeExponent = TimeExponent;
		this.ElectricCurrentExponent = ElectricCurrentExponent;
		this.ThermodynamicTemperatureExponent = ThermodynamicTemperatureExponent;
		this.AmountOfSubstanceExponent = AmountOfSubstanceExponent;
		this.LuminousIntensityExponent = LuminousIntensityExponent;
	}
	expressID: number;
	type: number;
	LengthExponent: Handle<number> ;
	MassExponent: Handle<number> ;
	TimeExponent: Handle<number> ;
	ElectricCurrentExponent: Handle<number> ;
	ThermodynamicTemperatureExponent: Handle<number> ;
	AmountOfSubstanceExponent: Handle<number> ;
	LuminousIntensityExponent: Handle<number> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDimensionalExponents
	{
		let ptr = 0;
		let LengthExponent;
		if (tape[ptr]) {
		LengthExponent = tape[ptr++];
		} else { LengthExponent = null; ptr++; }
		let MassExponent;
		if (tape[ptr]) {
		MassExponent = tape[ptr++];
		} else { MassExponent = null; ptr++; }
		let TimeExponent;
		if (tape[ptr]) {
		TimeExponent = tape[ptr++];
		} else { TimeExponent = null; ptr++; }
		let ElectricCurrentExponent;
		if (tape[ptr]) {
		ElectricCurrentExponent = tape[ptr++];
		} else { ElectricCurrentExponent = null; ptr++; }
		let ThermodynamicTemperatureExponent;
		if (tape[ptr]) {
		ThermodynamicTemperatureExponent = tape[ptr++];
		} else { ThermodynamicTemperatureExponent = null; ptr++; }
		let AmountOfSubstanceExponent;
		if (tape[ptr]) {
		AmountOfSubstanceExponent = tape[ptr++];
		} else { AmountOfSubstanceExponent = null; ptr++; }
		let LuminousIntensityExponent;
		if (tape[ptr]) {
		LuminousIntensityExponent = tape[ptr++];
		} else { LuminousIntensityExponent = null; ptr++; }
		return new IfcDimensionalExponents(expressID, type, LengthExponent, MassExponent, TimeExponent, ElectricCurrentExponent, ThermodynamicTemperatureExponent, AmountOfSubstanceExponent, LuminousIntensityExponent);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.LengthExponent)
		args.push(REF)
		args.push(this.MassExponent)
		args.push(REF)
		args.push(this.TimeExponent)
		args.push(REF)
		args.push(this.ElectricCurrentExponent)
		args.push(REF)
		args.push(this.ThermodynamicTemperatureExponent)
		args.push(REF)
		args.push(this.AmountOfSubstanceExponent)
		args.push(REF)
		args.push(this.LuminousIntensityExponent)
		return args;
	}
};
export class IfcDirection {
	constructor(expressID: number, type: number, DirectionRatios: IfcReal[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.DirectionRatios = DirectionRatios;
	}
	expressID: number;
	type: number;
	DirectionRatios: IfcReal[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDirection
	{
		let ptr = 0;
		let DirectionRatios;
		if (tape[ptr]) {
		DirectionRatios = [];
		let DirectionRatios_index = 0;
		while (DirectionRatios_index < tape[ptr].length) {
			DirectionRatios.push(tape[ptr][DirectionRatios_index++]);
		}
	ptr++;
		} else { DirectionRatios = null; ptr++; }
		return new IfcDirection(expressID, type, DirectionRatios);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.DirectionRatios)
		return args;
	}
};
export class IfcDiscreteAccessory {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDiscreteAccessoryTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDiscreteAccessoryTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessory
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDiscreteAccessoryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDiscreteAccessory(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDiscreteAccessoryType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDiscreteAccessoryTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDiscreteAccessoryTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDiscreteAccessoryType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDiscreteAccessoryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDiscreteAccessoryType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcDistanceExpression {
	constructor(expressID: number, type: number, DistanceAlong: IfcLengthMeasure , OffsetLateral: IfcLengthMeasure | null, OffsetVertical: IfcLengthMeasure | null, OffsetLongitudinal: IfcLengthMeasure | null, AlongHorizontal: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.DistanceAlong = DistanceAlong;
		this.OffsetLateral = OffsetLateral;
		this.OffsetVertical = OffsetVertical;
		this.OffsetLongitudinal = OffsetLongitudinal;
		this.AlongHorizontal = AlongHorizontal;
	}
	expressID: number;
	type: number;
	DistanceAlong: IfcLengthMeasure ;
	OffsetLateral: IfcLengthMeasure | null;
	OffsetVertical: IfcLengthMeasure | null;
	OffsetLongitudinal: IfcLengthMeasure | null;
	AlongHorizontal: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistanceExpression
	{
		let ptr = 0;
		let DistanceAlong;
		if (tape[ptr]) {
		DistanceAlong = tape[ptr++];
		} else { DistanceAlong = null; ptr++; }
		let OffsetLateral;
		if (tape[ptr]) {
		OffsetLateral = tape[ptr++];
		} else { OffsetLateral = null; ptr++; }
		let OffsetVertical;
		if (tape[ptr]) {
		OffsetVertical = tape[ptr++];
		} else { OffsetVertical = null; ptr++; }
		let OffsetLongitudinal;
		if (tape[ptr]) {
		OffsetLongitudinal = tape[ptr++];
		} else { OffsetLongitudinal = null; ptr++; }
		let AlongHorizontal;
		if (tape[ptr]) {
		AlongHorizontal = tape[ptr++];
		} else { AlongHorizontal = null; ptr++; }
		return new IfcDistanceExpression(expressID, type, DistanceAlong, OffsetLateral, OffsetVertical, OffsetLongitudinal, AlongHorizontal);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.DistanceAlong)
		if(this.OffsetLateral){
		args.push(REAL)
		args.push(this.OffsetLateral)
		}
		else{ args.push(EMPTY); }
		if(this.OffsetVertical){
		args.push(REAL)
		args.push(this.OffsetVertical)
		}
		else{ args.push(EMPTY); }
		if(this.OffsetLongitudinal){
		args.push(REAL)
		args.push(this.OffsetLongitudinal)
		}
		else{ args.push(EMPTY); }
		if(this.AlongHorizontal){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionChamberElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDistributionChamberElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDistributionChamberElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDistributionChamberElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDistributionChamberElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionChamberElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDistributionChamberElementTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDistributionChamberElementTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionChamberElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDistributionChamberElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDistributionChamberElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcDistributionCircuit {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, PredefinedType: IfcDistributionSystemEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcDistributionSystemEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionCircuit
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDistributionSystemEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDistributionCircuit(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionControlElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcDistributionControlElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionControlElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionControlElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcDistributionControlElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcDistributionElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcDistributionElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionFlowElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcDistributionFlowElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionFlowElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionFlowElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcDistributionFlowElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionPort {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, FlowDirection: IfcFlowDirectionEnum | null, PredefinedType: IfcDistributionPortTypeEnum | null, SystemType: IfcDistributionSystemEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.FlowDirection = FlowDirection;
		this.PredefinedType = PredefinedType;
		this.SystemType = SystemType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	FlowDirection: IfcFlowDirectionEnum | null;
	PredefinedType: IfcDistributionPortTypeEnum | null;
	SystemType: IfcDistributionSystemEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionPort
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let FlowDirection;
		if (tape[ptr]) {
		FlowDirection = new IfcFlowDirectionEnum(tape[ptr++]);
		} else { FlowDirection = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDistributionPortTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let SystemType;
		if (tape[ptr]) {
		SystemType = new IfcDistributionSystemEnum(tape[ptr++]);
		} else { SystemType = null; ptr++; }
		return new IfcDistributionPort(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, FlowDirection, PredefinedType, SystemType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.FlowDirection){
		args.push(ENUM);
		args.push(this.FlowDirection.value)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.SystemType){
		args.push(ENUM);
		args.push(this.SystemType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDistributionSystem {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, PredefinedType: IfcDistributionSystemEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcDistributionSystemEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDistributionSystem
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDistributionSystemEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDistributionSystem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDocumentInformation {
	constructor(expressID: number, type: number, Identification: IfcIdentifier , Name: IfcLabel , Description: IfcText | null, Location: IfcURIReference | null, Purpose: IfcText | null, IntendedUse: IfcText | null, Scope: IfcText | null, Revision: IfcLabel | null, DocumentOwner: IfcActorSelect | null, Editors: IfcActorSelect[] | null, CreationTime: IfcDateTime | null, LastRevisionTime: IfcDateTime | null, ElectronicFormat: IfcIdentifier | null, ValidFrom: IfcDate | null, ValidUntil: IfcDate | null, Confidentiality: IfcDocumentConfidentialityEnum | null, Status: IfcDocumentStatusEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Location = Location;
		this.Purpose = Purpose;
		this.IntendedUse = IntendedUse;
		this.Scope = Scope;
		this.Revision = Revision;
		this.DocumentOwner = DocumentOwner;
		this.Editors = Editors;
		this.CreationTime = CreationTime;
		this.LastRevisionTime = LastRevisionTime;
		this.ElectronicFormat = ElectronicFormat;
		this.ValidFrom = ValidFrom;
		this.ValidUntil = ValidUntil;
		this.Confidentiality = Confidentiality;
		this.Status = Status;
	}
	expressID: number;
	type: number;
	Identification: IfcIdentifier ;
	Name: IfcLabel ;
	Description: IfcText | null;
	Location: IfcURIReference | null;
	Purpose: IfcText | null;
	IntendedUse: IfcText | null;
	Scope: IfcText | null;
	Revision: IfcLabel | null;
	DocumentOwner: IfcActorSelect | null;
	Editors: IfcActorSelect[] | null;
	CreationTime: IfcDateTime | null;
	LastRevisionTime: IfcDateTime | null;
	ElectronicFormat: IfcIdentifier | null;
	ValidFrom: IfcDate | null;
	ValidUntil: IfcDate | null;
	Confidentiality: IfcDocumentConfidentialityEnum | null;
	Status: IfcDocumentStatusEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformation
	{
		let ptr = 0;
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		let IntendedUse;
		if (tape[ptr]) {
		IntendedUse = tape[ptr++];
		} else { IntendedUse = null; ptr++; }
		let Scope;
		if (tape[ptr]) {
		Scope = tape[ptr++];
		} else { Scope = null; ptr++; }
		let Revision;
		if (tape[ptr]) {
		Revision = tape[ptr++];
		} else { Revision = null; ptr++; }
		let DocumentOwner;
		if (tape[ptr]) {
		DocumentOwner = tape[ptr++];
		} else { DocumentOwner = null; ptr++; }
		let Editors;
		if (tape[ptr]) {
		Editors = [];
		let Editors_index = 0;
		while (Editors_index < tape[ptr].length) {
			Editors.push(tape[ptr][Editors_index++]);
		}
	ptr++;
		} else { Editors = null; ptr++; }
		let CreationTime;
		if (tape[ptr]) {
		CreationTime = tape[ptr++];
		} else { CreationTime = null; ptr++; }
		let LastRevisionTime;
		if (tape[ptr]) {
		LastRevisionTime = tape[ptr++];
		} else { LastRevisionTime = null; ptr++; }
		let ElectronicFormat;
		if (tape[ptr]) {
		ElectronicFormat = tape[ptr++];
		} else { ElectronicFormat = null; ptr++; }
		let ValidFrom;
		if (tape[ptr]) {
		ValidFrom = tape[ptr++];
		} else { ValidFrom = null; ptr++; }
		let ValidUntil;
		if (tape[ptr]) {
		ValidUntil = tape[ptr++];
		} else { ValidUntil = null; ptr++; }
		let Confidentiality;
		if (tape[ptr]) {
		Confidentiality = new IfcDocumentConfidentialityEnum(tape[ptr++]);
		} else { Confidentiality = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = new IfcDocumentStatusEnum(tape[ptr++]);
		} else { Status = null; ptr++; }
		return new IfcDocumentInformation(expressID, type, Identification, Name, Description, Location, Purpose, IntendedUse, Scope, Revision, DocumentOwner, Editors, CreationTime, LastRevisionTime, ElectronicFormat, ValidFrom, ValidUntil, Confidentiality, Status);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Identification)
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		if(this.IntendedUse){
		args.push(STRING)
		args.push(this.IntendedUse)
		}
		else{ args.push(EMPTY); }
		if(this.Scope){
		args.push(STRING)
		args.push(this.Scope)
		}
		else{ args.push(EMPTY); }
		if(this.Revision){
		args.push(STRING)
		args.push(this.Revision)
		}
		else{ args.push(EMPTY); }
		if(this.DocumentOwner){
		}
		else{ args.push(EMPTY); }
		if(this.Editors){
		}
		else{ args.push(EMPTY); }
		if(this.CreationTime){
		args.push(STRING)
		args.push(this.CreationTime)
		}
		else{ args.push(EMPTY); }
		if(this.LastRevisionTime){
		args.push(STRING)
		args.push(this.LastRevisionTime)
		}
		else{ args.push(EMPTY); }
		if(this.ElectronicFormat){
		args.push(STRING)
		args.push(this.ElectronicFormat)
		}
		else{ args.push(EMPTY); }
		if(this.ValidFrom){
		args.push(STRING)
		args.push(this.ValidFrom)
		}
		else{ args.push(EMPTY); }
		if(this.ValidUntil){
		args.push(STRING)
		args.push(this.ValidUntil)
		}
		else{ args.push(EMPTY); }
		if(this.Confidentiality){
		args.push(ENUM);
		args.push(this.Confidentiality.value)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(ENUM);
		args.push(this.Status.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDocumentInformationRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingDocument: Handle<IfcDocumentInformation> , RelatedDocuments: Handle<IfcDocumentInformation>[] , RelationshipType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingDocument = RelatingDocument;
		this.RelatedDocuments = RelatedDocuments;
		this.RelationshipType = RelationshipType;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingDocument: Handle<IfcDocumentInformation> ;
	RelatedDocuments: Handle<IfcDocumentInformation>[] ;
	RelationshipType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentInformationRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingDocument;
		if (tape[ptr]) {
		RelatingDocument = tape[ptr++];
		} else { RelatingDocument = null; ptr++; }
		let RelatedDocuments;
		if (tape[ptr]) {
		RelatedDocuments = [];
		let RelatedDocuments_index = 0;
		while (RelatedDocuments_index < tape[ptr].length) {
			RelatedDocuments.push(tape[ptr][RelatedDocuments_index++]);
		}
	ptr++;
		} else { RelatedDocuments = null; ptr++; }
		let RelationshipType;
		if (tape[ptr]) {
		RelationshipType = tape[ptr++];
		} else { RelationshipType = null; ptr++; }
		return new IfcDocumentInformationRelationship(expressID, type, Name, Description, RelatingDocument, RelatedDocuments, RelationshipType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingDocument)
		args.push(SET_BEGIN)
		this.RelatedDocuments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelationshipType){
		args.push(STRING)
		args.push(this.RelationshipType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDocumentReference {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, ReferencedDocument: Handle<IfcDocumentInformation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.ReferencedDocument = ReferencedDocument;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ReferencedDocument: Handle<IfcDocumentInformation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDocumentReference
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ReferencedDocument;
		if (tape[ptr]) {
		ReferencedDocument = tape[ptr++];
		} else { ReferencedDocument = null; ptr++; }
		return new IfcDocumentReference(expressID, type, Location, Identification, Name, Description, ReferencedDocument);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ReferencedDocument){
		args.push(REF)
		args.push(this.ReferencedDocument)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDoor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcDoorTypeEnum | null, OperationType: IfcDoorTypeOperationEnum | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcDoorTypeEnum | null;
	OperationType: IfcDoorTypeOperationEnum | null;
	UserDefinedOperationType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let OverallHeight;
		if (tape[ptr]) {
		OverallHeight = tape[ptr++];
		} else { OverallHeight = null; ptr++; }
		let OverallWidth;
		if (tape[ptr]) {
		OverallWidth = tape[ptr++];
		} else { OverallWidth = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDoorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcDoorTypeOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let UserDefinedOperationType;
		if (tape[ptr]) {
		UserDefinedOperationType = tape[ptr++];
		} else { UserDefinedOperationType = null; ptr++; }
		return new IfcDoor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.OverallHeight){
		}
		else{ args.push(EMPTY); }
		if(this.OverallWidth){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.OperationType){
		args.push(ENUM);
		args.push(this.OperationType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedOperationType){
		args.push(STRING)
		args.push(this.UserDefinedOperationType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDoorLiningProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, LiningDepth: IfcPositiveLengthMeasure | null, LiningThickness: IfcNonNegativeLengthMeasure | null, ThresholdDepth: IfcPositiveLengthMeasure | null, ThresholdThickness: IfcNonNegativeLengthMeasure | null, TransomThickness: IfcNonNegativeLengthMeasure | null, TransomOffset: IfcLengthMeasure | null, LiningOffset: IfcLengthMeasure | null, ThresholdOffset: IfcLengthMeasure | null, CasingThickness: IfcPositiveLengthMeasure | null, CasingDepth: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null, LiningToPanelOffsetX: IfcLengthMeasure | null, LiningToPanelOffsetY: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.ThresholdDepth = ThresholdDepth;
		this.ThresholdThickness = ThresholdThickness;
		this.TransomThickness = TransomThickness;
		this.TransomOffset = TransomOffset;
		this.LiningOffset = LiningOffset;
		this.ThresholdOffset = ThresholdOffset;
		this.CasingThickness = CasingThickness;
		this.CasingDepth = CasingDepth;
		this.ShapeAspectStyle = ShapeAspectStyle;
		this.LiningToPanelOffsetX = LiningToPanelOffsetX;
		this.LiningToPanelOffsetY = LiningToPanelOffsetY;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	LiningDepth: IfcPositiveLengthMeasure | null;
	LiningThickness: IfcNonNegativeLengthMeasure | null;
	ThresholdDepth: IfcPositiveLengthMeasure | null;
	ThresholdThickness: IfcNonNegativeLengthMeasure | null;
	TransomThickness: IfcNonNegativeLengthMeasure | null;
	TransomOffset: IfcLengthMeasure | null;
	LiningOffset: IfcLengthMeasure | null;
	ThresholdOffset: IfcLengthMeasure | null;
	CasingThickness: IfcPositiveLengthMeasure | null;
	CasingDepth: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	LiningToPanelOffsetX: IfcLengthMeasure | null;
	LiningToPanelOffsetY: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoorLiningProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let LiningDepth;
		if (tape[ptr]) {
		LiningDepth = tape[ptr++];
		} else { LiningDepth = null; ptr++; }
		let LiningThickness;
		if (tape[ptr]) {
		LiningThickness = tape[ptr++];
		} else { LiningThickness = null; ptr++; }
		let ThresholdDepth;
		if (tape[ptr]) {
		ThresholdDepth = tape[ptr++];
		} else { ThresholdDepth = null; ptr++; }
		let ThresholdThickness;
		if (tape[ptr]) {
		ThresholdThickness = tape[ptr++];
		} else { ThresholdThickness = null; ptr++; }
		let TransomThickness;
		if (tape[ptr]) {
		TransomThickness = tape[ptr++];
		} else { TransomThickness = null; ptr++; }
		let TransomOffset;
		if (tape[ptr]) {
		TransomOffset = tape[ptr++];
		} else { TransomOffset = null; ptr++; }
		let LiningOffset;
		if (tape[ptr]) {
		LiningOffset = tape[ptr++];
		} else { LiningOffset = null; ptr++; }
		let ThresholdOffset;
		if (tape[ptr]) {
		ThresholdOffset = tape[ptr++];
		} else { ThresholdOffset = null; ptr++; }
		let CasingThickness;
		if (tape[ptr]) {
		CasingThickness = tape[ptr++];
		} else { CasingThickness = null; ptr++; }
		let CasingDepth;
		if (tape[ptr]) {
		CasingDepth = tape[ptr++];
		} else { CasingDepth = null; ptr++; }
		let ShapeAspectStyle;
		if (tape[ptr]) {
		ShapeAspectStyle = tape[ptr++];
		} else { ShapeAspectStyle = null; ptr++; }
		let LiningToPanelOffsetX;
		if (tape[ptr]) {
		LiningToPanelOffsetX = tape[ptr++];
		} else { LiningToPanelOffsetX = null; ptr++; }
		let LiningToPanelOffsetY;
		if (tape[ptr]) {
		LiningToPanelOffsetY = tape[ptr++];
		} else { LiningToPanelOffsetY = null; ptr++; }
		return new IfcDoorLiningProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, LiningDepth, LiningThickness, ThresholdDepth, ThresholdThickness, TransomThickness, TransomOffset, LiningOffset, ThresholdOffset, CasingThickness, CasingDepth, ShapeAspectStyle, LiningToPanelOffsetX, LiningToPanelOffsetY);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.LiningDepth){
		}
		else{ args.push(EMPTY); }
		if(this.LiningThickness){
		}
		else{ args.push(EMPTY); }
		if(this.ThresholdDepth){
		}
		else{ args.push(EMPTY); }
		if(this.ThresholdThickness){
		}
		else{ args.push(EMPTY); }
		if(this.TransomThickness){
		}
		else{ args.push(EMPTY); }
		if(this.TransomOffset){
		args.push(REAL)
		args.push(this.TransomOffset)
		}
		else{ args.push(EMPTY); }
		if(this.LiningOffset){
		args.push(REAL)
		args.push(this.LiningOffset)
		}
		else{ args.push(EMPTY); }
		if(this.ThresholdOffset){
		args.push(REAL)
		args.push(this.ThresholdOffset)
		}
		else{ args.push(EMPTY); }
		if(this.CasingThickness){
		}
		else{ args.push(EMPTY); }
		if(this.CasingDepth){
		}
		else{ args.push(EMPTY); }
		if(this.ShapeAspectStyle){
		args.push(REF)
		args.push(this.ShapeAspectStyle)
		}
		else{ args.push(EMPTY); }
		if(this.LiningToPanelOffsetX){
		args.push(REAL)
		args.push(this.LiningToPanelOffsetX)
		}
		else{ args.push(EMPTY); }
		if(this.LiningToPanelOffsetY){
		args.push(REAL)
		args.push(this.LiningToPanelOffsetY)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDoorPanelProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, PanelDepth: IfcPositiveLengthMeasure | null, PanelOperation: IfcDoorPanelOperationEnum , PanelWidth: IfcNormalisedRatioMeasure | null, PanelPosition: IfcDoorPanelPositionEnum , ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.PanelDepth = PanelDepth;
		this.PanelOperation = PanelOperation;
		this.PanelWidth = PanelWidth;
		this.PanelPosition = PanelPosition;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	PanelDepth: IfcPositiveLengthMeasure | null;
	PanelOperation: IfcDoorPanelOperationEnum ;
	PanelWidth: IfcNormalisedRatioMeasure | null;
	PanelPosition: IfcDoorPanelPositionEnum ;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoorPanelProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let PanelDepth;
		if (tape[ptr]) {
		PanelDepth = tape[ptr++];
		} else { PanelDepth = null; ptr++; }
		let PanelOperation;
		if (tape[ptr]) {
		PanelOperation = new IfcDoorPanelOperationEnum(tape[ptr++]);
		} else { PanelOperation = null; ptr++; }
		let PanelWidth;
		if (tape[ptr]) {
		PanelWidth = tape[ptr++];
		} else { PanelWidth = null; ptr++; }
		let PanelPosition;
		if (tape[ptr]) {
		PanelPosition = new IfcDoorPanelPositionEnum(tape[ptr++]);
		} else { PanelPosition = null; ptr++; }
		let ShapeAspectStyle;
		if (tape[ptr]) {
		ShapeAspectStyle = tape[ptr++];
		} else { ShapeAspectStyle = null; ptr++; }
		return new IfcDoorPanelProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, PanelDepth, PanelOperation, PanelWidth, PanelPosition, ShapeAspectStyle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.PanelDepth){
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PanelOperation.value)
		if(this.PanelWidth){
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PanelPosition.value)
		if(this.ShapeAspectStyle){
		args.push(REF)
		args.push(this.ShapeAspectStyle)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDoorStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcDoorTypeEnum | null, OperationType: IfcDoorTypeOperationEnum | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcDoorTypeEnum | null;
	OperationType: IfcDoorTypeOperationEnum | null;
	UserDefinedOperationType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoorStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let OverallHeight;
		if (tape[ptr]) {
		OverallHeight = tape[ptr++];
		} else { OverallHeight = null; ptr++; }
		let OverallWidth;
		if (tape[ptr]) {
		OverallWidth = tape[ptr++];
		} else { OverallWidth = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDoorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcDoorTypeOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let UserDefinedOperationType;
		if (tape[ptr]) {
		UserDefinedOperationType = tape[ptr++];
		} else { UserDefinedOperationType = null; ptr++; }
		return new IfcDoorStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, OperationType, UserDefinedOperationType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.OverallHeight){
		}
		else{ args.push(EMPTY); }
		if(this.OverallWidth){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.OperationType){
		args.push(ENUM);
		args.push(this.OperationType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedOperationType){
		args.push(STRING)
		args.push(this.UserDefinedOperationType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDoorStyle {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, OperationType: IfcDoorStyleOperationEnum , ConstructionType: IfcDoorStyleConstructionEnum , ParameterTakesPrecedence: IfcBoolean , Sizeable: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.OperationType = OperationType;
		this.ConstructionType = ConstructionType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.Sizeable = Sizeable;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	OperationType: IfcDoorStyleOperationEnum ;
	ConstructionType: IfcDoorStyleConstructionEnum ;
	ParameterTakesPrecedence: IfcBoolean ;
	Sizeable: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoorStyle
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcDoorStyleOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let ConstructionType;
		if (tape[ptr]) {
		ConstructionType = new IfcDoorStyleConstructionEnum(tape[ptr++]);
		} else { ConstructionType = null; ptr++; }
		let ParameterTakesPrecedence;
		if (tape[ptr]) {
		ParameterTakesPrecedence = tape[ptr++];
		} else { ParameterTakesPrecedence = null; ptr++; }
		let Sizeable;
		if (tape[ptr]) {
		Sizeable = tape[ptr++];
		} else { Sizeable = null; ptr++; }
		return new IfcDoorStyle(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, OperationType, ConstructionType, ParameterTakesPrecedence, Sizeable);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.OperationType.value)
		args.push(ENUM);
		args.push(this.ConstructionType.value)
		return args;
	}
};
export class IfcDoorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDoorTypeEnum , OperationType: IfcDoorTypeOperationEnum , ParameterTakesPrecedence: IfcBoolean | null, UserDefinedOperationType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.OperationType = OperationType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.UserDefinedOperationType = UserDefinedOperationType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDoorTypeEnum ;
	OperationType: IfcDoorTypeOperationEnum ;
	ParameterTakesPrecedence: IfcBoolean | null;
	UserDefinedOperationType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDoorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDoorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcDoorTypeOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let ParameterTakesPrecedence;
		if (tape[ptr]) {
		ParameterTakesPrecedence = tape[ptr++];
		} else { ParameterTakesPrecedence = null; ptr++; }
		let UserDefinedOperationType;
		if (tape[ptr]) {
		UserDefinedOperationType = tape[ptr++];
		} else { UserDefinedOperationType = null; ptr++; }
		return new IfcDoorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, OperationType, ParameterTakesPrecedence, UserDefinedOperationType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(ENUM);
		args.push(this.OperationType.value)
		if(this.ParameterTakesPrecedence){
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedOperationType){
		args.push(STRING)
		args.push(this.UserDefinedOperationType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDraughtingPreDefinedColour {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedColour
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcDraughtingPreDefinedColour(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcDraughtingPreDefinedCurveFont {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDraughtingPreDefinedCurveFont
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcDraughtingPreDefinedCurveFont(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcDuctFitting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctFittingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctFittingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctFitting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDuctFittingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctFittingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctFittingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctFittingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcDuctSegment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctSegmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctSegmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSegment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDuctSegmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctSegmentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctSegmentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSegmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcDuctSilencer {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcDuctSilencerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcDuctSilencerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSilencer
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctSilencerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctSilencer(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcDuctSilencerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcDuctSilencerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcDuctSilencerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcDuctSilencerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcDuctSilencerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcDuctSilencerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcEdge {
	constructor(expressID: number, type: number, EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
	}
	expressID: number;
	type: number;
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEdge
	{
		let ptr = 0;
		let EdgeStart;
		if (tape[ptr]) {
		EdgeStart = tape[ptr++];
		} else { EdgeStart = null; ptr++; }
		let EdgeEnd;
		if (tape[ptr]) {
		EdgeEnd = tape[ptr++];
		} else { EdgeEnd = null; ptr++; }
		return new IfcEdge(expressID, type, EdgeStart, EdgeEnd);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.EdgeStart)
		args.push(REF)
		args.push(this.EdgeEnd)
		return args;
	}
};
export class IfcEdgeCurve {
	constructor(expressID: number, type: number, EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , EdgeGeometry: Handle<IfcCurve> , SameSense: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.EdgeGeometry = EdgeGeometry;
		this.SameSense = SameSense;
	}
	expressID: number;
	type: number;
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	EdgeGeometry: Handle<IfcCurve> ;
	SameSense: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeCurve
	{
		let ptr = 0;
		let EdgeStart;
		if (tape[ptr]) {
		EdgeStart = tape[ptr++];
		} else { EdgeStart = null; ptr++; }
		let EdgeEnd;
		if (tape[ptr]) {
		EdgeEnd = tape[ptr++];
		} else { EdgeEnd = null; ptr++; }
		let EdgeGeometry;
		if (tape[ptr]) {
		EdgeGeometry = tape[ptr++];
		} else { EdgeGeometry = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		return new IfcEdgeCurve(expressID, type, EdgeStart, EdgeEnd, EdgeGeometry, SameSense);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.EdgeStart)
		args.push(REF)
		args.push(this.EdgeEnd)
		args.push(REF)
		args.push(this.EdgeGeometry)
		return args;
	}
};
export class IfcEdgeLoop {
	constructor(expressID: number, type: number, EdgeList: Handle<IfcOrientedEdge>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeList = EdgeList;
	}
	expressID: number;
	type: number;
	EdgeList: Handle<IfcOrientedEdge>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEdgeLoop
	{
		let ptr = 0;
		let EdgeList;
		if (tape[ptr]) {
		EdgeList = [];
		let EdgeList_index = 0;
		while (EdgeList_index < tape[ptr].length) {
			EdgeList.push(tape[ptr][EdgeList_index++]);
		}
	ptr++;
		} else { EdgeList = null; ptr++; }
		return new IfcEdgeLoop(expressID, type, EdgeList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.EdgeList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcElectricAppliance {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricApplianceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricApplianceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricAppliance
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricAppliance(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricApplianceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricApplianceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricApplianceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricApplianceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricApplianceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricApplianceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElectricDistributionBoard {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricDistributionBoardTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricDistributionBoardTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricDistributionBoard
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricDistributionBoardTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricDistributionBoard(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricDistributionBoardType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricDistributionBoardTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricDistributionBoardTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricDistributionBoardType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricDistributionBoardTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricDistributionBoardType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElectricFlowStorageDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricFlowStorageDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricFlowStorageDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricFlowStorageDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricFlowStorageDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricFlowStorageDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricFlowStorageDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricFlowStorageDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricFlowStorageDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricFlowStorageDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricFlowStorageDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricFlowStorageDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElectricGenerator {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricGeneratorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricGeneratorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricGenerator
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricGeneratorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricGenerator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricGeneratorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricGeneratorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricGeneratorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricGeneratorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricGeneratorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricGeneratorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElectricMotor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricMotorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricMotorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricMotor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricMotorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricMotor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricMotorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricMotorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricMotorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricMotorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricMotorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricMotorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElectricTimeControl {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcElectricTimeControlTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcElectricTimeControlTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricTimeControl
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricTimeControlTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricTimeControl(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElectricTimeControlType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElectricTimeControlTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElectricTimeControlTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElectricTimeControlType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElectricTimeControlTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElectricTimeControlType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElementAssembly {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, AssemblyPlace: IfcAssemblyPlaceEnum | null, PredefinedType: IfcElementAssemblyTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	AssemblyPlace: IfcAssemblyPlaceEnum | null;
	PredefinedType: IfcElementAssemblyTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementAssembly
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let AssemblyPlace;
		if (tape[ptr]) {
		AssemblyPlace = new IfcAssemblyPlaceEnum(tape[ptr++]);
		} else { AssemblyPlace = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElementAssemblyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElementAssembly(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, AssemblyPlace, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.AssemblyPlace){
		args.push(ENUM);
		args.push(this.AssemblyPlace.value)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElementAssemblyType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcElementAssemblyTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcElementAssemblyTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementAssemblyType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcElementAssemblyTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcElementAssemblyType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcElementComponent {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponent
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcElementComponent(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElementComponentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementComponentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcElementComponentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElementQuantity {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, MethodOfMeasurement: IfcLabel | null, Quantities: Handle<IfcPhysicalQuantity>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.MethodOfMeasurement = MethodOfMeasurement;
		this.Quantities = Quantities;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	MethodOfMeasurement: IfcLabel | null;
	Quantities: Handle<IfcPhysicalQuantity>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementQuantity
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let MethodOfMeasurement;
		if (tape[ptr]) {
		MethodOfMeasurement = tape[ptr++];
		} else { MethodOfMeasurement = null; ptr++; }
		let Quantities;
		if (tape[ptr]) {
		Quantities = [];
		let Quantities_index = 0;
		while (Quantities_index < tape[ptr].length) {
			Quantities.push(tape[ptr][Quantities_index++]);
		}
	ptr++;
		} else { Quantities = null; ptr++; }
		return new IfcElementQuantity(expressID, type, GlobalId, OwnerHistory, Name, Description, MethodOfMeasurement, Quantities);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.MethodOfMeasurement){
		args.push(STRING)
		args.push(this.MethodOfMeasurement)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Quantities.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcElementarySurface {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcElementarySurface
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcElementarySurface(expressID, type, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcEllipse {
	constructor(expressID: number, type: number, Position: IfcAxis2Placement , SemiAxis1: IfcPositiveLengthMeasure , SemiAxis2: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	expressID: number;
	type: number;
	Position: IfcAxis2Placement ;
	SemiAxis1: IfcPositiveLengthMeasure ;
	SemiAxis2: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEllipse
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let SemiAxis1;
		if (tape[ptr]) {
		SemiAxis1 = tape[ptr++];
		} else { SemiAxis1 = null; ptr++; }
		let SemiAxis2;
		if (tape[ptr]) {
		SemiAxis2 = tape[ptr++];
		} else { SemiAxis2 = null; ptr++; }
		return new IfcEllipse(expressID, type, Position, SemiAxis1, SemiAxis2);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcEllipseProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, SemiAxis1: IfcPositiveLengthMeasure , SemiAxis2: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.SemiAxis1 = SemiAxis1;
		this.SemiAxis2 = SemiAxis2;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	SemiAxis1: IfcPositiveLengthMeasure ;
	SemiAxis2: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEllipseProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let SemiAxis1;
		if (tape[ptr]) {
		SemiAxis1 = tape[ptr++];
		} else { SemiAxis1 = null; ptr++; }
		let SemiAxis2;
		if (tape[ptr]) {
		SemiAxis2 = tape[ptr++];
		} else { SemiAxis2 = null; ptr++; }
		return new IfcEllipseProfileDef(expressID, type, ProfileType, ProfileName, Position, SemiAxis1, SemiAxis2);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEnergyConversionDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcEnergyConversionDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEnergyConversionDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEnergyConversionDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcEnergyConversionDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEngine {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEngineTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEngineTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEngine
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEngineTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEngine(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEngineType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEngineTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEngineTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEngineType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEngineTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEngineType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcEvaporativeCooler {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEvaporativeCoolerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEvaporativeCoolerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporativeCooler
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEvaporativeCoolerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEvaporativeCooler(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEvaporativeCoolerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEvaporativeCoolerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEvaporativeCoolerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporativeCoolerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEvaporativeCoolerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEvaporativeCoolerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcEvaporator {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcEvaporatorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcEvaporatorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporator
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEvaporatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEvaporator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEvaporatorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcEvaporatorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcEvaporatorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEvaporatorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEvaporatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcEvaporatorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcEvent {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, PredefinedType: IfcEventTypeEnum | null, EventTriggerType: IfcEventTriggerTypeEnum | null, UserDefinedEventTriggerType: IfcLabel | null, EventOccurenceTime: Handle<IfcEventTime> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
		this.EventOccurenceTime = EventOccurenceTime;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	PredefinedType: IfcEventTypeEnum | null;
	EventTriggerType: IfcEventTriggerTypeEnum | null;
	UserDefinedEventTriggerType: IfcLabel | null;
	EventOccurenceTime: Handle<IfcEventTime> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEvent
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEventTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let EventTriggerType;
		if (tape[ptr]) {
		EventTriggerType = new IfcEventTriggerTypeEnum(tape[ptr++]);
		} else { EventTriggerType = null; ptr++; }
		let UserDefinedEventTriggerType;
		if (tape[ptr]) {
		UserDefinedEventTriggerType = tape[ptr++];
		} else { UserDefinedEventTriggerType = null; ptr++; }
		let EventOccurenceTime;
		if (tape[ptr]) {
		EventOccurenceTime = tape[ptr++];
		} else { EventOccurenceTime = null; ptr++; }
		return new IfcEvent(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, PredefinedType, EventTriggerType, UserDefinedEventTriggerType, EventOccurenceTime);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.EventTriggerType){
		args.push(ENUM);
		args.push(this.EventTriggerType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedEventTriggerType){
		args.push(STRING)
		args.push(this.UserDefinedEventTriggerType)
		}
		else{ args.push(EMPTY); }
		if(this.EventOccurenceTime){
		args.push(REF)
		args.push(this.EventOccurenceTime)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEventTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, ActualDate: IfcDateTime | null, EarlyDate: IfcDateTime | null, LateDate: IfcDateTime | null, ScheduleDate: IfcDateTime | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.ActualDate = ActualDate;
		this.EarlyDate = EarlyDate;
		this.LateDate = LateDate;
		this.ScheduleDate = ScheduleDate;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	ActualDate: IfcDateTime | null;
	EarlyDate: IfcDateTime | null;
	LateDate: IfcDateTime | null;
	ScheduleDate: IfcDateTime | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEventTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let ActualDate;
		if (tape[ptr]) {
		ActualDate = tape[ptr++];
		} else { ActualDate = null; ptr++; }
		let EarlyDate;
		if (tape[ptr]) {
		EarlyDate = tape[ptr++];
		} else { EarlyDate = null; ptr++; }
		let LateDate;
		if (tape[ptr]) {
		LateDate = tape[ptr++];
		} else { LateDate = null; ptr++; }
		let ScheduleDate;
		if (tape[ptr]) {
		ScheduleDate = tape[ptr++];
		} else { ScheduleDate = null; ptr++; }
		return new IfcEventTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, ActualDate, EarlyDate, LateDate, ScheduleDate);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.ActualDate){
		args.push(STRING)
		args.push(this.ActualDate)
		}
		else{ args.push(EMPTY); }
		if(this.EarlyDate){
		args.push(STRING)
		args.push(this.EarlyDate)
		}
		else{ args.push(EMPTY); }
		if(this.LateDate){
		args.push(STRING)
		args.push(this.LateDate)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleDate){
		args.push(STRING)
		args.push(this.ScheduleDate)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcEventType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcEventTypeEnum , EventTriggerType: IfcEventTriggerTypeEnum , UserDefinedEventTriggerType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
		this.EventTriggerType = EventTriggerType;
		this.UserDefinedEventTriggerType = UserDefinedEventTriggerType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcEventTypeEnum ;
	EventTriggerType: IfcEventTriggerTypeEnum ;
	UserDefinedEventTriggerType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcEventType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ProcessType;
		if (tape[ptr]) {
		ProcessType = tape[ptr++];
		} else { ProcessType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcEventTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let EventTriggerType;
		if (tape[ptr]) {
		EventTriggerType = new IfcEventTriggerTypeEnum(tape[ptr++]);
		} else { EventTriggerType = null; ptr++; }
		let UserDefinedEventTriggerType;
		if (tape[ptr]) {
		UserDefinedEventTriggerType = tape[ptr++];
		} else { UserDefinedEventTriggerType = null; ptr++; }
		return new IfcEventType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType, PredefinedType, EventTriggerType, UserDefinedEventTriggerType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ProcessType){
		args.push(STRING)
		args.push(this.ProcessType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(ENUM);
		args.push(this.EventTriggerType.value)
		if(this.UserDefinedEventTriggerType){
		args.push(STRING)
		args.push(this.UserDefinedEventTriggerType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExtendedProperties {
	constructor(expressID: number, type: number, Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExtendedProperties
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Properties;
		if (tape[ptr]) {
		Properties = [];
		let Properties_index = 0;
		while (Properties_index < tape[ptr].length) {
			Properties.push(tape[ptr][Properties_index++]);
		}
	ptr++;
		} else { Properties = null; ptr++; }
		return new IfcExtendedProperties(expressID, type, Name, Description, Properties);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Properties.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcExternalInformation {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternalInformation
	{
		let ptr = 0;
		return new IfcExternalInformation(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcExternalReference {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternalReference
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcExternalReference(expressID, type, Location, Identification, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExternalReferenceRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingReference: Handle<IfcExternalReference> , RelatedResourceObjects: IfcResourceObjectSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingReference = RelatingReference;
		this.RelatedResourceObjects = RelatedResourceObjects;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingReference: Handle<IfcExternalReference> ;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternalReferenceRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingReference;
		if (tape[ptr]) {
		RelatingReference = tape[ptr++];
		} else { RelatingReference = null; ptr++; }
		let RelatedResourceObjects;
		if (tape[ptr]) {
		RelatedResourceObjects = [];
		let RelatedResourceObjects_index = 0;
		while (RelatedResourceObjects_index < tape[ptr].length) {
			RelatedResourceObjects.push(tape[ptr][RelatedResourceObjects_index++]);
		}
	ptr++;
		} else { RelatedResourceObjects = null; ptr++; }
		return new IfcExternalReferenceRelationship(expressID, type, Name, Description, RelatingReference, RelatedResourceObjects);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingReference)
		return args;
	}
};
export class IfcExternalSpatialElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, PredefinedType: IfcExternalSpatialElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcExternalSpatialElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternalSpatialElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcExternalSpatialElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcExternalSpatialElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExternalSpatialStructureElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternalSpatialStructureElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcExternalSpatialStructureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExternallyDefinedHatchStyle {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedHatchStyle
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcExternallyDefinedHatchStyle(expressID, type, Location, Identification, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExternallyDefinedSurfaceStyle {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedSurfaceStyle
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcExternallyDefinedSurfaceStyle(expressID, type, Location, Identification, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExternallyDefinedTextFont {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExternallyDefinedTextFont
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcExternallyDefinedTextFont(expressID, type, Location, Identification, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcExtrudedAreaSolid {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExtrudedAreaSolid
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let ExtrudedDirection;
		if (tape[ptr]) {
		ExtrudedDirection = tape[ptr++];
		} else { ExtrudedDirection = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		return new IfcExtrudedAreaSolid(expressID, type, SweptArea, Position, ExtrudedDirection, Depth);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ExtrudedDirection)
		return args;
	}
};
export class IfcExtrudedAreaSolidTapered {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcPositiveLengthMeasure , EndSweptArea: Handle<IfcProfileDef> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
		this.EndSweptArea = EndSweptArea;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcPositiveLengthMeasure ;
	EndSweptArea: Handle<IfcProfileDef> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcExtrudedAreaSolidTapered
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let ExtrudedDirection;
		if (tape[ptr]) {
		ExtrudedDirection = tape[ptr++];
		} else { ExtrudedDirection = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let EndSweptArea;
		if (tape[ptr]) {
		EndSweptArea = tape[ptr++];
		} else { EndSweptArea = null; ptr++; }
		return new IfcExtrudedAreaSolidTapered(expressID, type, SweptArea, Position, ExtrudedDirection, Depth, EndSweptArea);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ExtrudedDirection)
		args.push(REF)
		args.push(this.EndSweptArea)
		return args;
	}
};
export class IfcFace {
	constructor(expressID: number, type: number, Bounds: Handle<IfcFaceBound>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
	}
	expressID: number;
	type: number;
	Bounds: Handle<IfcFaceBound>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFace
	{
		let ptr = 0;
		let Bounds;
		if (tape[ptr]) {
		Bounds = [];
		let Bounds_index = 0;
		while (Bounds_index < tape[ptr].length) {
			Bounds.push(tape[ptr][Bounds_index++]);
		}
	ptr++;
		} else { Bounds = null; ptr++; }
		return new IfcFace(expressID, type, Bounds);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Bounds.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcFaceBasedSurfaceModel {
	constructor(expressID: number, type: number, FbsmFaces: Handle<IfcConnectedFaceSet>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.FbsmFaces = FbsmFaces;
	}
	expressID: number;
	type: number;
	FbsmFaces: Handle<IfcConnectedFaceSet>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBasedSurfaceModel
	{
		let ptr = 0;
		let FbsmFaces;
		if (tape[ptr]) {
		FbsmFaces = [];
		let FbsmFaces_index = 0;
		while (FbsmFaces_index < tape[ptr].length) {
			FbsmFaces.push(tape[ptr][FbsmFaces_index++]);
		}
	ptr++;
		} else { FbsmFaces = null; ptr++; }
		return new IfcFaceBasedSurfaceModel(expressID, type, FbsmFaces);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.FbsmFaces.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcFaceBound {
	constructor(expressID: number, type: number, Bound: Handle<IfcLoop> , Orientation: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	expressID: number;
	type: number;
	Bound: Handle<IfcLoop> ;
	Orientation: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFaceBound
	{
		let ptr = 0;
		let Bound;
		if (tape[ptr]) {
		Bound = tape[ptr++];
		} else { Bound = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		return new IfcFaceBound(expressID, type, Bound, Orientation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Bound)
		return args;
	}
};
export class IfcFaceOuterBound {
	constructor(expressID: number, type: number, Bound: Handle<IfcLoop> , Orientation: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.Bound = Bound;
		this.Orientation = Orientation;
	}
	expressID: number;
	type: number;
	Bound: Handle<IfcLoop> ;
	Orientation: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFaceOuterBound
	{
		let ptr = 0;
		let Bound;
		if (tape[ptr]) {
		Bound = tape[ptr++];
		} else { Bound = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		return new IfcFaceOuterBound(expressID, type, Bound, Orientation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Bound)
		return args;
	}
};
export class IfcFaceSurface {
	constructor(expressID: number, type: number, Bounds: Handle<IfcFaceBound>[] , FaceSurface: Handle<IfcSurface> , SameSense: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.Bounds = Bounds;
		this.FaceSurface = FaceSurface;
		this.SameSense = SameSense;
	}
	expressID: number;
	type: number;
	Bounds: Handle<IfcFaceBound>[] ;
	FaceSurface: Handle<IfcSurface> ;
	SameSense: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFaceSurface
	{
		let ptr = 0;
		let Bounds;
		if (tape[ptr]) {
		Bounds = [];
		let Bounds_index = 0;
		while (Bounds_index < tape[ptr].length) {
			Bounds.push(tape[ptr][Bounds_index++]);
		}
	ptr++;
		} else { Bounds = null; ptr++; }
		let FaceSurface;
		if (tape[ptr]) {
		FaceSurface = tape[ptr++];
		} else { FaceSurface = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		return new IfcFaceSurface(expressID, type, Bounds, FaceSurface, SameSense);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Bounds.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.FaceSurface)
		return args;
	}
};
export class IfcFacetedBrep {
	constructor(expressID: number, type: number, Outer: Handle<IfcClosedShell> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	expressID: number;
	type: number;
	Outer: Handle<IfcClosedShell> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrep
	{
		let ptr = 0;
		let Outer;
		if (tape[ptr]) {
		Outer = tape[ptr++];
		} else { Outer = null; ptr++; }
		return new IfcFacetedBrep(expressID, type, Outer);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Outer)
		return args;
	}
};
export class IfcFacetedBrepWithVoids {
	constructor(expressID: number, type: number, Outer: Handle<IfcClosedShell> , Voids: Handle<IfcClosedShell>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
		this.Voids = Voids;
	}
	expressID: number;
	type: number;
	Outer: Handle<IfcClosedShell> ;
	Voids: Handle<IfcClosedShell>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFacetedBrepWithVoids
	{
		let ptr = 0;
		let Outer;
		if (tape[ptr]) {
		Outer = tape[ptr++];
		} else { Outer = null; ptr++; }
		let Voids;
		if (tape[ptr]) {
		Voids = [];
		let Voids_index = 0;
		while (Voids_index < tape[ptr].length) {
			Voids.push(tape[ptr][Voids_index++]);
		}
	ptr++;
		} else { Voids = null; ptr++; }
		return new IfcFacetedBrepWithVoids(expressID, type, Outer, Voids);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Outer)
		args.push(SET_BEGIN)
		this.Voids.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcFacility {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFacility
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		return new IfcFacility(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFacilityPart {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFacilityPart
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		return new IfcFacilityPart(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFailureConnectionCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TensionFailureX: IfcForceMeasure | null, TensionFailureY: IfcForceMeasure | null, TensionFailureZ: IfcForceMeasure | null, CompressionFailureX: IfcForceMeasure | null, CompressionFailureY: IfcForceMeasure | null, CompressionFailureZ: IfcForceMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TensionFailureX = TensionFailureX;
		this.TensionFailureY = TensionFailureY;
		this.TensionFailureZ = TensionFailureZ;
		this.CompressionFailureX = CompressionFailureX;
		this.CompressionFailureY = CompressionFailureY;
		this.CompressionFailureZ = CompressionFailureZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TensionFailureX: IfcForceMeasure | null;
	TensionFailureY: IfcForceMeasure | null;
	TensionFailureZ: IfcForceMeasure | null;
	CompressionFailureX: IfcForceMeasure | null;
	CompressionFailureY: IfcForceMeasure | null;
	CompressionFailureZ: IfcForceMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFailureConnectionCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TensionFailureX;
		if (tape[ptr]) {
		TensionFailureX = tape[ptr++];
		} else { TensionFailureX = null; ptr++; }
		let TensionFailureY;
		if (tape[ptr]) {
		TensionFailureY = tape[ptr++];
		} else { TensionFailureY = null; ptr++; }
		let TensionFailureZ;
		if (tape[ptr]) {
		TensionFailureZ = tape[ptr++];
		} else { TensionFailureZ = null; ptr++; }
		let CompressionFailureX;
		if (tape[ptr]) {
		CompressionFailureX = tape[ptr++];
		} else { CompressionFailureX = null; ptr++; }
		let CompressionFailureY;
		if (tape[ptr]) {
		CompressionFailureY = tape[ptr++];
		} else { CompressionFailureY = null; ptr++; }
		let CompressionFailureZ;
		if (tape[ptr]) {
		CompressionFailureZ = tape[ptr++];
		} else { CompressionFailureZ = null; ptr++; }
		return new IfcFailureConnectionCondition(expressID, type, Name, TensionFailureX, TensionFailureY, TensionFailureZ, CompressionFailureX, CompressionFailureY, CompressionFailureZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TensionFailureX){
		args.push(REAL)
		args.push(this.TensionFailureX)
		}
		else{ args.push(EMPTY); }
		if(this.TensionFailureY){
		args.push(REAL)
		args.push(this.TensionFailureY)
		}
		else{ args.push(EMPTY); }
		if(this.TensionFailureZ){
		args.push(REAL)
		args.push(this.TensionFailureZ)
		}
		else{ args.push(EMPTY); }
		if(this.CompressionFailureX){
		args.push(REAL)
		args.push(this.CompressionFailureX)
		}
		else{ args.push(EMPTY); }
		if(this.CompressionFailureY){
		args.push(REAL)
		args.push(this.CompressionFailureY)
		}
		else{ args.push(EMPTY); }
		if(this.CompressionFailureZ){
		args.push(REAL)
		args.push(this.CompressionFailureZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFan {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFanTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFanTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFan
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFanTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFan(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFanType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFanTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFanTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFanType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFanTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFanType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFastener {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFastenerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFastenerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFastener
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFastenerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFastener(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFastenerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFastenerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFastenerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFastenerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFastenerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFastenerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFeatureElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFeatureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFeatureElementAddition {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementAddition
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFeatureElementAddition(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFeatureElementSubtraction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFeatureElementSubtraction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFeatureElementSubtraction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFillAreaStyle {
	constructor(expressID: number, type: number, Name: IfcLabel | null, FillStyles: IfcFillStyleSelect[] , ModelorDraughting: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.FillStyles = FillStyles;
		this.ModelorDraughting = ModelorDraughting;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	FillStyles: IfcFillStyleSelect[] ;
	ModelorDraughting: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let FillStyles;
		if (tape[ptr]) {
		FillStyles = [];
		let FillStyles_index = 0;
		while (FillStyles_index < tape[ptr].length) {
			FillStyles.push(tape[ptr][FillStyles_index++]);
		}
	ptr++;
		} else { FillStyles = null; ptr++; }
		let ModelorDraughting;
		if (tape[ptr]) {
		ModelorDraughting = tape[ptr++];
		} else { ModelorDraughting = null; ptr++; }
		return new IfcFillAreaStyle(expressID, type, Name, FillStyles, ModelorDraughting);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.ModelorDraughting){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFillAreaStyleHatching {
	constructor(expressID: number, type: number, HatchLineAppearance: Handle<IfcCurveStyle> , StartOfNextHatchLine: IfcHatchLineDistanceSelect , PointOfReferenceHatchLine: Handle<IfcCartesianPoint> | null, PatternStart: Handle<IfcCartesianPoint> | null, HatchLineAngle: IfcPlaneAngleMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.HatchLineAppearance = HatchLineAppearance;
		this.StartOfNextHatchLine = StartOfNextHatchLine;
		this.PointOfReferenceHatchLine = PointOfReferenceHatchLine;
		this.PatternStart = PatternStart;
		this.HatchLineAngle = HatchLineAngle;
	}
	expressID: number;
	type: number;
	HatchLineAppearance: Handle<IfcCurveStyle> ;
	StartOfNextHatchLine: IfcHatchLineDistanceSelect ;
	PointOfReferenceHatchLine: Handle<IfcCartesianPoint> | null;
	PatternStart: Handle<IfcCartesianPoint> | null;
	HatchLineAngle: IfcPlaneAngleMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleHatching
	{
		let ptr = 0;
		let HatchLineAppearance;
		if (tape[ptr]) {
		HatchLineAppearance = tape[ptr++];
		} else { HatchLineAppearance = null; ptr++; }
		let StartOfNextHatchLine;
		if (tape[ptr]) {
		StartOfNextHatchLine = tape[ptr++];
		} else { StartOfNextHatchLine = null; ptr++; }
		let PointOfReferenceHatchLine;
		if (tape[ptr]) {
		PointOfReferenceHatchLine = tape[ptr++];
		} else { PointOfReferenceHatchLine = null; ptr++; }
		let PatternStart;
		if (tape[ptr]) {
		PatternStart = tape[ptr++];
		} else { PatternStart = null; ptr++; }
		let HatchLineAngle;
		if (tape[ptr]) {
		HatchLineAngle = tape[ptr++];
		} else { HatchLineAngle = null; ptr++; }
		return new IfcFillAreaStyleHatching(expressID, type, HatchLineAppearance, StartOfNextHatchLine, PointOfReferenceHatchLine, PatternStart, HatchLineAngle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.HatchLineAppearance)
		if(this.PointOfReferenceHatchLine){
		args.push(REF)
		args.push(this.PointOfReferenceHatchLine)
		}
		else{ args.push(EMPTY); }
		if(this.PatternStart){
		args.push(REF)
		args.push(this.PatternStart)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.HatchLineAngle)
		return args;
	}
};
export class IfcFillAreaStyleTiles {
	constructor(expressID: number, type: number, TilingPattern: Handle<IfcVector>[] , Tiles: Handle<IfcStyledItem>[] , TilingScale: IfcPositiveRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.TilingPattern = TilingPattern;
		this.Tiles = Tiles;
		this.TilingScale = TilingScale;
	}
	expressID: number;
	type: number;
	TilingPattern: Handle<IfcVector>[] ;
	Tiles: Handle<IfcStyledItem>[] ;
	TilingScale: IfcPositiveRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFillAreaStyleTiles
	{
		let ptr = 0;
		let TilingPattern;
		if (tape[ptr]) {
		TilingPattern = [];
		let TilingPattern_index = 0;
		while (TilingPattern_index < tape[ptr].length) {
			TilingPattern.push(tape[ptr][TilingPattern_index++]);
		}
	ptr++;
		} else { TilingPattern = null; ptr++; }
		let Tiles;
		if (tape[ptr]) {
		Tiles = [];
		let Tiles_index = 0;
		while (Tiles_index < tape[ptr].length) {
			Tiles.push(tape[ptr][Tiles_index++]);
		}
	ptr++;
		} else { Tiles = null; ptr++; }
		let TilingScale;
		if (tape[ptr]) {
		TilingScale = tape[ptr++];
		} else { TilingScale = null; ptr++; }
		return new IfcFillAreaStyleTiles(expressID, type, TilingPattern, Tiles, TilingScale);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.TilingPattern.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(SET_BEGIN)
		this.Tiles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcFilter {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFilterTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFilterTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFilter
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFilterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFilter(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFilterType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFilterTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFilterTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFilterType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFilterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFilterType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFireSuppressionTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFireSuppressionTerminalTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFireSuppressionTerminalTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFireSuppressionTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFireSuppressionTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFireSuppressionTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFireSuppressionTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFireSuppressionTerminalTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFireSuppressionTerminalTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFireSuppressionTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFireSuppressionTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFireSuppressionTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFixedReferenceSweptAreaSolid {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Directrix: Handle<IfcCurve> , StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, FixedReference: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Directrix = Directrix;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.FixedReference = FixedReference;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Directrix: Handle<IfcCurve> ;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	FixedReference: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFixedReferenceSweptAreaSolid
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let StartParam;
		if (tape[ptr]) {
		StartParam = tape[ptr++];
		} else { StartParam = null; ptr++; }
		let EndParam;
		if (tape[ptr]) {
		EndParam = tape[ptr++];
		} else { EndParam = null; ptr++; }
		let FixedReference;
		if (tape[ptr]) {
		FixedReference = tape[ptr++];
		} else { FixedReference = null; ptr++; }
		return new IfcFixedReferenceSweptAreaSolid(expressID, type, SweptArea, Position, Directrix, StartParam, EndParam, FixedReference);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Directrix)
		if(this.StartParam){
		args.push(REAL)
		args.push(this.StartParam)
		}
		else{ args.push(EMPTY); }
		if(this.EndParam){
		args.push(REAL)
		args.push(this.EndParam)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.FixedReference)
		return args;
	}
};
export class IfcFlowController {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowController
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowController(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowControllerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowControllerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowControllerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowFitting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFitting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowFittingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowFittingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowInstrument {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFlowInstrumentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFlowInstrumentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowInstrument
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFlowInstrumentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFlowInstrument(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowInstrumentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFlowInstrumentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFlowInstrumentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowInstrumentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFlowInstrumentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFlowInstrumentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFlowMeter {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFlowMeterTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFlowMeterTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMeter
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFlowMeterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFlowMeter(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowMeterType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFlowMeterTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFlowMeterTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMeterType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFlowMeterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFlowMeterType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFlowMovingDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowMovingDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowMovingDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowMovingDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowMovingDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowSegment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowSegmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowSegmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowStorageDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowStorageDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowStorageDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowStorageDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowStorageDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowTreatmentDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFlowTreatmentDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFlowTreatmentDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFlowTreatmentDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFlowTreatmentDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFooting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFootingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFootingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFooting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFootingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFooting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFootingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcFootingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcFootingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFootingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFootingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFootingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcFurnishingElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcFurnishingElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFurnishingElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFurnishingElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcFurnishingElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFurniture {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcFurnitureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcFurnitureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFurniture
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFurnitureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFurniture(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcFurnitureType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, AssemblyPlace: IfcAssemblyPlaceEnum , PredefinedType: IfcFurnitureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.AssemblyPlace = AssemblyPlace;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	AssemblyPlace: IfcAssemblyPlaceEnum ;
	PredefinedType: IfcFurnitureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcFurnitureType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let AssemblyPlace;
		if (tape[ptr]) {
		AssemblyPlace = new IfcAssemblyPlaceEnum(tape[ptr++]);
		} else { AssemblyPlace = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcFurnitureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcFurnitureType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, AssemblyPlace, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.AssemblyPlace.value)
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGeographicElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcGeographicElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcGeographicElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeographicElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcGeographicElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcGeographicElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGeographicElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcGeographicElementTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcGeographicElementTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeographicElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcGeographicElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcGeographicElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcGeometricCurveSet {
	constructor(expressID: number, type: number, Elements: IfcGeometricSetSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
	}
	expressID: number;
	type: number;
	Elements: IfcGeometricSetSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricCurveSet
	{
		let ptr = 0;
		let Elements;
		if (tape[ptr]) {
		Elements = [];
		let Elements_index = 0;
		while (Elements_index < tape[ptr].length) {
			Elements.push(tape[ptr][Elements_index++]);
		}
	ptr++;
		} else { Elements = null; ptr++; }
		return new IfcGeometricCurveSet(expressID, type, Elements);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcGeometricRepresentationContext {
	constructor(expressID: number, type: number, ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null, CoordinateSpaceDimension: IfcDimensionCount , Precision: IfcReal | null, WorldCoordinateSystem: IfcAxis2Placement , TrueNorth: Handle<IfcDirection> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
	}
	expressID: number;
	type: number;
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	CoordinateSpaceDimension: IfcDimensionCount ;
	Precision: IfcReal | null;
	WorldCoordinateSystem: IfcAxis2Placement ;
	TrueNorth: Handle<IfcDirection> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationContext
	{
		let ptr = 0;
		let ContextIdentifier;
		if (tape[ptr]) {
		ContextIdentifier = tape[ptr++];
		} else { ContextIdentifier = null; ptr++; }
		let ContextType;
		if (tape[ptr]) {
		ContextType = tape[ptr++];
		} else { ContextType = null; ptr++; }
		let CoordinateSpaceDimension;
		if (tape[ptr]) {
		CoordinateSpaceDimension = tape[ptr++];
		} else { CoordinateSpaceDimension = null; ptr++; }
		let Precision;
		if (tape[ptr]) {
		Precision = tape[ptr++];
		} else { Precision = null; ptr++; }
		let WorldCoordinateSystem;
		if (tape[ptr]) {
		WorldCoordinateSystem = tape[ptr++];
		} else { WorldCoordinateSystem = null; ptr++; }
		let TrueNorth;
		if (tape[ptr]) {
		TrueNorth = tape[ptr++];
		} else { TrueNorth = null; ptr++; }
		return new IfcGeometricRepresentationContext(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.ContextIdentifier){
		args.push(STRING)
		args.push(this.ContextIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.ContextType){
		args.push(STRING)
		args.push(this.ContextType)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.CoordinateSpaceDimension)
		if(this.Precision){
		args.push(REAL)
		args.push(this.Precision)
		}
		else{ args.push(EMPTY); }
		if(this.TrueNorth){
		args.push(REF)
		args.push(this.TrueNorth)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGeometricRepresentationItem {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationItem
	{
		let ptr = 0;
		return new IfcGeometricRepresentationItem(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcGeometricRepresentationSubContext {
	constructor(expressID: number, type: number, ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null, CoordinateSpaceDimension: IfcDimensionCount , Precision: IfcReal | null, WorldCoordinateSystem: IfcAxis2Placement , TrueNorth: Handle<IfcDirection> | null, ParentContext: Handle<IfcGeometricRepresentationContext> , TargetScale: IfcPositiveRatioMeasure | null, TargetView: IfcGeometricProjectionEnum , UserDefinedTargetView: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
		this.CoordinateSpaceDimension = CoordinateSpaceDimension;
		this.Precision = Precision;
		this.WorldCoordinateSystem = WorldCoordinateSystem;
		this.TrueNorth = TrueNorth;
		this.ParentContext = ParentContext;
		this.TargetScale = TargetScale;
		this.TargetView = TargetView;
		this.UserDefinedTargetView = UserDefinedTargetView;
	}
	expressID: number;
	type: number;
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	CoordinateSpaceDimension: IfcDimensionCount ;
	Precision: IfcReal | null;
	WorldCoordinateSystem: IfcAxis2Placement ;
	TrueNorth: Handle<IfcDirection> | null;
	ParentContext: Handle<IfcGeometricRepresentationContext> ;
	TargetScale: IfcPositiveRatioMeasure | null;
	TargetView: IfcGeometricProjectionEnum ;
	UserDefinedTargetView: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricRepresentationSubContext
	{
		let ptr = 0;
		let ContextIdentifier;
		if (tape[ptr]) {
		ContextIdentifier = tape[ptr++];
		} else { ContextIdentifier = null; ptr++; }
		let ContextType;
		if (tape[ptr]) {
		ContextType = tape[ptr++];
		} else { ContextType = null; ptr++; }
		let CoordinateSpaceDimension;
		if (tape[ptr]) {
		CoordinateSpaceDimension = tape[ptr++];
		} else { CoordinateSpaceDimension = null; ptr++; }
		let Precision;
		if (tape[ptr]) {
		Precision = tape[ptr++];
		} else { Precision = null; ptr++; }
		let WorldCoordinateSystem;
		if (tape[ptr]) {
		WorldCoordinateSystem = tape[ptr++];
		} else { WorldCoordinateSystem = null; ptr++; }
		let TrueNorth;
		if (tape[ptr]) {
		TrueNorth = tape[ptr++];
		} else { TrueNorth = null; ptr++; }
		let ParentContext;
		if (tape[ptr]) {
		ParentContext = tape[ptr++];
		} else { ParentContext = null; ptr++; }
		let TargetScale;
		if (tape[ptr]) {
		TargetScale = tape[ptr++];
		} else { TargetScale = null; ptr++; }
		let TargetView;
		if (tape[ptr]) {
		TargetView = new IfcGeometricProjectionEnum(tape[ptr++]);
		} else { TargetView = null; ptr++; }
		let UserDefinedTargetView;
		if (tape[ptr]) {
		UserDefinedTargetView = tape[ptr++];
		} else { UserDefinedTargetView = null; ptr++; }
		return new IfcGeometricRepresentationSubContext(expressID, type, ContextIdentifier, ContextType, CoordinateSpaceDimension, Precision, WorldCoordinateSystem, TrueNorth, ParentContext, TargetScale, TargetView, UserDefinedTargetView);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.ContextIdentifier){
		args.push(STRING)
		args.push(this.ContextIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.ContextType){
		args.push(STRING)
		args.push(this.ContextType)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.CoordinateSpaceDimension)
		if(this.Precision){
		args.push(REAL)
		args.push(this.Precision)
		}
		else{ args.push(EMPTY); }
		if(this.TrueNorth){
		args.push(REF)
		args.push(this.TrueNorth)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ParentContext)
		if(this.TargetScale){
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.TargetView.value)
		if(this.UserDefinedTargetView){
		args.push(STRING)
		args.push(this.UserDefinedTargetView)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGeometricSet {
	constructor(expressID: number, type: number, Elements: IfcGeometricSetSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Elements = Elements;
	}
	expressID: number;
	type: number;
	Elements: IfcGeometricSetSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGeometricSet
	{
		let ptr = 0;
		let Elements;
		if (tape[ptr]) {
		Elements = [];
		let Elements_index = 0;
		while (Elements_index < tape[ptr].length) {
			Elements.push(tape[ptr][Elements_index++]);
		}
	ptr++;
		} else { Elements = null; ptr++; }
		return new IfcGeometricSet(expressID, type, Elements);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcGrid {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, UAxes: Handle<IfcGridAxis>[] , VAxes: Handle<IfcGridAxis>[] , WAxes: Handle<IfcGridAxis>[] | null, PredefinedType: IfcGridTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.UAxes = UAxes;
		this.VAxes = VAxes;
		this.WAxes = WAxes;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	UAxes: Handle<IfcGridAxis>[] ;
	VAxes: Handle<IfcGridAxis>[] ;
	WAxes: Handle<IfcGridAxis>[] | null;
	PredefinedType: IfcGridTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGrid
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let UAxes;
		if (tape[ptr]) {
		UAxes = [];
		let UAxes_index = 0;
		while (UAxes_index < tape[ptr].length) {
			UAxes.push(tape[ptr][UAxes_index++]);
		}
	ptr++;
		} else { UAxes = null; ptr++; }
		let VAxes;
		if (tape[ptr]) {
		VAxes = [];
		let VAxes_index = 0;
		while (VAxes_index < tape[ptr].length) {
			VAxes.push(tape[ptr][VAxes_index++]);
		}
	ptr++;
		} else { VAxes = null; ptr++; }
		let WAxes;
		if (tape[ptr]) {
		WAxes = [];
		let WAxes_index = 0;
		while (WAxes_index < tape[ptr].length) {
			WAxes.push(tape[ptr][WAxes_index++]);
		}
	ptr++;
		} else { WAxes = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcGridTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcGrid(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, UAxes, VAxes, WAxes, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.UAxes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(SET_BEGIN)
		this.VAxes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.WAxes){
		args.push(SET_BEGIN)
		this.WAxes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGridAxis {
	constructor(expressID: number, type: number, AxisTag: IfcLabel | null, AxisCurve: Handle<IfcCurve> , SameSense: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.AxisTag = AxisTag;
		this.AxisCurve = AxisCurve;
		this.SameSense = SameSense;
	}
	expressID: number;
	type: number;
	AxisTag: IfcLabel | null;
	AxisCurve: Handle<IfcCurve> ;
	SameSense: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGridAxis
	{
		let ptr = 0;
		let AxisTag;
		if (tape[ptr]) {
		AxisTag = tape[ptr++];
		} else { AxisTag = null; ptr++; }
		let AxisCurve;
		if (tape[ptr]) {
		AxisCurve = tape[ptr++];
		} else { AxisCurve = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		return new IfcGridAxis(expressID, type, AxisTag, AxisCurve, SameSense);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.AxisTag){
		args.push(STRING)
		args.push(this.AxisTag)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AxisCurve)
		return args;
	}
};
export class IfcGridPlacement {
	constructor(expressID: number, type: number, PlacementRelTo: Handle<IfcObjectPlacement> | null, PlacementLocation: Handle<IfcVirtualGridIntersection> , PlacementRefDirection: IfcGridPlacementDirectionSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementLocation = PlacementLocation;
		this.PlacementRefDirection = PlacementRefDirection;
	}
	expressID: number;
	type: number;
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	PlacementLocation: Handle<IfcVirtualGridIntersection> ;
	PlacementRefDirection: IfcGridPlacementDirectionSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGridPlacement
	{
		let ptr = 0;
		let PlacementRelTo;
		if (tape[ptr]) {
		PlacementRelTo = tape[ptr++];
		} else { PlacementRelTo = null; ptr++; }
		let PlacementLocation;
		if (tape[ptr]) {
		PlacementLocation = tape[ptr++];
		} else { PlacementLocation = null; ptr++; }
		let PlacementRefDirection;
		if (tape[ptr]) {
		PlacementRefDirection = tape[ptr++];
		} else { PlacementRefDirection = null; ptr++; }
		return new IfcGridPlacement(expressID, type, PlacementRelTo, PlacementLocation, PlacementRefDirection);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PlacementRelTo){
		args.push(REF)
		args.push(this.PlacementRelTo)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.PlacementLocation)
		if(this.PlacementRefDirection){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcGroup {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcGroup
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		return new IfcGroup(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcHalfSpaceSolid {
	constructor(expressID: number, type: number, BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
	}
	expressID: number;
	type: number;
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcHalfSpaceSolid
	{
		let ptr = 0;
		let BaseSurface;
		if (tape[ptr]) {
		BaseSurface = tape[ptr++];
		} else { BaseSurface = null; ptr++; }
		let AgreementFlag;
		if (tape[ptr]) {
		AgreementFlag = tape[ptr++];
		} else { AgreementFlag = null; ptr++; }
		return new IfcHalfSpaceSolid(expressID, type, BaseSurface, AgreementFlag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BaseSurface)
		return args;
	}
};
export class IfcHeatExchanger {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcHeatExchangerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcHeatExchangerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcHeatExchanger
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcHeatExchangerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcHeatExchanger(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcHeatExchangerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcHeatExchangerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcHeatExchangerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcHeatExchangerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcHeatExchangerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcHeatExchangerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcHumidifier {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcHumidifierTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcHumidifierTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcHumidifier
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcHumidifierTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcHumidifier(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcHumidifierType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcHumidifierTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcHumidifierTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcHumidifierType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcHumidifierTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcHumidifierType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcIShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, OverallWidth: IfcPositiveLengthMeasure , OverallDepth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.OverallWidth = OverallWidth;
		this.OverallDepth = OverallDepth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.FlangeEdgeRadius = FlangeEdgeRadius;
		this.FlangeSlope = FlangeSlope;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	OverallWidth: IfcPositiveLengthMeasure ;
	OverallDepth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let OverallWidth;
		if (tape[ptr]) {
		OverallWidth = tape[ptr++];
		} else { OverallWidth = null; ptr++; }
		let OverallDepth;
		if (tape[ptr]) {
		OverallDepth = tape[ptr++];
		} else { OverallDepth = null; ptr++; }
		let WebThickness;
		if (tape[ptr]) {
		WebThickness = tape[ptr++];
		} else { WebThickness = null; ptr++; }
		let FlangeThickness;
		if (tape[ptr]) {
		FlangeThickness = tape[ptr++];
		} else { FlangeThickness = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		let FlangeEdgeRadius;
		if (tape[ptr]) {
		FlangeEdgeRadius = tape[ptr++];
		} else { FlangeEdgeRadius = null; ptr++; }
		let FlangeSlope;
		if (tape[ptr]) {
		FlangeSlope = tape[ptr++];
		} else { FlangeSlope = null; ptr++; }
		return new IfcIShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, OverallWidth, OverallDepth, WebThickness, FlangeThickness, FilletRadius, FlangeEdgeRadius, FlangeSlope);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.FlangeEdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.FlangeSlope){
		args.push(REAL)
		args.push(this.FlangeSlope)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcImageTexture {
	constructor(expressID: number, type: number, RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier[] | null, URLReference: IfcURIReference )
	{
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.URLReference = URLReference;
	}
	expressID: number;
	type: number;
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier[] | null;
	URLReference: IfcURIReference ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcImageTexture
	{
		let ptr = 0;
		let RepeatS;
		if (tape[ptr]) {
		RepeatS = tape[ptr++];
		} else { RepeatS = null; ptr++; }
		let RepeatT;
		if (tape[ptr]) {
		RepeatT = tape[ptr++];
		} else { RepeatT = null; ptr++; }
		let Mode;
		if (tape[ptr]) {
		Mode = tape[ptr++];
		} else { Mode = null; ptr++; }
		let TextureTransform;
		if (tape[ptr]) {
		TextureTransform = tape[ptr++];
		} else { TextureTransform = null; ptr++; }
		let Parameter;
		if (tape[ptr]) {
		Parameter = [];
		let Parameter_index = 0;
		while (Parameter_index < tape[ptr].length) {
			Parameter.push(tape[ptr][Parameter_index++]);
		}
	ptr++;
		} else { Parameter = null; ptr++; }
		let URLReference;
		if (tape[ptr]) {
		URLReference = tape[ptr++];
		} else { URLReference = null; ptr++; }
		return new IfcImageTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, URLReference);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Mode){
		args.push(STRING)
		args.push(this.Mode)
		}
		else{ args.push(EMPTY); }
		if(this.TextureTransform){
		args.push(REF)
		args.push(this.TextureTransform)
		}
		else{ args.push(EMPTY); }
		if(this.Parameter){
		args.push(STRING)
		args.push(...this.Parameter)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.URLReference)
		return args;
	}
};
export class IfcIndexedColourMap {
	constructor(expressID: number, type: number, MappedTo: Handle<IfcTessellatedFaceSet> , Opacity: IfcNormalisedRatioMeasure | null, Colours: Handle<IfcColourRgbList> , ColourIndex: IfcPositiveInteger[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.MappedTo = MappedTo;
		this.Opacity = Opacity;
		this.Colours = Colours;
		this.ColourIndex = ColourIndex;
	}
	expressID: number;
	type: number;
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	Opacity: IfcNormalisedRatioMeasure | null;
	Colours: Handle<IfcColourRgbList> ;
	ColourIndex: IfcPositiveInteger[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedColourMap
	{
		let ptr = 0;
		let MappedTo;
		if (tape[ptr]) {
		MappedTo = tape[ptr++];
		} else { MappedTo = null; ptr++; }
		let Opacity;
		if (tape[ptr]) {
		Opacity = tape[ptr++];
		} else { Opacity = null; ptr++; }
		let Colours;
		if (tape[ptr]) {
		Colours = tape[ptr++];
		} else { Colours = null; ptr++; }
		let ColourIndex;
		if (tape[ptr]) {
		ColourIndex = [];
		let ColourIndex_index = 0;
		while (ColourIndex_index < tape[ptr].length) {
			ColourIndex.push(tape[ptr][ColourIndex_index++]);
		}
	ptr++;
		} else { ColourIndex = null; ptr++; }
		return new IfcIndexedColourMap(expressID, type, MappedTo, Opacity, Colours, ColourIndex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.MappedTo)
		if(this.Opacity){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Colours)
		return args;
	}
};
export class IfcIndexedPolyCurve {
	constructor(expressID: number, type: number, Points: Handle<IfcCartesianPointList> , Segments: IfcSegmentIndexSelect[] | null, SelfIntersect: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Points = Points;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Points: Handle<IfcCartesianPointList> ;
	Segments: IfcSegmentIndexSelect[] | null;
	SelfIntersect: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolyCurve
	{
		let ptr = 0;
		let Points;
		if (tape[ptr]) {
		Points = tape[ptr++];
		} else { Points = null; ptr++; }
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcIndexedPolyCurve(expressID, type, Points, Segments, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Points)
		if(this.Segments){
		}
		else{ args.push(EMPTY); }
		if(this.SelfIntersect){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcIndexedPolygonalFace {
	constructor(expressID: number, type: number, CoordIndex: IfcPositiveInteger[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.CoordIndex = CoordIndex;
	}
	expressID: number;
	type: number;
	CoordIndex: IfcPositiveInteger[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolygonalFace
	{
		let ptr = 0;
		let CoordIndex;
		if (tape[ptr]) {
		CoordIndex = [];
		let CoordIndex_index = 0;
		while (CoordIndex_index < tape[ptr].length) {
			CoordIndex.push(tape[ptr][CoordIndex_index++]);
		}
	ptr++;
		} else { CoordIndex = null; ptr++; }
		return new IfcIndexedPolygonalFace(expressID, type, CoordIndex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcIndexedPolygonalFaceWithVoids {
	constructor(expressID: number, type: number, CoordIndex: IfcPositiveInteger[] , InnerCoordIndices: IfcPositiveInteger[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.CoordIndex = CoordIndex;
		this.InnerCoordIndices = InnerCoordIndices;
	}
	expressID: number;
	type: number;
	CoordIndex: IfcPositiveInteger[] ;
	InnerCoordIndices: IfcPositiveInteger[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedPolygonalFaceWithVoids
	{
		let ptr = 0;
		let CoordIndex;
		if (tape[ptr]) {
		CoordIndex = [];
		let CoordIndex_index = 0;
		while (CoordIndex_index < tape[ptr].length) {
			CoordIndex.push(tape[ptr][CoordIndex_index++]);
		}
	ptr++;
		} else { CoordIndex = null; ptr++; }
		let InnerCoordIndices;
		if (tape[ptr]) {
		InnerCoordIndices = [];
		let InnerCoordIndices_index = 0;
		while (InnerCoordIndices_index < tape[ptr].length) {
			InnerCoordIndices.push(tape[ptr][InnerCoordIndices_index++]);
		}
	ptr++;
		} else { InnerCoordIndices = null; ptr++; }
		return new IfcIndexedPolygonalFaceWithVoids(expressID, type, CoordIndex, InnerCoordIndices);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcIndexedTextureMap {
	constructor(expressID: number, type: number, Maps: Handle<IfcSurfaceTexture>[] , MappedTo: Handle<IfcTessellatedFaceSet> , TexCoords: Handle<IfcTextureVertexList> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
	}
	expressID: number;
	type: number;
	Maps: Handle<IfcSurfaceTexture>[] ;
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	TexCoords: Handle<IfcTextureVertexList> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedTextureMap
	{
		let ptr = 0;
		let Maps;
		if (tape[ptr]) {
		Maps = [];
		let Maps_index = 0;
		while (Maps_index < tape[ptr].length) {
			Maps.push(tape[ptr][Maps_index++]);
		}
	ptr++;
		} else { Maps = null; ptr++; }
		let MappedTo;
		if (tape[ptr]) {
		MappedTo = tape[ptr++];
		} else { MappedTo = null; ptr++; }
		let TexCoords;
		if (tape[ptr]) {
		TexCoords = tape[ptr++];
		} else { TexCoords = null; ptr++; }
		return new IfcIndexedTextureMap(expressID, type, Maps, MappedTo, TexCoords);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Maps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.MappedTo)
		args.push(REF)
		args.push(this.TexCoords)
		return args;
	}
};
export class IfcIndexedTriangleTextureMap {
	constructor(expressID: number, type: number, Maps: Handle<IfcSurfaceTexture>[] , MappedTo: Handle<IfcTessellatedFaceSet> , TexCoords: Handle<IfcTextureVertexList> , TexCoordIndex: IfcPositiveInteger[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.MappedTo = MappedTo;
		this.TexCoords = TexCoords;
		this.TexCoordIndex = TexCoordIndex;
	}
	expressID: number;
	type: number;
	Maps: Handle<IfcSurfaceTexture>[] ;
	MappedTo: Handle<IfcTessellatedFaceSet> ;
	TexCoords: Handle<IfcTextureVertexList> ;
	TexCoordIndex: IfcPositiveInteger[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIndexedTriangleTextureMap
	{
		let ptr = 0;
		let Maps;
		if (tape[ptr]) {
		Maps = [];
		let Maps_index = 0;
		while (Maps_index < tape[ptr].length) {
			Maps.push(tape[ptr][Maps_index++]);
		}
	ptr++;
		} else { Maps = null; ptr++; }
		let MappedTo;
		if (tape[ptr]) {
		MappedTo = tape[ptr++];
		} else { MappedTo = null; ptr++; }
		let TexCoords;
		if (tape[ptr]) {
		TexCoords = tape[ptr++];
		} else { TexCoords = null; ptr++; }
		let TexCoordIndex;
		if (tape[ptr]) {
		TexCoordIndex = [];
		let TexCoordIndex_index = 0;
		while (TexCoordIndex_index < tape[ptr].length) {
			TexCoordIndex.push(tape[ptr][TexCoordIndex_index++]);
		}
	ptr++;
		} else { TexCoordIndex = null; ptr++; }
		return new IfcIndexedTriangleTextureMap(expressID, type, Maps, MappedTo, TexCoords, TexCoordIndex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Maps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.MappedTo)
		args.push(REF)
		args.push(this.TexCoords)
		if(this.TexCoordIndex){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcInterceptor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcInterceptorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcInterceptorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcInterceptor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcInterceptorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcInterceptor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcInterceptorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcInterceptorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcInterceptorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcInterceptorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcInterceptorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcInterceptorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcIntersectionCurve {
	constructor(expressID: number, type: number, Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve>[] , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.expressID = expressID;
		this.type = type;
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	expressID: number;
	type: number;
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve>[] ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIntersectionCurve
	{
		let ptr = 0;
		let Curve3D;
		if (tape[ptr]) {
		Curve3D = tape[ptr++];
		} else { Curve3D = null; ptr++; }
		let AssociatedGeometry;
		if (tape[ptr]) {
		AssociatedGeometry = [];
		let AssociatedGeometry_index = 0;
		while (AssociatedGeometry_index < tape[ptr].length) {
			AssociatedGeometry.push(tape[ptr][AssociatedGeometry_index++]);
		}
	ptr++;
		} else { AssociatedGeometry = null; ptr++; }
		let MasterRepresentation;
		if (tape[ptr]) {
		MasterRepresentation = new IfcPreferredSurfaceCurveRepresentation(tape[ptr++]);
		} else { MasterRepresentation = null; ptr++; }
		return new IfcIntersectionCurve(expressID, type, Curve3D, AssociatedGeometry, MasterRepresentation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Curve3D)
		args.push(SET_BEGIN)
		this.AssociatedGeometry.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.MasterRepresentation.value)
		return args;
	}
};
export class IfcInventory {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcInventoryTypeEnum | null, Jurisdiction: IfcActorSelect | null, ResponsiblePersons: Handle<IfcPerson>[] | null, LastUpdateDate: IfcDate | null, CurrentValue: Handle<IfcCostValue> | null, OriginalValue: Handle<IfcCostValue> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.Jurisdiction = Jurisdiction;
		this.ResponsiblePersons = ResponsiblePersons;
		this.LastUpdateDate = LastUpdateDate;
		this.CurrentValue = CurrentValue;
		this.OriginalValue = OriginalValue;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcInventoryTypeEnum | null;
	Jurisdiction: IfcActorSelect | null;
	ResponsiblePersons: Handle<IfcPerson>[] | null;
	LastUpdateDate: IfcDate | null;
	CurrentValue: Handle<IfcCostValue> | null;
	OriginalValue: Handle<IfcCostValue> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcInventory
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcInventoryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Jurisdiction;
		if (tape[ptr]) {
		Jurisdiction = tape[ptr++];
		} else { Jurisdiction = null; ptr++; }
		let ResponsiblePersons;
		if (tape[ptr]) {
		ResponsiblePersons = [];
		let ResponsiblePersons_index = 0;
		while (ResponsiblePersons_index < tape[ptr].length) {
			ResponsiblePersons.push(tape[ptr][ResponsiblePersons_index++]);
		}
	ptr++;
		} else { ResponsiblePersons = null; ptr++; }
		let LastUpdateDate;
		if (tape[ptr]) {
		LastUpdateDate = tape[ptr++];
		} else { LastUpdateDate = null; ptr++; }
		let CurrentValue;
		if (tape[ptr]) {
		CurrentValue = tape[ptr++];
		} else { CurrentValue = null; ptr++; }
		let OriginalValue;
		if (tape[ptr]) {
		OriginalValue = tape[ptr++];
		} else { OriginalValue = null; ptr++; }
		return new IfcInventory(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, Jurisdiction, ResponsiblePersons, LastUpdateDate, CurrentValue, OriginalValue);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Jurisdiction){
		}
		else{ args.push(EMPTY); }
		if(this.ResponsiblePersons){
		args.push(SET_BEGIN)
		this.ResponsiblePersons.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.LastUpdateDate){
		args.push(STRING)
		args.push(this.LastUpdateDate)
		}
		else{ args.push(EMPTY); }
		if(this.CurrentValue){
		args.push(REF)
		args.push(this.CurrentValue)
		}
		else{ args.push(EMPTY); }
		if(this.OriginalValue){
		args.push(REF)
		args.push(this.OriginalValue)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcIrregularTimeSeries {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null, Values: Handle<IfcIrregularTimeSeriesValue>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
		this.Values = Values;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	Values: Handle<IfcIrregularTimeSeriesValue>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeries
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let EndTime;
		if (tape[ptr]) {
		EndTime = tape[ptr++];
		} else { EndTime = null; ptr++; }
		let TimeSeriesDataType;
		if (tape[ptr]) {
		TimeSeriesDataType = new IfcTimeSeriesDataTypeEnum(tape[ptr++]);
		} else { TimeSeriesDataType = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let Values;
		if (tape[ptr]) {
		Values = [];
		let Values_index = 0;
		while (Values_index < tape[ptr].length) {
			Values.push(tape[ptr][Values_index++]);
		}
	ptr++;
		} else { Values = null; ptr++; }
		return new IfcIrregularTimeSeries(expressID, type, Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit, Values);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		args.push(STRING)
		args.push(this.EndTime)
		args.push(ENUM);
		args.push(this.TimeSeriesDataType.value)
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Values.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcIrregularTimeSeriesValue {
	constructor(expressID: number, type: number, TimeStamp: IfcDateTime , ListValues: IfcValue[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.TimeStamp = TimeStamp;
		this.ListValues = ListValues;
	}
	expressID: number;
	type: number;
	TimeStamp: IfcDateTime ;
	ListValues: IfcValue[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcIrregularTimeSeriesValue
	{
		let ptr = 0;
		let TimeStamp;
		if (tape[ptr]) {
		TimeStamp = tape[ptr++];
		} else { TimeStamp = null; ptr++; }
		let ListValues;
		if (tape[ptr]) {
		ListValues = [];
		let ListValues_index = 0;
		while (ListValues_index < tape[ptr].length) {
			ListValues.push(tape[ptr][ListValues_index++]);
		}
	ptr++;
		} else { ListValues = null; ptr++; }
		return new IfcIrregularTimeSeriesValue(expressID, type, TimeStamp, ListValues);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.TimeStamp)
		return args;
	}
};
export class IfcJunctionBox {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcJunctionBoxTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcJunctionBoxTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcJunctionBox
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcJunctionBoxTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcJunctionBox(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcJunctionBoxType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcJunctionBoxTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcJunctionBoxTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcJunctionBoxType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcJunctionBoxTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcJunctionBoxType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcLShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , Width: IfcPositiveLengthMeasure | null, Thickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null, LegSlope: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.Width = Width;
		this.Thickness = Thickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
		this.LegSlope = LegSlope;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	Width: IfcPositiveLengthMeasure | null;
	Thickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	LegSlope: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let Width;
		if (tape[ptr]) {
		Width = tape[ptr++];
		} else { Width = null; ptr++; }
		let Thickness;
		if (tape[ptr]) {
		Thickness = tape[ptr++];
		} else { Thickness = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		let EdgeRadius;
		if (tape[ptr]) {
		EdgeRadius = tape[ptr++];
		} else { EdgeRadius = null; ptr++; }
		let LegSlope;
		if (tape[ptr]) {
		LegSlope = tape[ptr++];
		} else { LegSlope = null; ptr++; }
		return new IfcLShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, Width, Thickness, FilletRadius, EdgeRadius, LegSlope);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.Width){
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.EdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.LegSlope){
		args.push(REAL)
		args.push(this.LegSlope)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLaborResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcLaborResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcLaborResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLaborResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLaborResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLaborResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLaborResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcLaborResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcLaborResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLaborResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLaborResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLaborResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcLagTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, LagValue: IfcTimeOrRatioSelect , DurationType: IfcTaskDurationEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.LagValue = LagValue;
		this.DurationType = DurationType;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	LagValue: IfcTimeOrRatioSelect ;
	DurationType: IfcTaskDurationEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLagTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let LagValue;
		if (tape[ptr]) {
		LagValue = tape[ptr++];
		} else { LagValue = null; ptr++; }
		let DurationType;
		if (tape[ptr]) {
		DurationType = new IfcTaskDurationEnum(tape[ptr++]);
		} else { DurationType = null; ptr++; }
		return new IfcLagTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, LagValue, DurationType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.DurationType.value)
		return args;
	}
};
export class IfcLamp {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcLampTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcLampTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLamp
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLampTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLamp(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLampType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcLampTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcLampTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLampType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLampTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLampType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcLibraryInformation {
	constructor(expressID: number, type: number, Name: IfcLabel , Version: IfcLabel | null, Publisher: IfcActorSelect | null, VersionDate: IfcDateTime | null, Location: IfcURIReference | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Version = Version;
		this.Publisher = Publisher;
		this.VersionDate = VersionDate;
		this.Location = Location;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Version: IfcLabel | null;
	Publisher: IfcActorSelect | null;
	VersionDate: IfcDateTime | null;
	Location: IfcURIReference | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryInformation
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Version;
		if (tape[ptr]) {
		Version = tape[ptr++];
		} else { Version = null; ptr++; }
		let Publisher;
		if (tape[ptr]) {
		Publisher = tape[ptr++];
		} else { Publisher = null; ptr++; }
		let VersionDate;
		if (tape[ptr]) {
		VersionDate = tape[ptr++];
		} else { VersionDate = null; ptr++; }
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcLibraryInformation(expressID, type, Name, Version, Publisher, VersionDate, Location, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Version){
		args.push(STRING)
		args.push(this.Version)
		}
		else{ args.push(EMPTY); }
		if(this.Publisher){
		}
		else{ args.push(EMPTY); }
		if(this.VersionDate){
		args.push(STRING)
		args.push(this.VersionDate)
		}
		else{ args.push(EMPTY); }
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLibraryReference {
	constructor(expressID: number, type: number, Location: IfcURIReference | null, Identification: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, Language: IfcLanguageId | null, ReferencedLibrary: Handle<IfcLibraryInformation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Language = Language;
		this.ReferencedLibrary = ReferencedLibrary;
	}
	expressID: number;
	type: number;
	Location: IfcURIReference | null;
	Identification: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Language: IfcLanguageId | null;
	ReferencedLibrary: Handle<IfcLibraryInformation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLibraryReference
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Language;
		if (tape[ptr]) {
		Language = tape[ptr++];
		} else { Language = null; ptr++; }
		let ReferencedLibrary;
		if (tape[ptr]) {
		ReferencedLibrary = tape[ptr++];
		} else { ReferencedLibrary = null; ptr++; }
		return new IfcLibraryReference(expressID, type, Location, Identification, Name, Description, Language, ReferencedLibrary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Location){
		args.push(STRING)
		args.push(this.Location)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Language){
		}
		else{ args.push(EMPTY); }
		if(this.ReferencedLibrary){
		args.push(REF)
		args.push(this.ReferencedLibrary)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLightDistributionData {
	constructor(expressID: number, type: number, MainPlaneAngle: IfcPlaneAngleMeasure , SecondaryPlaneAngle: IfcPlaneAngleMeasure[] , LuminousIntensity: IfcLuminousIntensityDistributionMeasure[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.MainPlaneAngle = MainPlaneAngle;
		this.SecondaryPlaneAngle = SecondaryPlaneAngle;
		this.LuminousIntensity = LuminousIntensity;
	}
	expressID: number;
	type: number;
	MainPlaneAngle: IfcPlaneAngleMeasure ;
	SecondaryPlaneAngle: IfcPlaneAngleMeasure[] ;
	LuminousIntensity: IfcLuminousIntensityDistributionMeasure[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightDistributionData
	{
		let ptr = 0;
		let MainPlaneAngle;
		if (tape[ptr]) {
		MainPlaneAngle = tape[ptr++];
		} else { MainPlaneAngle = null; ptr++; }
		let SecondaryPlaneAngle;
		if (tape[ptr]) {
		SecondaryPlaneAngle = [];
		let SecondaryPlaneAngle_index = 0;
		while (SecondaryPlaneAngle_index < tape[ptr].length) {
			SecondaryPlaneAngle.push(tape[ptr][SecondaryPlaneAngle_index++]);
		}
	ptr++;
		} else { SecondaryPlaneAngle = null; ptr++; }
		let LuminousIntensity;
		if (tape[ptr]) {
		LuminousIntensity = [];
		let LuminousIntensity_index = 0;
		while (LuminousIntensity_index < tape[ptr].length) {
			LuminousIntensity.push(tape[ptr][LuminousIntensity_index++]);
		}
	ptr++;
		} else { LuminousIntensity = null; ptr++; }
		return new IfcLightDistributionData(expressID, type, MainPlaneAngle, SecondaryPlaneAngle, LuminousIntensity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.MainPlaneAngle)
		args.push(REAL)
		args.push(...this.SecondaryPlaneAngle)
		args.push(REAL)
		args.push(...this.LuminousIntensity)
		return args;
	}
};
export class IfcLightFixture {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcLightFixtureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcLightFixtureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightFixture
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLightFixtureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLightFixture(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLightFixtureType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcLightFixtureTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcLightFixtureTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightFixtureType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLightFixtureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcLightFixtureType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcLightIntensityDistribution {
	constructor(expressID: number, type: number, LightDistributionCurve: IfcLightDistributionCurveEnum , DistributionData: Handle<IfcLightDistributionData>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.LightDistributionCurve = LightDistributionCurve;
		this.DistributionData = DistributionData;
	}
	expressID: number;
	type: number;
	LightDistributionCurve: IfcLightDistributionCurveEnum ;
	DistributionData: Handle<IfcLightDistributionData>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightIntensityDistribution
	{
		let ptr = 0;
		let LightDistributionCurve;
		if (tape[ptr]) {
		LightDistributionCurve = new IfcLightDistributionCurveEnum(tape[ptr++]);
		} else { LightDistributionCurve = null; ptr++; }
		let DistributionData;
		if (tape[ptr]) {
		DistributionData = [];
		let DistributionData_index = 0;
		while (DistributionData_index < tape[ptr].length) {
			DistributionData.push(tape[ptr][DistributionData_index++]);
		}
	ptr++;
		} else { DistributionData = null; ptr++; }
		return new IfcLightIntensityDistribution(expressID, type, LightDistributionCurve, DistributionData);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.LightDistributionCurve.value)
		args.push(SET_BEGIN)
		this.DistributionData.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcLightSource {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSource
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		return new IfcLightSource(expressID, type, Name, LightColour, AmbientIntensity, Intensity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLightSourceAmbient {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceAmbient
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		return new IfcLightSourceAmbient(expressID, type, Name, LightColour, AmbientIntensity, Intensity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLightSourceDirectional {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Orientation: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Orientation = Orientation;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Orientation: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceDirectional
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		return new IfcLightSourceDirectional(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Orientation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Orientation)
		return args;
	}
};
export class IfcLightSourceGoniometric {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcAxis2Placement3D> , ColourAppearance: Handle<IfcColourRgb> | null, ColourTemperature: IfcThermodynamicTemperatureMeasure , LuminousFlux: IfcLuminousFluxMeasure , LightEmissionSource: IfcLightEmissionSourceEnum , LightDistributionDataSource: IfcLightDistributionDataSourceSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.ColourAppearance = ColourAppearance;
		this.ColourTemperature = ColourTemperature;
		this.LuminousFlux = LuminousFlux;
		this.LightEmissionSource = LightEmissionSource;
		this.LightDistributionDataSource = LightDistributionDataSource;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcAxis2Placement3D> ;
	ColourAppearance: Handle<IfcColourRgb> | null;
	ColourTemperature: IfcThermodynamicTemperatureMeasure ;
	LuminousFlux: IfcLuminousFluxMeasure ;
	LightEmissionSource: IfcLightEmissionSourceEnum ;
	LightDistributionDataSource: IfcLightDistributionDataSourceSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceGoniometric
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let ColourAppearance;
		if (tape[ptr]) {
		ColourAppearance = tape[ptr++];
		} else { ColourAppearance = null; ptr++; }
		let ColourTemperature;
		if (tape[ptr]) {
		ColourTemperature = tape[ptr++];
		} else { ColourTemperature = null; ptr++; }
		let LuminousFlux;
		if (tape[ptr]) {
		LuminousFlux = tape[ptr++];
		} else { LuminousFlux = null; ptr++; }
		let LightEmissionSource;
		if (tape[ptr]) {
		LightEmissionSource = new IfcLightEmissionSourceEnum(tape[ptr++]);
		} else { LightEmissionSource = null; ptr++; }
		let LightDistributionDataSource;
		if (tape[ptr]) {
		LightDistributionDataSource = tape[ptr++];
		} else { LightDistributionDataSource = null; ptr++; }
		return new IfcLightSourceGoniometric(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, ColourAppearance, ColourTemperature, LuminousFlux, LightEmissionSource, LightDistributionDataSource);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Position)
		if(this.ColourAppearance){
		args.push(REF)
		args.push(this.ColourAppearance)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.ColourTemperature)
		args.push(REAL)
		args.push(this.LuminousFlux)
		args.push(ENUM);
		args.push(this.LightEmissionSource.value)
		return args;
	}
};
export class IfcLightSourcePositional {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcCartesianPoint> , Radius: IfcPositiveLengthMeasure , ConstantAttenuation: IfcReal , DistanceAttenuation: IfcReal , QuadricAttenuation: IfcReal )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcCartesianPoint> ;
	Radius: IfcPositiveLengthMeasure ;
	ConstantAttenuation: IfcReal ;
	DistanceAttenuation: IfcReal ;
	QuadricAttenuation: IfcReal ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourcePositional
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let ConstantAttenuation;
		if (tape[ptr]) {
		ConstantAttenuation = tape[ptr++];
		} else { ConstantAttenuation = null; ptr++; }
		let DistanceAttenuation;
		if (tape[ptr]) {
		DistanceAttenuation = tape[ptr++];
		} else { DistanceAttenuation = null; ptr++; }
		let QuadricAttenuation;
		if (tape[ptr]) {
		QuadricAttenuation = tape[ptr++];
		} else { QuadricAttenuation = null; ptr++; }
		return new IfcLightSourcePositional(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Position)
		args.push(REAL)
		args.push(this.ConstantAttenuation)
		args.push(REAL)
		args.push(this.DistanceAttenuation)
		args.push(REAL)
		args.push(this.QuadricAttenuation)
		return args;
	}
};
export class IfcLightSourceSpot {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LightColour: Handle<IfcColourRgb> , AmbientIntensity: IfcNormalisedRatioMeasure | null, Intensity: IfcNormalisedRatioMeasure | null, Position: Handle<IfcCartesianPoint> , Radius: IfcPositiveLengthMeasure , ConstantAttenuation: IfcReal , DistanceAttenuation: IfcReal , QuadricAttenuation: IfcReal , Orientation: Handle<IfcDirection> , ConcentrationExponent: IfcReal | null, SpreadAngle: IfcPositivePlaneAngleMeasure , BeamWidthAngle: IfcPositivePlaneAngleMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LightColour = LightColour;
		this.AmbientIntensity = AmbientIntensity;
		this.Intensity = Intensity;
		this.Position = Position;
		this.Radius = Radius;
		this.ConstantAttenuation = ConstantAttenuation;
		this.DistanceAttenuation = DistanceAttenuation;
		this.QuadricAttenuation = QuadricAttenuation;
		this.Orientation = Orientation;
		this.ConcentrationExponent = ConcentrationExponent;
		this.SpreadAngle = SpreadAngle;
		this.BeamWidthAngle = BeamWidthAngle;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LightColour: Handle<IfcColourRgb> ;
	AmbientIntensity: IfcNormalisedRatioMeasure | null;
	Intensity: IfcNormalisedRatioMeasure | null;
	Position: Handle<IfcCartesianPoint> ;
	Radius: IfcPositiveLengthMeasure ;
	ConstantAttenuation: IfcReal ;
	DistanceAttenuation: IfcReal ;
	QuadricAttenuation: IfcReal ;
	Orientation: Handle<IfcDirection> ;
	ConcentrationExponent: IfcReal | null;
	SpreadAngle: IfcPositivePlaneAngleMeasure ;
	BeamWidthAngle: IfcPositivePlaneAngleMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLightSourceSpot
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LightColour;
		if (tape[ptr]) {
		LightColour = tape[ptr++];
		} else { LightColour = null; ptr++; }
		let AmbientIntensity;
		if (tape[ptr]) {
		AmbientIntensity = tape[ptr++];
		} else { AmbientIntensity = null; ptr++; }
		let Intensity;
		if (tape[ptr]) {
		Intensity = tape[ptr++];
		} else { Intensity = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let ConstantAttenuation;
		if (tape[ptr]) {
		ConstantAttenuation = tape[ptr++];
		} else { ConstantAttenuation = null; ptr++; }
		let DistanceAttenuation;
		if (tape[ptr]) {
		DistanceAttenuation = tape[ptr++];
		} else { DistanceAttenuation = null; ptr++; }
		let QuadricAttenuation;
		if (tape[ptr]) {
		QuadricAttenuation = tape[ptr++];
		} else { QuadricAttenuation = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		let ConcentrationExponent;
		if (tape[ptr]) {
		ConcentrationExponent = tape[ptr++];
		} else { ConcentrationExponent = null; ptr++; }
		let SpreadAngle;
		if (tape[ptr]) {
		SpreadAngle = tape[ptr++];
		} else { SpreadAngle = null; ptr++; }
		let BeamWidthAngle;
		if (tape[ptr]) {
		BeamWidthAngle = tape[ptr++];
		} else { BeamWidthAngle = null; ptr++; }
		return new IfcLightSourceSpot(expressID, type, Name, LightColour, AmbientIntensity, Intensity, Position, Radius, ConstantAttenuation, DistanceAttenuation, QuadricAttenuation, Orientation, ConcentrationExponent, SpreadAngle, BeamWidthAngle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.LightColour)
		if(this.AmbientIntensity){
		}
		else{ args.push(EMPTY); }
		if(this.Intensity){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Position)
		args.push(REAL)
		args.push(this.ConstantAttenuation)
		args.push(REAL)
		args.push(this.DistanceAttenuation)
		args.push(REAL)
		args.push(this.QuadricAttenuation)
		args.push(REF)
		args.push(this.Orientation)
		if(this.ConcentrationExponent){
		args.push(REAL)
		args.push(this.ConcentrationExponent)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLine {
	constructor(expressID: number, type: number, Pnt: Handle<IfcCartesianPoint> , Dir: Handle<IfcVector> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Pnt = Pnt;
		this.Dir = Dir;
	}
	expressID: number;
	type: number;
	Pnt: Handle<IfcCartesianPoint> ;
	Dir: Handle<IfcVector> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLine
	{
		let ptr = 0;
		let Pnt;
		if (tape[ptr]) {
		Pnt = tape[ptr++];
		} else { Pnt = null; ptr++; }
		let Dir;
		if (tape[ptr]) {
		Dir = tape[ptr++];
		} else { Dir = null; ptr++; }
		return new IfcLine(expressID, type, Pnt, Dir);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Pnt)
		args.push(REF)
		args.push(this.Dir)
		return args;
	}
};
export class IfcLineSegment2D {
	constructor(expressID: number, type: number, StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
	}
	expressID: number;
	type: number;
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLineSegment2D
	{
		let ptr = 0;
		let StartPoint;
		if (tape[ptr]) {
		StartPoint = tape[ptr++];
		} else { StartPoint = null; ptr++; }
		let StartDirection;
		if (tape[ptr]) {
		StartDirection = tape[ptr++];
		} else { StartDirection = null; ptr++; }
		let SegmentLength;
		if (tape[ptr]) {
		SegmentLength = tape[ptr++];
		} else { SegmentLength = null; ptr++; }
		return new IfcLineSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.StartPoint)
		args.push(REAL)
		args.push(this.StartDirection)
		return args;
	}
};
export class IfcLinearPlacement {
	constructor(expressID: number, type: number, PlacementRelTo: Handle<IfcObjectPlacement> | null, PlacementMeasuredAlong: Handle<IfcCurve> , Distance: Handle<IfcDistanceExpression> , Orientation: Handle<IfcOrientationExpression> | null, CartesianPosition: Handle<IfcAxis2Placement3D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.PlacementMeasuredAlong = PlacementMeasuredAlong;
		this.Distance = Distance;
		this.Orientation = Orientation;
		this.CartesianPosition = CartesianPosition;
	}
	expressID: number;
	type: number;
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	PlacementMeasuredAlong: Handle<IfcCurve> ;
	Distance: Handle<IfcDistanceExpression> ;
	Orientation: Handle<IfcOrientationExpression> | null;
	CartesianPosition: Handle<IfcAxis2Placement3D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLinearPlacement
	{
		let ptr = 0;
		let PlacementRelTo;
		if (tape[ptr]) {
		PlacementRelTo = tape[ptr++];
		} else { PlacementRelTo = null; ptr++; }
		let PlacementMeasuredAlong;
		if (tape[ptr]) {
		PlacementMeasuredAlong = tape[ptr++];
		} else { PlacementMeasuredAlong = null; ptr++; }
		let Distance;
		if (tape[ptr]) {
		Distance = tape[ptr++];
		} else { Distance = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		let CartesianPosition;
		if (tape[ptr]) {
		CartesianPosition = tape[ptr++];
		} else { CartesianPosition = null; ptr++; }
		return new IfcLinearPlacement(expressID, type, PlacementRelTo, PlacementMeasuredAlong, Distance, Orientation, CartesianPosition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PlacementRelTo){
		args.push(REF)
		args.push(this.PlacementRelTo)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.PlacementMeasuredAlong)
		args.push(REF)
		args.push(this.Distance)
		if(this.Orientation){
		args.push(REF)
		args.push(this.Orientation)
		}
		else{ args.push(EMPTY); }
		if(this.CartesianPosition){
		args.push(REF)
		args.push(this.CartesianPosition)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLinearPositioningElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Axis: Handle<IfcCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Axis = Axis;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Axis: Handle<IfcCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLinearPositioningElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		return new IfcLinearPositioningElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Axis);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Axis)
		return args;
	}
};
export class IfcLocalPlacement {
	constructor(expressID: number, type: number, PlacementRelTo: Handle<IfcObjectPlacement> | null, RelativePlacement: IfcAxis2Placement )
	{
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
		this.RelativePlacement = RelativePlacement;
	}
	expressID: number;
	type: number;
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	RelativePlacement: IfcAxis2Placement ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLocalPlacement
	{
		let ptr = 0;
		let PlacementRelTo;
		if (tape[ptr]) {
		PlacementRelTo = tape[ptr++];
		} else { PlacementRelTo = null; ptr++; }
		let RelativePlacement;
		if (tape[ptr]) {
		RelativePlacement = tape[ptr++];
		} else { RelativePlacement = null; ptr++; }
		return new IfcLocalPlacement(expressID, type, PlacementRelTo, RelativePlacement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PlacementRelTo){
		args.push(REF)
		args.push(this.PlacementRelTo)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcLoop {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcLoop
	{
		let ptr = 0;
		return new IfcLoop(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcManifoldSolidBrep {
	constructor(expressID: number, type: number, Outer: Handle<IfcClosedShell> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Outer = Outer;
	}
	expressID: number;
	type: number;
	Outer: Handle<IfcClosedShell> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcManifoldSolidBrep
	{
		let ptr = 0;
		let Outer;
		if (tape[ptr]) {
		Outer = tape[ptr++];
		} else { Outer = null; ptr++; }
		return new IfcManifoldSolidBrep(expressID, type, Outer);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Outer)
		return args;
	}
};
export class IfcMapConversion {
	constructor(expressID: number, type: number, SourceCRS: IfcCoordinateReferenceSystemSelect , TargetCRS: Handle<IfcCoordinateReferenceSystem> , Eastings: IfcLengthMeasure , Northings: IfcLengthMeasure , OrthogonalHeight: IfcLengthMeasure , XAxisAbscissa: IfcReal | null, XAxisOrdinate: IfcReal | null, Scale: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SourceCRS = SourceCRS;
		this.TargetCRS = TargetCRS;
		this.Eastings = Eastings;
		this.Northings = Northings;
		this.OrthogonalHeight = OrthogonalHeight;
		this.XAxisAbscissa = XAxisAbscissa;
		this.XAxisOrdinate = XAxisOrdinate;
		this.Scale = Scale;
	}
	expressID: number;
	type: number;
	SourceCRS: IfcCoordinateReferenceSystemSelect ;
	TargetCRS: Handle<IfcCoordinateReferenceSystem> ;
	Eastings: IfcLengthMeasure ;
	Northings: IfcLengthMeasure ;
	OrthogonalHeight: IfcLengthMeasure ;
	XAxisAbscissa: IfcReal | null;
	XAxisOrdinate: IfcReal | null;
	Scale: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMapConversion
	{
		let ptr = 0;
		let SourceCRS;
		if (tape[ptr]) {
		SourceCRS = tape[ptr++];
		} else { SourceCRS = null; ptr++; }
		let TargetCRS;
		if (tape[ptr]) {
		TargetCRS = tape[ptr++];
		} else { TargetCRS = null; ptr++; }
		let Eastings;
		if (tape[ptr]) {
		Eastings = tape[ptr++];
		} else { Eastings = null; ptr++; }
		let Northings;
		if (tape[ptr]) {
		Northings = tape[ptr++];
		} else { Northings = null; ptr++; }
		let OrthogonalHeight;
		if (tape[ptr]) {
		OrthogonalHeight = tape[ptr++];
		} else { OrthogonalHeight = null; ptr++; }
		let XAxisAbscissa;
		if (tape[ptr]) {
		XAxisAbscissa = tape[ptr++];
		} else { XAxisAbscissa = null; ptr++; }
		let XAxisOrdinate;
		if (tape[ptr]) {
		XAxisOrdinate = tape[ptr++];
		} else { XAxisOrdinate = null; ptr++; }
		let Scale;
		if (tape[ptr]) {
		Scale = tape[ptr++];
		} else { Scale = null; ptr++; }
		return new IfcMapConversion(expressID, type, SourceCRS, TargetCRS, Eastings, Northings, OrthogonalHeight, XAxisAbscissa, XAxisOrdinate, Scale);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.TargetCRS)
		args.push(REAL)
		args.push(this.Eastings)
		args.push(REAL)
		args.push(this.Northings)
		args.push(REAL)
		args.push(this.OrthogonalHeight)
		if(this.XAxisAbscissa){
		args.push(REAL)
		args.push(this.XAxisAbscissa)
		}
		else{ args.push(EMPTY); }
		if(this.XAxisOrdinate){
		args.push(REAL)
		args.push(this.XAxisOrdinate)
		}
		else{ args.push(EMPTY); }
		if(this.Scale){
		args.push(REAL)
		args.push(this.Scale)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMappedItem {
	constructor(expressID: number, type: number, MappingSource: Handle<IfcRepresentationMap> , MappingTarget: Handle<IfcCartesianTransformationOperator> )
	{
		this.expressID = expressID;
		this.type = type;
		this.MappingSource = MappingSource;
		this.MappingTarget = MappingTarget;
	}
	expressID: number;
	type: number;
	MappingSource: Handle<IfcRepresentationMap> ;
	MappingTarget: Handle<IfcCartesianTransformationOperator> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMappedItem
	{
		let ptr = 0;
		let MappingSource;
		if (tape[ptr]) {
		MappingSource = tape[ptr++];
		} else { MappingSource = null; ptr++; }
		let MappingTarget;
		if (tape[ptr]) {
		MappingTarget = tape[ptr++];
		} else { MappingTarget = null; ptr++; }
		return new IfcMappedItem(expressID, type, MappingSource, MappingTarget);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.MappingSource)
		args.push(REF)
		args.push(this.MappingTarget)
		return args;
	}
};
export class IfcMaterial {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Category: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Category: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterial
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		return new IfcMaterial(expressID, type, Name, Description, Category);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialClassificationRelationship {
	constructor(expressID: number, type: number, MaterialClassifications: IfcClassificationSelect[] , ClassifiedMaterial: Handle<IfcMaterial> )
	{
		this.expressID = expressID;
		this.type = type;
		this.MaterialClassifications = MaterialClassifications;
		this.ClassifiedMaterial = ClassifiedMaterial;
	}
	expressID: number;
	type: number;
	MaterialClassifications: IfcClassificationSelect[] ;
	ClassifiedMaterial: Handle<IfcMaterial> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialClassificationRelationship
	{
		let ptr = 0;
		let MaterialClassifications;
		if (tape[ptr]) {
		MaterialClassifications = [];
		let MaterialClassifications_index = 0;
		while (MaterialClassifications_index < tape[ptr].length) {
			MaterialClassifications.push(tape[ptr][MaterialClassifications_index++]);
		}
	ptr++;
		} else { MaterialClassifications = null; ptr++; }
		let ClassifiedMaterial;
		if (tape[ptr]) {
		ClassifiedMaterial = tape[ptr++];
		} else { ClassifiedMaterial = null; ptr++; }
		return new IfcMaterialClassificationRelationship(expressID, type, MaterialClassifications, ClassifiedMaterial);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ClassifiedMaterial)
		return args;
	}
};
export class IfcMaterialConstituent {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> , Fraction: IfcNormalisedRatioMeasure | null, Category: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Fraction = Fraction;
		this.Category = Category;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> ;
	Fraction: IfcNormalisedRatioMeasure | null;
	Category: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialConstituent
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		let Fraction;
		if (tape[ptr]) {
		Fraction = tape[ptr++];
		} else { Fraction = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		return new IfcMaterialConstituent(expressID, type, Name, Description, Material, Fraction, Category);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Material)
		if(this.Fraction){
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialConstituentSet {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, MaterialConstituents: Handle<IfcMaterialConstituent>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.MaterialConstituents = MaterialConstituents;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	MaterialConstituents: Handle<IfcMaterialConstituent>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialConstituentSet
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let MaterialConstituents;
		if (tape[ptr]) {
		MaterialConstituents = [];
		let MaterialConstituents_index = 0;
		while (MaterialConstituents_index < tape[ptr].length) {
			MaterialConstituents.push(tape[ptr][MaterialConstituents_index++]);
		}
	ptr++;
		} else { MaterialConstituents = null; ptr++; }
		return new IfcMaterialConstituentSet(expressID, type, Name, Description, MaterialConstituents);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.MaterialConstituents){
		args.push(SET_BEGIN)
		this.MaterialConstituents.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialDefinition {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialDefinition
	{
		let ptr = 0;
		return new IfcMaterialDefinition(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcMaterialDefinitionRepresentation {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation>[] , RepresentedMaterial: Handle<IfcMaterial> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
		this.RepresentedMaterial = RepresentedMaterial;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation>[] ;
	RepresentedMaterial: Handle<IfcMaterial> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialDefinitionRepresentation
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Representations;
		if (tape[ptr]) {
		Representations = [];
		let Representations_index = 0;
		while (Representations_index < tape[ptr].length) {
			Representations.push(tape[ptr][Representations_index++]);
		}
	ptr++;
		} else { Representations = null; ptr++; }
		let RepresentedMaterial;
		if (tape[ptr]) {
		RepresentedMaterial = tape[ptr++];
		} else { RepresentedMaterial = null; ptr++; }
		return new IfcMaterialDefinitionRepresentation(expressID, type, Name, Description, Representations, RepresentedMaterial);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Representations.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RepresentedMaterial)
		return args;
	}
};
export class IfcMaterialLayer {
	constructor(expressID: number, type: number, Material: Handle<IfcMaterial> | null, LayerThickness: IfcNonNegativeLengthMeasure , IsVentilated: IfcLogical | null, Name: IfcLabel | null, Description: IfcText | null, Category: IfcLabel | null, Priority: IfcInteger | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
	}
	expressID: number;
	type: number;
	Material: Handle<IfcMaterial> | null;
	LayerThickness: IfcNonNegativeLengthMeasure ;
	IsVentilated: IfcLogical | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Category: IfcLabel | null;
	Priority: IfcInteger | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayer
	{
		let ptr = 0;
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		let LayerThickness;
		if (tape[ptr]) {
		LayerThickness = tape[ptr++];
		} else { LayerThickness = null; ptr++; }
		let IsVentilated;
		if (tape[ptr]) {
		IsVentilated = tape[ptr++];
		} else { IsVentilated = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		let Priority;
		if (tape[ptr]) {
		Priority = tape[ptr++];
		} else { Priority = null; ptr++; }
		return new IfcMaterialLayer(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Material){
		args.push(REF)
		args.push(this.Material)
		}
		else{ args.push(EMPTY); }
		if(this.IsVentilated){
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		if(this.Priority){
		args.push(REAL)
		args.push(this.Priority)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialLayerSet {
	constructor(expressID: number, type: number, MaterialLayers: Handle<IfcMaterialLayer>[] , LayerSetName: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.MaterialLayers = MaterialLayers;
		this.LayerSetName = LayerSetName;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	MaterialLayers: Handle<IfcMaterialLayer>[] ;
	LayerSetName: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSet
	{
		let ptr = 0;
		let MaterialLayers;
		if (tape[ptr]) {
		MaterialLayers = [];
		let MaterialLayers_index = 0;
		while (MaterialLayers_index < tape[ptr].length) {
			MaterialLayers.push(tape[ptr][MaterialLayers_index++]);
		}
	ptr++;
		} else { MaterialLayers = null; ptr++; }
		let LayerSetName;
		if (tape[ptr]) {
		LayerSetName = tape[ptr++];
		} else { LayerSetName = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcMaterialLayerSet(expressID, type, MaterialLayers, LayerSetName, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.MaterialLayers.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.LayerSetName){
		args.push(STRING)
		args.push(this.LayerSetName)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialLayerSetUsage {
	constructor(expressID: number, type: number, ForLayerSet: Handle<IfcMaterialLayerSet> , LayerSetDirection: IfcLayerSetDirectionEnum , DirectionSense: IfcDirectionSenseEnum , OffsetFromReferenceLine: IfcLengthMeasure , ReferenceExtent: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ForLayerSet = ForLayerSet;
		this.LayerSetDirection = LayerSetDirection;
		this.DirectionSense = DirectionSense;
		this.OffsetFromReferenceLine = OffsetFromReferenceLine;
		this.ReferenceExtent = ReferenceExtent;
	}
	expressID: number;
	type: number;
	ForLayerSet: Handle<IfcMaterialLayerSet> ;
	LayerSetDirection: IfcLayerSetDirectionEnum ;
	DirectionSense: IfcDirectionSenseEnum ;
	OffsetFromReferenceLine: IfcLengthMeasure ;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerSetUsage
	{
		let ptr = 0;
		let ForLayerSet;
		if (tape[ptr]) {
		ForLayerSet = tape[ptr++];
		} else { ForLayerSet = null; ptr++; }
		let LayerSetDirection;
		if (tape[ptr]) {
		LayerSetDirection = new IfcLayerSetDirectionEnum(tape[ptr++]);
		} else { LayerSetDirection = null; ptr++; }
		let DirectionSense;
		if (tape[ptr]) {
		DirectionSense = new IfcDirectionSenseEnum(tape[ptr++]);
		} else { DirectionSense = null; ptr++; }
		let OffsetFromReferenceLine;
		if (tape[ptr]) {
		OffsetFromReferenceLine = tape[ptr++];
		} else { OffsetFromReferenceLine = null; ptr++; }
		let ReferenceExtent;
		if (tape[ptr]) {
		ReferenceExtent = tape[ptr++];
		} else { ReferenceExtent = null; ptr++; }
		return new IfcMaterialLayerSetUsage(expressID, type, ForLayerSet, LayerSetDirection, DirectionSense, OffsetFromReferenceLine, ReferenceExtent);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ForLayerSet)
		args.push(ENUM);
		args.push(this.LayerSetDirection.value)
		args.push(ENUM);
		args.push(this.DirectionSense.value)
		args.push(REAL)
		args.push(this.OffsetFromReferenceLine)
		if(this.ReferenceExtent){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialLayerWithOffsets {
	constructor(expressID: number, type: number, Material: Handle<IfcMaterial> | null, LayerThickness: IfcNonNegativeLengthMeasure , IsVentilated: IfcLogical | null, Name: IfcLabel | null, Description: IfcText | null, Category: IfcLabel | null, Priority: IfcInteger | null, OffsetDirection: IfcLayerSetDirectionEnum , OffsetValues: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Material = Material;
		this.LayerThickness = LayerThickness;
		this.IsVentilated = IsVentilated;
		this.Name = Name;
		this.Description = Description;
		this.Category = Category;
		this.Priority = Priority;
		this.OffsetDirection = OffsetDirection;
		this.OffsetValues = OffsetValues;
	}
	expressID: number;
	type: number;
	Material: Handle<IfcMaterial> | null;
	LayerThickness: IfcNonNegativeLengthMeasure ;
	IsVentilated: IfcLogical | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Category: IfcLabel | null;
	Priority: IfcInteger | null;
	OffsetDirection: IfcLayerSetDirectionEnum ;
	OffsetValues: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialLayerWithOffsets
	{
		let ptr = 0;
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		let LayerThickness;
		if (tape[ptr]) {
		LayerThickness = tape[ptr++];
		} else { LayerThickness = null; ptr++; }
		let IsVentilated;
		if (tape[ptr]) {
		IsVentilated = tape[ptr++];
		} else { IsVentilated = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		let Priority;
		if (tape[ptr]) {
		Priority = tape[ptr++];
		} else { Priority = null; ptr++; }
		let OffsetDirection;
		if (tape[ptr]) {
		OffsetDirection = new IfcLayerSetDirectionEnum(tape[ptr++]);
		} else { OffsetDirection = null; ptr++; }
		let OffsetValues;
		if (tape[ptr]) {
		OffsetValues = tape[ptr++];
		} else { OffsetValues = null; ptr++; }
		return new IfcMaterialLayerWithOffsets(expressID, type, Material, LayerThickness, IsVentilated, Name, Description, Category, Priority, OffsetDirection, OffsetValues);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Material){
		args.push(REF)
		args.push(this.Material)
		}
		else{ args.push(EMPTY); }
		if(this.IsVentilated){
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		if(this.Priority){
		args.push(REAL)
		args.push(this.Priority)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.OffsetDirection.value)
		args.push(REAL)
		args.push(this.OffsetValues)
		return args;
	}
};
export class IfcMaterialList {
	constructor(expressID: number, type: number, Materials: Handle<IfcMaterial>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Materials = Materials;
	}
	expressID: number;
	type: number;
	Materials: Handle<IfcMaterial>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialList
	{
		let ptr = 0;
		let Materials;
		if (tape[ptr]) {
		Materials = [];
		let Materials_index = 0;
		while (Materials_index < tape[ptr].length) {
			Materials.push(tape[ptr][Materials_index++]);
		}
	ptr++;
		} else { Materials = null; ptr++; }
		return new IfcMaterialList(expressID, type, Materials);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Materials.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcMaterialProfile {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> | null, Profile: Handle<IfcProfileDef> , Priority: IfcInteger | null, Category: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> | null;
	Profile: Handle<IfcProfileDef> ;
	Priority: IfcInteger | null;
	Category: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfile
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		let Profile;
		if (tape[ptr]) {
		Profile = tape[ptr++];
		} else { Profile = null; ptr++; }
		let Priority;
		if (tape[ptr]) {
		Priority = tape[ptr++];
		} else { Priority = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		return new IfcMaterialProfile(expressID, type, Name, Description, Material, Profile, Priority, Category);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Material){
		args.push(REF)
		args.push(this.Material)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Profile)
		if(this.Priority){
		args.push(REAL)
		args.push(this.Priority)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialProfileSet {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, MaterialProfiles: Handle<IfcMaterialProfile>[] , CompositeProfile: Handle<IfcCompositeProfileDef> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.MaterialProfiles = MaterialProfiles;
		this.CompositeProfile = CompositeProfile;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	MaterialProfiles: Handle<IfcMaterialProfile>[] ;
	CompositeProfile: Handle<IfcCompositeProfileDef> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSet
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let MaterialProfiles;
		if (tape[ptr]) {
		MaterialProfiles = [];
		let MaterialProfiles_index = 0;
		while (MaterialProfiles_index < tape[ptr].length) {
			MaterialProfiles.push(tape[ptr][MaterialProfiles_index++]);
		}
	ptr++;
		} else { MaterialProfiles = null; ptr++; }
		let CompositeProfile;
		if (tape[ptr]) {
		CompositeProfile = tape[ptr++];
		} else { CompositeProfile = null; ptr++; }
		return new IfcMaterialProfileSet(expressID, type, Name, Description, MaterialProfiles, CompositeProfile);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.MaterialProfiles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.CompositeProfile){
		args.push(REF)
		args.push(this.CompositeProfile)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialProfileSetUsage {
	constructor(expressID: number, type: number, ForProfileSet: Handle<IfcMaterialProfileSet> , CardinalPoint: IfcCardinalPointReference | null, ReferenceExtent: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
	}
	expressID: number;
	type: number;
	ForProfileSet: Handle<IfcMaterialProfileSet> ;
	CardinalPoint: IfcCardinalPointReference | null;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSetUsage
	{
		let ptr = 0;
		let ForProfileSet;
		if (tape[ptr]) {
		ForProfileSet = tape[ptr++];
		} else { ForProfileSet = null; ptr++; }
		let CardinalPoint;
		if (tape[ptr]) {
		CardinalPoint = tape[ptr++];
		} else { CardinalPoint = null; ptr++; }
		let ReferenceExtent;
		if (tape[ptr]) {
		ReferenceExtent = tape[ptr++];
		} else { ReferenceExtent = null; ptr++; }
		return new IfcMaterialProfileSetUsage(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ForProfileSet)
		if(this.CardinalPoint){
		args.push(REAL)
		args.push(this.CardinalPoint)
		}
		else{ args.push(EMPTY); }
		if(this.ReferenceExtent){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialProfileSetUsageTapering {
	constructor(expressID: number, type: number, ForProfileSet: Handle<IfcMaterialProfileSet> , CardinalPoint: IfcCardinalPointReference | null, ReferenceExtent: IfcPositiveLengthMeasure | null, ForProfileEndSet: Handle<IfcMaterialProfileSet> , CardinalEndPoint: IfcCardinalPointReference | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ForProfileSet = ForProfileSet;
		this.CardinalPoint = CardinalPoint;
		this.ReferenceExtent = ReferenceExtent;
		this.ForProfileEndSet = ForProfileEndSet;
		this.CardinalEndPoint = CardinalEndPoint;
	}
	expressID: number;
	type: number;
	ForProfileSet: Handle<IfcMaterialProfileSet> ;
	CardinalPoint: IfcCardinalPointReference | null;
	ReferenceExtent: IfcPositiveLengthMeasure | null;
	ForProfileEndSet: Handle<IfcMaterialProfileSet> ;
	CardinalEndPoint: IfcCardinalPointReference | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileSetUsageTapering
	{
		let ptr = 0;
		let ForProfileSet;
		if (tape[ptr]) {
		ForProfileSet = tape[ptr++];
		} else { ForProfileSet = null; ptr++; }
		let CardinalPoint;
		if (tape[ptr]) {
		CardinalPoint = tape[ptr++];
		} else { CardinalPoint = null; ptr++; }
		let ReferenceExtent;
		if (tape[ptr]) {
		ReferenceExtent = tape[ptr++];
		} else { ReferenceExtent = null; ptr++; }
		let ForProfileEndSet;
		if (tape[ptr]) {
		ForProfileEndSet = tape[ptr++];
		} else { ForProfileEndSet = null; ptr++; }
		let CardinalEndPoint;
		if (tape[ptr]) {
		CardinalEndPoint = tape[ptr++];
		} else { CardinalEndPoint = null; ptr++; }
		return new IfcMaterialProfileSetUsageTapering(expressID, type, ForProfileSet, CardinalPoint, ReferenceExtent, ForProfileEndSet, CardinalEndPoint);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ForProfileSet)
		if(this.CardinalPoint){
		args.push(REAL)
		args.push(this.CardinalPoint)
		}
		else{ args.push(EMPTY); }
		if(this.ReferenceExtent){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ForProfileEndSet)
		if(this.CardinalEndPoint){
		args.push(REAL)
		args.push(this.CardinalEndPoint)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialProfileWithOffsets {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Material: Handle<IfcMaterial> | null, Profile: Handle<IfcProfileDef> , Priority: IfcInteger | null, Category: IfcLabel | null, OffsetValues: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Material = Material;
		this.Profile = Profile;
		this.Priority = Priority;
		this.Category = Category;
		this.OffsetValues = OffsetValues;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Material: Handle<IfcMaterial> | null;
	Profile: Handle<IfcProfileDef> ;
	Priority: IfcInteger | null;
	Category: IfcLabel | null;
	OffsetValues: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProfileWithOffsets
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		let Profile;
		if (tape[ptr]) {
		Profile = tape[ptr++];
		} else { Profile = null; ptr++; }
		let Priority;
		if (tape[ptr]) {
		Priority = tape[ptr++];
		} else { Priority = null; ptr++; }
		let Category;
		if (tape[ptr]) {
		Category = tape[ptr++];
		} else { Category = null; ptr++; }
		let OffsetValues;
		if (tape[ptr]) {
		OffsetValues = tape[ptr++];
		} else { OffsetValues = null; ptr++; }
		return new IfcMaterialProfileWithOffsets(expressID, type, Name, Description, Material, Profile, Priority, Category, OffsetValues);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Material){
		args.push(REF)
		args.push(this.Material)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Profile)
		if(this.Priority){
		args.push(REAL)
		args.push(this.Priority)
		}
		else{ args.push(EMPTY); }
		if(this.Category){
		args.push(STRING)
		args.push(this.Category)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.OffsetValues)
		return args;
	}
};
export class IfcMaterialProperties {
	constructor(expressID: number, type: number, Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] , Material: Handle<IfcMaterialDefinition> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
		this.Material = Material;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	Material: Handle<IfcMaterialDefinition> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialProperties
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Properties;
		if (tape[ptr]) {
		Properties = [];
		let Properties_index = 0;
		while (Properties_index < tape[ptr].length) {
			Properties.push(tape[ptr][Properties_index++]);
		}
	ptr++;
		} else { Properties = null; ptr++; }
		let Material;
		if (tape[ptr]) {
		Material = tape[ptr++];
		} else { Material = null; ptr++; }
		return new IfcMaterialProperties(expressID, type, Name, Description, Properties, Material);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Properties.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.Material)
		return args;
	}
};
export class IfcMaterialRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingMaterial: Handle<IfcMaterial> , RelatedMaterials: Handle<IfcMaterial>[] , Expression: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingMaterial = RelatingMaterial;
		this.RelatedMaterials = RelatedMaterials;
		this.Expression = Expression;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingMaterial: Handle<IfcMaterial> ;
	RelatedMaterials: Handle<IfcMaterial>[] ;
	Expression: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingMaterial;
		if (tape[ptr]) {
		RelatingMaterial = tape[ptr++];
		} else { RelatingMaterial = null; ptr++; }
		let RelatedMaterials;
		if (tape[ptr]) {
		RelatedMaterials = [];
		let RelatedMaterials_index = 0;
		while (RelatedMaterials_index < tape[ptr].length) {
			RelatedMaterials.push(tape[ptr][RelatedMaterials_index++]);
		}
	ptr++;
		} else { RelatedMaterials = null; ptr++; }
		let Expression;
		if (tape[ptr]) {
		Expression = tape[ptr++];
		} else { Expression = null; ptr++; }
		return new IfcMaterialRelationship(expressID, type, Name, Description, RelatingMaterial, RelatedMaterials, Expression);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingMaterial)
		args.push(SET_BEGIN)
		this.RelatedMaterials.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.Expression){
		args.push(STRING)
		args.push(this.Expression)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMaterialUsageDefinition {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMaterialUsageDefinition
	{
		let ptr = 0;
		return new IfcMaterialUsageDefinition(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcMeasureWithUnit {
	constructor(expressID: number, type: number, ValueComponent: IfcValue , UnitComponent: IfcUnit )
	{
		this.expressID = expressID;
		this.type = type;
		this.ValueComponent = ValueComponent;
		this.UnitComponent = UnitComponent;
	}
	expressID: number;
	type: number;
	ValueComponent: IfcValue ;
	UnitComponent: IfcUnit ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMeasureWithUnit
	{
		let ptr = 0;
		let ValueComponent;
		if (tape[ptr]) {
		ValueComponent = tape[ptr++];
		} else { ValueComponent = null; ptr++; }
		let UnitComponent;
		if (tape[ptr]) {
		UnitComponent = tape[ptr++];
		} else { UnitComponent = null; ptr++; }
		return new IfcMeasureWithUnit(expressID, type, ValueComponent, UnitComponent);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(LABEL)
		//@ts-ignore
		args.push(this.ValueComponent.t)
		args.push(SET_BEGIN)
		//@ts-ignore
		args.push(typeof this.ValueComponent.v == 'string' ? STRING : REAL)
		//@ts-ignore
		args.push(this.ValueComponent.v)
		args.push(SET_END)
		return args;
	}
};
export class IfcMechanicalFastener {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, NominalDiameter: IfcPositiveLengthMeasure | null, NominalLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcMechanicalFastenerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	NominalLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcMechanicalFastenerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastener
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let NominalLength;
		if (tape[ptr]) {
		NominalLength = tape[ptr++];
		} else { NominalLength = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMechanicalFastenerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMechanicalFastener(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, NominalDiameter, NominalLength, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.NominalLength){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMechanicalFastenerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMechanicalFastenerTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, NominalLength: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.NominalLength = NominalLength;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMechanicalFastenerTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	NominalLength: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMechanicalFastenerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMechanicalFastenerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let NominalLength;
		if (tape[ptr]) {
		NominalLength = tape[ptr++];
		} else { NominalLength = null; ptr++; }
		return new IfcMechanicalFastenerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, NominalDiameter, NominalLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.NominalLength){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMedicalDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMedicalDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMedicalDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMedicalDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMedicalDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMedicalDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMedicalDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMedicalDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMedicalDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMedicalDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMedicalDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMedicalDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcMember {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMemberTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMemberTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMember
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMember(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMemberStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMemberTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMemberTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMemberStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMemberStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMemberType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMemberTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMemberTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMemberType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMemberType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcMetric {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null, Benchmark: IfcBenchmarkEnum , ValueSource: IfcLabel | null, DataValue: IfcMetricValueSelect | null, ReferencePath: Handle<IfcReference> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.Benchmark = Benchmark;
		this.ValueSource = ValueSource;
		this.DataValue = DataValue;
		this.ReferencePath = ReferencePath;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	Benchmark: IfcBenchmarkEnum ;
	ValueSource: IfcLabel | null;
	DataValue: IfcMetricValueSelect | null;
	ReferencePath: Handle<IfcReference> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMetric
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConstraintGrade;
		if (tape[ptr]) {
		ConstraintGrade = new IfcConstraintEnum(tape[ptr++]);
		} else { ConstraintGrade = null; ptr++; }
		let ConstraintSource;
		if (tape[ptr]) {
		ConstraintSource = tape[ptr++];
		} else { ConstraintSource = null; ptr++; }
		let CreatingActor;
		if (tape[ptr]) {
		CreatingActor = tape[ptr++];
		} else { CreatingActor = null; ptr++; }
		let CreationTime;
		if (tape[ptr]) {
		CreationTime = tape[ptr++];
		} else { CreationTime = null; ptr++; }
		let UserDefinedGrade;
		if (tape[ptr]) {
		UserDefinedGrade = tape[ptr++];
		} else { UserDefinedGrade = null; ptr++; }
		let Benchmark;
		if (tape[ptr]) {
		Benchmark = new IfcBenchmarkEnum(tape[ptr++]);
		} else { Benchmark = null; ptr++; }
		let ValueSource;
		if (tape[ptr]) {
		ValueSource = tape[ptr++];
		} else { ValueSource = null; ptr++; }
		let DataValue;
		if (tape[ptr]) {
		DataValue = tape[ptr++];
		} else { DataValue = null; ptr++; }
		let ReferencePath;
		if (tape[ptr]) {
		ReferencePath = tape[ptr++];
		} else { ReferencePath = null; ptr++; }
		return new IfcMetric(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, Benchmark, ValueSource, DataValue, ReferencePath);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ConstraintGrade.value)
		if(this.ConstraintSource){
		args.push(STRING)
		args.push(this.ConstraintSource)
		}
		else{ args.push(EMPTY); }
		if(this.CreatingActor){
		}
		else{ args.push(EMPTY); }
		if(this.CreationTime){
		args.push(STRING)
		args.push(this.CreationTime)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedGrade){
		args.push(STRING)
		args.push(this.UserDefinedGrade)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.Benchmark.value)
		if(this.ValueSource){
		args.push(STRING)
		args.push(this.ValueSource)
		}
		else{ args.push(EMPTY); }
		if(this.DataValue){
		}
		else{ args.push(EMPTY); }
		if(this.ReferencePath){
		args.push(REF)
		args.push(this.ReferencePath)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMirroredProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, ParentProfile: Handle<IfcProfileDef> , Operator: Handle<IfcCartesianTransformationOperator2D> , Label: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.ParentProfile = ParentProfile;
		this.Operator = Operator;
		this.Label = Label;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	ParentProfile: Handle<IfcProfileDef> ;
	Operator: Handle<IfcCartesianTransformationOperator2D> ;
	Label: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMirroredProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let ParentProfile;
		if (tape[ptr]) {
		ParentProfile = tape[ptr++];
		} else { ParentProfile = null; ptr++; }
		let Operator;
		if (tape[ptr]) {
		Operator = tape[ptr++];
		} else { Operator = null; ptr++; }
		let Label;
		if (tape[ptr]) {
		Label = tape[ptr++];
		} else { Label = null; ptr++; }
		return new IfcMirroredProfileDef(expressID, type, ProfileType, ProfileName, ParentProfile, Operator, Label);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ParentProfile)
		args.push(REF)
		args.push(this.Operator)
		if(this.Label){
		args.push(STRING)
		args.push(this.Label)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMonetaryUnit {
	constructor(expressID: number, type: number, Currency: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Currency = Currency;
	}
	expressID: number;
	type: number;
	Currency: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMonetaryUnit
	{
		let ptr = 0;
		let Currency;
		if (tape[ptr]) {
		Currency = tape[ptr++];
		} else { Currency = null; ptr++; }
		return new IfcMonetaryUnit(expressID, type, Currency);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Currency)
		return args;
	}
};
export class IfcMotorConnection {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcMotorConnectionTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcMotorConnectionTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMotorConnection
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMotorConnectionTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMotorConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcMotorConnectionType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcMotorConnectionTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcMotorConnectionTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcMotorConnectionType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcMotorConnectionTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcMotorConnectionType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcNamedUnit {
	constructor(expressID: number, type: number, Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
	}
	expressID: number;
	type: number;
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcNamedUnit
	{
		let ptr = 0;
		let Dimensions;
		if (tape[ptr]) {
		Dimensions = tape[ptr++];
		} else { Dimensions = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		return new IfcNamedUnit(expressID, type, Dimensions, UnitType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Dimensions)
		args.push(ENUM);
		args.push(this.UnitType.value)
		return args;
	}
};
export class IfcObject {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcObject
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		return new IfcObject(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcObjectDefinition {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcObjectDefinition
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcObjectDefinition(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcObjectPlacement {
	constructor(expressID: number, type: number, PlacementRelTo: Handle<IfcObjectPlacement> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.PlacementRelTo = PlacementRelTo;
	}
	expressID: number;
	type: number;
	PlacementRelTo: Handle<IfcObjectPlacement> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcObjectPlacement
	{
		let ptr = 0;
		let PlacementRelTo;
		if (tape[ptr]) {
		PlacementRelTo = tape[ptr++];
		} else { PlacementRelTo = null; ptr++; }
		return new IfcObjectPlacement(expressID, type, PlacementRelTo);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.PlacementRelTo){
		args.push(REF)
		args.push(this.PlacementRelTo)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcObjective {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, ConstraintGrade: IfcConstraintEnum , ConstraintSource: IfcLabel | null, CreatingActor: IfcActorSelect | null, CreationTime: IfcDateTime | null, UserDefinedGrade: IfcLabel | null, BenchmarkValues: Handle<IfcConstraint>[] | null, LogicalAggregator: IfcLogicalOperatorEnum | null, ObjectiveQualifier: IfcObjectiveEnum , UserDefinedQualifier: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ConstraintGrade = ConstraintGrade;
		this.ConstraintSource = ConstraintSource;
		this.CreatingActor = CreatingActor;
		this.CreationTime = CreationTime;
		this.UserDefinedGrade = UserDefinedGrade;
		this.BenchmarkValues = BenchmarkValues;
		this.LogicalAggregator = LogicalAggregator;
		this.ObjectiveQualifier = ObjectiveQualifier;
		this.UserDefinedQualifier = UserDefinedQualifier;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	ConstraintGrade: IfcConstraintEnum ;
	ConstraintSource: IfcLabel | null;
	CreatingActor: IfcActorSelect | null;
	CreationTime: IfcDateTime | null;
	UserDefinedGrade: IfcLabel | null;
	BenchmarkValues: Handle<IfcConstraint>[] | null;
	LogicalAggregator: IfcLogicalOperatorEnum | null;
	ObjectiveQualifier: IfcObjectiveEnum ;
	UserDefinedQualifier: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcObjective
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConstraintGrade;
		if (tape[ptr]) {
		ConstraintGrade = new IfcConstraintEnum(tape[ptr++]);
		} else { ConstraintGrade = null; ptr++; }
		let ConstraintSource;
		if (tape[ptr]) {
		ConstraintSource = tape[ptr++];
		} else { ConstraintSource = null; ptr++; }
		let CreatingActor;
		if (tape[ptr]) {
		CreatingActor = tape[ptr++];
		} else { CreatingActor = null; ptr++; }
		let CreationTime;
		if (tape[ptr]) {
		CreationTime = tape[ptr++];
		} else { CreationTime = null; ptr++; }
		let UserDefinedGrade;
		if (tape[ptr]) {
		UserDefinedGrade = tape[ptr++];
		} else { UserDefinedGrade = null; ptr++; }
		let BenchmarkValues;
		if (tape[ptr]) {
		BenchmarkValues = [];
		let BenchmarkValues_index = 0;
		while (BenchmarkValues_index < tape[ptr].length) {
			BenchmarkValues.push(tape[ptr][BenchmarkValues_index++]);
		}
	ptr++;
		} else { BenchmarkValues = null; ptr++; }
		let LogicalAggregator;
		if (tape[ptr]) {
		LogicalAggregator = new IfcLogicalOperatorEnum(tape[ptr++]);
		} else { LogicalAggregator = null; ptr++; }
		let ObjectiveQualifier;
		if (tape[ptr]) {
		ObjectiveQualifier = new IfcObjectiveEnum(tape[ptr++]);
		} else { ObjectiveQualifier = null; ptr++; }
		let UserDefinedQualifier;
		if (tape[ptr]) {
		UserDefinedQualifier = tape[ptr++];
		} else { UserDefinedQualifier = null; ptr++; }
		return new IfcObjective(expressID, type, Name, Description, ConstraintGrade, ConstraintSource, CreatingActor, CreationTime, UserDefinedGrade, BenchmarkValues, LogicalAggregator, ObjectiveQualifier, UserDefinedQualifier);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ConstraintGrade.value)
		if(this.ConstraintSource){
		args.push(STRING)
		args.push(this.ConstraintSource)
		}
		else{ args.push(EMPTY); }
		if(this.CreatingActor){
		}
		else{ args.push(EMPTY); }
		if(this.CreationTime){
		args.push(STRING)
		args.push(this.CreationTime)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedGrade){
		args.push(STRING)
		args.push(this.UserDefinedGrade)
		}
		else{ args.push(EMPTY); }
		if(this.BenchmarkValues){
		args.push(SET_BEGIN)
		this.BenchmarkValues.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.LogicalAggregator){
		args.push(ENUM);
		args.push(this.LogicalAggregator.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ObjectiveQualifier.value)
		if(this.UserDefinedQualifier){
		args.push(STRING)
		args.push(this.UserDefinedQualifier)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOccupant {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheActor: IfcActorSelect , PredefinedType: IfcOccupantTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheActor = TheActor;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheActor: IfcActorSelect ;
	PredefinedType: IfcOccupantTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOccupant
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let TheActor;
		if (tape[ptr]) {
		TheActor = tape[ptr++];
		} else { TheActor = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcOccupantTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcOccupant(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheActor, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOffsetCurve {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		return new IfcOffsetCurve(expressID, type, BasisCurve);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		return args;
	}
};
export class IfcOffsetCurve2D {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> , Distance: IfcLengthMeasure , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	Distance: IfcLengthMeasure ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve2D
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		let Distance;
		if (tape[ptr]) {
		Distance = tape[ptr++];
		} else { Distance = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcOffsetCurve2D(expressID, type, BasisCurve, Distance, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		args.push(REAL)
		args.push(this.Distance)
		return args;
	}
};
export class IfcOffsetCurve3D {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> , Distance: IfcLengthMeasure , SelfIntersect: IfcLogical , RefDirection: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.Distance = Distance;
		this.SelfIntersect = SelfIntersect;
		this.RefDirection = RefDirection;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	Distance: IfcLengthMeasure ;
	SelfIntersect: IfcLogical ;
	RefDirection: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurve3D
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		let Distance;
		if (tape[ptr]) {
		Distance = tape[ptr++];
		} else { Distance = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		let RefDirection;
		if (tape[ptr]) {
		RefDirection = tape[ptr++];
		} else { RefDirection = null; ptr++; }
		return new IfcOffsetCurve3D(expressID, type, BasisCurve, Distance, SelfIntersect, RefDirection);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		args.push(REAL)
		args.push(this.Distance)
		args.push(REF)
		args.push(this.RefDirection)
		return args;
	}
};
export class IfcOffsetCurveByDistances {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> , OffsetValues: Handle<IfcDistanceExpression>[] , Tag: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.OffsetValues = OffsetValues;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	OffsetValues: Handle<IfcDistanceExpression>[] ;
	Tag: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOffsetCurveByDistances
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		let OffsetValues;
		if (tape[ptr]) {
		OffsetValues = [];
		let OffsetValues_index = 0;
		while (OffsetValues_index < tape[ptr].length) {
			OffsetValues.push(tape[ptr][OffsetValues_index++]);
		}
	ptr++;
		} else { OffsetValues = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcOffsetCurveByDistances(expressID, type, BasisCurve, OffsetValues, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		args.push(SET_BEGIN)
		this.OffsetValues.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOpenShell {
	constructor(expressID: number, type: number, CfsFaces: Handle<IfcFace>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.CfsFaces = CfsFaces;
	}
	expressID: number;
	type: number;
	CfsFaces: Handle<IfcFace>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOpenShell
	{
		let ptr = 0;
		let CfsFaces;
		if (tape[ptr]) {
		CfsFaces = [];
		let CfsFaces_index = 0;
		while (CfsFaces_index < tape[ptr].length) {
			CfsFaces.push(tape[ptr][CfsFaces_index++]);
		}
	ptr++;
		} else { CfsFaces = null; ptr++; }
		return new IfcOpenShell(expressID, type, CfsFaces);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.CfsFaces.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcOpeningElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOpeningElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOpeningElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOpeningElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcOpeningElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcOpeningElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOpeningStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOpeningElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOpeningElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOpeningStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcOpeningElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcOpeningStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOrganization {
	constructor(expressID: number, type: number, Identification: IfcIdentifier | null, Name: IfcLabel , Description: IfcText | null, Roles: Handle<IfcActorRole>[] | null, Addresses: Handle<IfcAddress>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Identification = Identification;
		this.Name = Name;
		this.Description = Description;
		this.Roles = Roles;
		this.Addresses = Addresses;
	}
	expressID: number;
	type: number;
	Identification: IfcIdentifier | null;
	Name: IfcLabel ;
	Description: IfcText | null;
	Roles: Handle<IfcActorRole>[] | null;
	Addresses: Handle<IfcAddress>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOrganization
	{
		let ptr = 0;
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Roles;
		if (tape[ptr]) {
		Roles = [];
		let Roles_index = 0;
		while (Roles_index < tape[ptr].length) {
			Roles.push(tape[ptr][Roles_index++]);
		}
	ptr++;
		} else { Roles = null; ptr++; }
		let Addresses;
		if (tape[ptr]) {
		Addresses = [];
		let Addresses_index = 0;
		while (Addresses_index < tape[ptr].length) {
			Addresses.push(tape[ptr][Addresses_index++]);
		}
	ptr++;
		} else { Addresses = null; ptr++; }
		return new IfcOrganization(expressID, type, Identification, Name, Description, Roles, Addresses);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Roles){
		args.push(SET_BEGIN)
		this.Roles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Addresses){
		args.push(SET_BEGIN)
		this.Addresses.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOrganizationRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingOrganization: Handle<IfcOrganization> , RelatedOrganizations: Handle<IfcOrganization>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingOrganization = RelatingOrganization;
		this.RelatedOrganizations = RelatedOrganizations;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingOrganization: Handle<IfcOrganization> ;
	RelatedOrganizations: Handle<IfcOrganization>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOrganizationRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingOrganization;
		if (tape[ptr]) {
		RelatingOrganization = tape[ptr++];
		} else { RelatingOrganization = null; ptr++; }
		let RelatedOrganizations;
		if (tape[ptr]) {
		RelatedOrganizations = [];
		let RelatedOrganizations_index = 0;
		while (RelatedOrganizations_index < tape[ptr].length) {
			RelatedOrganizations.push(tape[ptr][RelatedOrganizations_index++]);
		}
	ptr++;
		} else { RelatedOrganizations = null; ptr++; }
		return new IfcOrganizationRelationship(expressID, type, Name, Description, RelatingOrganization, RelatedOrganizations);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingOrganization)
		args.push(SET_BEGIN)
		this.RelatedOrganizations.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcOrientationExpression {
	constructor(expressID: number, type: number, LateralAxisDirection: Handle<IfcDirection> , VerticalAxisDirection: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.LateralAxisDirection = LateralAxisDirection;
		this.VerticalAxisDirection = VerticalAxisDirection;
	}
	expressID: number;
	type: number;
	LateralAxisDirection: Handle<IfcDirection> ;
	VerticalAxisDirection: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOrientationExpression
	{
		let ptr = 0;
		let LateralAxisDirection;
		if (tape[ptr]) {
		LateralAxisDirection = tape[ptr++];
		} else { LateralAxisDirection = null; ptr++; }
		let VerticalAxisDirection;
		if (tape[ptr]) {
		VerticalAxisDirection = tape[ptr++];
		} else { VerticalAxisDirection = null; ptr++; }
		return new IfcOrientationExpression(expressID, type, LateralAxisDirection, VerticalAxisDirection);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.LateralAxisDirection)
		args.push(REF)
		args.push(this.VerticalAxisDirection)
		return args;
	}
};
export class IfcOrientedEdge {
	constructor(expressID: number, type: number, EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , EdgeElement: Handle<IfcEdge> , Orientation: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.EdgeElement = EdgeElement;
		this.Orientation = Orientation;
	}
	expressID: number;
	type: number;
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	EdgeElement: Handle<IfcEdge> ;
	Orientation: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOrientedEdge
	{
		let ptr = 0;
		let EdgeStart;
		if (tape[ptr]) {
		EdgeStart = tape[ptr++];
		} else { EdgeStart = null; ptr++; }
		let EdgeEnd;
		if (tape[ptr]) {
		EdgeEnd = tape[ptr++];
		} else { EdgeEnd = null; ptr++; }
		let EdgeElement;
		if (tape[ptr]) {
		EdgeElement = tape[ptr++];
		} else { EdgeElement = null; ptr++; }
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		return new IfcOrientedEdge(expressID, type, EdgeStart, EdgeEnd, EdgeElement, Orientation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.EdgeStart)
		args.push(REF)
		args.push(this.EdgeEnd)
		args.push(REF)
		args.push(this.EdgeElement)
		return args;
	}
};
export class IfcOuterBoundaryCurve {
	constructor(expressID: number, type: number, Segments: Handle<IfcCompositeCurveSegment>[] , SelfIntersect: IfcLogical )
	{
		this.expressID = expressID;
		this.type = type;
		this.Segments = Segments;
		this.SelfIntersect = SelfIntersect;
	}
	expressID: number;
	type: number;
	Segments: Handle<IfcCompositeCurveSegment>[] ;
	SelfIntersect: IfcLogical ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOuterBoundaryCurve
	{
		let ptr = 0;
		let Segments;
		if (tape[ptr]) {
		Segments = [];
		let Segments_index = 0;
		while (Segments_index < tape[ptr].length) {
			Segments.push(tape[ptr][Segments_index++]);
		}
	ptr++;
		} else { Segments = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		return new IfcOuterBoundaryCurve(expressID, type, Segments, SelfIntersect);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Segments.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcOutlet {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcOutletTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcOutletTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOutlet
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcOutletTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcOutlet(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcOutletType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcOutletTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcOutletTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOutletType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcOutletTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcOutletType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcOwnerHistory {
	constructor(expressID: number, type: number, OwningUser: Handle<IfcPersonAndOrganization> , OwningApplication: Handle<IfcApplication> , State: IfcStateEnum | null, ChangeAction: IfcChangeActionEnum | null, LastModifiedDate: IfcTimeStamp | null, LastModifyingUser: Handle<IfcPersonAndOrganization> | null, LastModifyingApplication: Handle<IfcApplication> | null, CreationDate: IfcTimeStamp )
	{
		this.expressID = expressID;
		this.type = type;
		this.OwningUser = OwningUser;
		this.OwningApplication = OwningApplication;
		this.State = State;
		this.ChangeAction = ChangeAction;
		this.LastModifiedDate = LastModifiedDate;
		this.LastModifyingUser = LastModifyingUser;
		this.LastModifyingApplication = LastModifyingApplication;
		this.CreationDate = CreationDate;
	}
	expressID: number;
	type: number;
	OwningUser: Handle<IfcPersonAndOrganization> ;
	OwningApplication: Handle<IfcApplication> ;
	State: IfcStateEnum | null;
	ChangeAction: IfcChangeActionEnum | null;
	LastModifiedDate: IfcTimeStamp | null;
	LastModifyingUser: Handle<IfcPersonAndOrganization> | null;
	LastModifyingApplication: Handle<IfcApplication> | null;
	CreationDate: IfcTimeStamp ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcOwnerHistory
	{
		let ptr = 0;
		let OwningUser;
		if (tape[ptr]) {
		OwningUser = tape[ptr++];
		} else { OwningUser = null; ptr++; }
		let OwningApplication;
		if (tape[ptr]) {
		OwningApplication = tape[ptr++];
		} else { OwningApplication = null; ptr++; }
		let State;
		if (tape[ptr]) {
		State = new IfcStateEnum(tape[ptr++]);
		} else { State = null; ptr++; }
		let ChangeAction;
		if (tape[ptr]) {
		ChangeAction = new IfcChangeActionEnum(tape[ptr++]);
		} else { ChangeAction = null; ptr++; }
		let LastModifiedDate;
		if (tape[ptr]) {
		LastModifiedDate = tape[ptr++];
		} else { LastModifiedDate = null; ptr++; }
		let LastModifyingUser;
		if (tape[ptr]) {
		LastModifyingUser = tape[ptr++];
		} else { LastModifyingUser = null; ptr++; }
		let LastModifyingApplication;
		if (tape[ptr]) {
		LastModifyingApplication = tape[ptr++];
		} else { LastModifyingApplication = null; ptr++; }
		let CreationDate;
		if (tape[ptr]) {
		CreationDate = tape[ptr++];
		} else { CreationDate = null; ptr++; }
		return new IfcOwnerHistory(expressID, type, OwningUser, OwningApplication, State, ChangeAction, LastModifiedDate, LastModifyingUser, LastModifyingApplication, CreationDate);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.OwningUser)
		args.push(REF)
		args.push(this.OwningApplication)
		if(this.State){
		args.push(ENUM);
		args.push(this.State.value)
		}
		else{ args.push(EMPTY); }
		if(this.ChangeAction){
		args.push(ENUM);
		args.push(this.ChangeAction.value)
		}
		else{ args.push(EMPTY); }
		if(this.LastModifiedDate){
		args.push(REAL)
		args.push(this.LastModifiedDate)
		}
		else{ args.push(EMPTY); }
		if(this.LastModifyingUser){
		args.push(REF)
		args.push(this.LastModifyingUser)
		}
		else{ args.push(EMPTY); }
		if(this.LastModifyingApplication){
		args.push(REF)
		args.push(this.LastModifyingApplication)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.CreationDate)
		return args;
	}
};
export class IfcParameterizedProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcParameterizedProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcParameterizedProfileDef(expressID, type, ProfileType, ProfileName, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPath {
	constructor(expressID: number, type: number, EdgeList: Handle<IfcOrientedEdge>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeList = EdgeList;
	}
	expressID: number;
	type: number;
	EdgeList: Handle<IfcOrientedEdge>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPath
	{
		let ptr = 0;
		let EdgeList;
		if (tape[ptr]) {
		EdgeList = [];
		let EdgeList_index = 0;
		while (EdgeList_index < tape[ptr].length) {
			EdgeList.push(tape[ptr][EdgeList_index++]);
		}
	ptr++;
		} else { EdgeList = null; ptr++; }
		return new IfcPath(expressID, type, EdgeList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.EdgeList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPcurve {
	constructor(expressID: number, type: number, BasisSurface: Handle<IfcSurface> , ReferenceCurve: Handle<IfcCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.ReferenceCurve = ReferenceCurve;
	}
	expressID: number;
	type: number;
	BasisSurface: Handle<IfcSurface> ;
	ReferenceCurve: Handle<IfcCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPcurve
	{
		let ptr = 0;
		let BasisSurface;
		if (tape[ptr]) {
		BasisSurface = tape[ptr++];
		} else { BasisSurface = null; ptr++; }
		let ReferenceCurve;
		if (tape[ptr]) {
		ReferenceCurve = tape[ptr++];
		} else { ReferenceCurve = null; ptr++; }
		return new IfcPcurve(expressID, type, BasisSurface, ReferenceCurve);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisSurface)
		args.push(REF)
		args.push(this.ReferenceCurve)
		return args;
	}
};
export class IfcPerformanceHistory {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LifeCyclePhase: IfcLabel , PredefinedType: IfcPerformanceHistoryTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LifeCyclePhase = LifeCyclePhase;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LifeCyclePhase: IfcLabel ;
	PredefinedType: IfcPerformanceHistoryTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPerformanceHistory
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LifeCyclePhase;
		if (tape[ptr]) {
		LifeCyclePhase = tape[ptr++];
		} else { LifeCyclePhase = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPerformanceHistoryTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPerformanceHistory(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LifeCyclePhase, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.LifeCyclePhase)
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPermeableCoveringProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, OperationType: IfcPermeableCoveringOperationEnum , PanelPosition: IfcWindowPanelPositionEnum , FrameDepth: IfcPositiveLengthMeasure | null, FrameThickness: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.OperationType = OperationType;
		this.PanelPosition = PanelPosition;
		this.FrameDepth = FrameDepth;
		this.FrameThickness = FrameThickness;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	OperationType: IfcPermeableCoveringOperationEnum ;
	PanelPosition: IfcWindowPanelPositionEnum ;
	FrameDepth: IfcPositiveLengthMeasure | null;
	FrameThickness: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPermeableCoveringProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcPermeableCoveringOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let PanelPosition;
		if (tape[ptr]) {
		PanelPosition = new IfcWindowPanelPositionEnum(tape[ptr++]);
		} else { PanelPosition = null; ptr++; }
		let FrameDepth;
		if (tape[ptr]) {
		FrameDepth = tape[ptr++];
		} else { FrameDepth = null; ptr++; }
		let FrameThickness;
		if (tape[ptr]) {
		FrameThickness = tape[ptr++];
		} else { FrameThickness = null; ptr++; }
		let ShapeAspectStyle;
		if (tape[ptr]) {
		ShapeAspectStyle = tape[ptr++];
		} else { ShapeAspectStyle = null; ptr++; }
		return new IfcPermeableCoveringProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, OperationType, PanelPosition, FrameDepth, FrameThickness, ShapeAspectStyle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.OperationType.value)
		args.push(ENUM);
		args.push(this.PanelPosition.value)
		if(this.FrameDepth){
		}
		else{ args.push(EMPTY); }
		if(this.FrameThickness){
		}
		else{ args.push(EMPTY); }
		if(this.ShapeAspectStyle){
		args.push(REF)
		args.push(this.ShapeAspectStyle)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPermit {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcPermitTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcPermitTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPermit
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPermitTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		return new IfcPermit(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, LongDescription);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPerson {
	constructor(expressID: number, type: number, Identification: IfcIdentifier | null, FamilyName: IfcLabel | null, GivenName: IfcLabel | null, MiddleNames: IfcLabel[] | null, PrefixTitles: IfcLabel[] | null, SuffixTitles: IfcLabel[] | null, Roles: Handle<IfcActorRole>[] | null, Addresses: Handle<IfcAddress>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Identification = Identification;
		this.FamilyName = FamilyName;
		this.GivenName = GivenName;
		this.MiddleNames = MiddleNames;
		this.PrefixTitles = PrefixTitles;
		this.SuffixTitles = SuffixTitles;
		this.Roles = Roles;
		this.Addresses = Addresses;
	}
	expressID: number;
	type: number;
	Identification: IfcIdentifier | null;
	FamilyName: IfcLabel | null;
	GivenName: IfcLabel | null;
	MiddleNames: IfcLabel[] | null;
	PrefixTitles: IfcLabel[] | null;
	SuffixTitles: IfcLabel[] | null;
	Roles: Handle<IfcActorRole>[] | null;
	Addresses: Handle<IfcAddress>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPerson
	{
		let ptr = 0;
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let FamilyName;
		if (tape[ptr]) {
		FamilyName = tape[ptr++];
		} else { FamilyName = null; ptr++; }
		let GivenName;
		if (tape[ptr]) {
		GivenName = tape[ptr++];
		} else { GivenName = null; ptr++; }
		let MiddleNames;
		if (tape[ptr]) {
		MiddleNames = [];
		let MiddleNames_index = 0;
		while (MiddleNames_index < tape[ptr].length) {
			MiddleNames.push(tape[ptr][MiddleNames_index++]);
		}
	ptr++;
		} else { MiddleNames = null; ptr++; }
		let PrefixTitles;
		if (tape[ptr]) {
		PrefixTitles = [];
		let PrefixTitles_index = 0;
		while (PrefixTitles_index < tape[ptr].length) {
			PrefixTitles.push(tape[ptr][PrefixTitles_index++]);
		}
	ptr++;
		} else { PrefixTitles = null; ptr++; }
		let SuffixTitles;
		if (tape[ptr]) {
		SuffixTitles = [];
		let SuffixTitles_index = 0;
		while (SuffixTitles_index < tape[ptr].length) {
			SuffixTitles.push(tape[ptr][SuffixTitles_index++]);
		}
	ptr++;
		} else { SuffixTitles = null; ptr++; }
		let Roles;
		if (tape[ptr]) {
		Roles = [];
		let Roles_index = 0;
		while (Roles_index < tape[ptr].length) {
			Roles.push(tape[ptr][Roles_index++]);
		}
	ptr++;
		} else { Roles = null; ptr++; }
		let Addresses;
		if (tape[ptr]) {
		Addresses = [];
		let Addresses_index = 0;
		while (Addresses_index < tape[ptr].length) {
			Addresses.push(tape[ptr][Addresses_index++]);
		}
	ptr++;
		} else { Addresses = null; ptr++; }
		return new IfcPerson(expressID, type, Identification, FamilyName, GivenName, MiddleNames, PrefixTitles, SuffixTitles, Roles, Addresses);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.FamilyName){
		args.push(STRING)
		args.push(this.FamilyName)
		}
		else{ args.push(EMPTY); }
		if(this.GivenName){
		args.push(STRING)
		args.push(this.GivenName)
		}
		else{ args.push(EMPTY); }
		if(this.MiddleNames){
		args.push(STRING)
		args.push(...this.MiddleNames)
		}
		else{ args.push(EMPTY); }
		if(this.PrefixTitles){
		args.push(STRING)
		args.push(...this.PrefixTitles)
		}
		else{ args.push(EMPTY); }
		if(this.SuffixTitles){
		args.push(STRING)
		args.push(...this.SuffixTitles)
		}
		else{ args.push(EMPTY); }
		if(this.Roles){
		args.push(SET_BEGIN)
		this.Roles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Addresses){
		args.push(SET_BEGIN)
		this.Addresses.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPersonAndOrganization {
	constructor(expressID: number, type: number, ThePerson: Handle<IfcPerson> , TheOrganization: Handle<IfcOrganization> , Roles: Handle<IfcActorRole>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ThePerson = ThePerson;
		this.TheOrganization = TheOrganization;
		this.Roles = Roles;
	}
	expressID: number;
	type: number;
	ThePerson: Handle<IfcPerson> ;
	TheOrganization: Handle<IfcOrganization> ;
	Roles: Handle<IfcActorRole>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPersonAndOrganization
	{
		let ptr = 0;
		let ThePerson;
		if (tape[ptr]) {
		ThePerson = tape[ptr++];
		} else { ThePerson = null; ptr++; }
		let TheOrganization;
		if (tape[ptr]) {
		TheOrganization = tape[ptr++];
		} else { TheOrganization = null; ptr++; }
		let Roles;
		if (tape[ptr]) {
		Roles = [];
		let Roles_index = 0;
		while (Roles_index < tape[ptr].length) {
			Roles.push(tape[ptr][Roles_index++]);
		}
	ptr++;
		} else { Roles = null; ptr++; }
		return new IfcPersonAndOrganization(expressID, type, ThePerson, TheOrganization, Roles);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ThePerson)
		args.push(REF)
		args.push(this.TheOrganization)
		if(this.Roles){
		args.push(SET_BEGIN)
		this.Roles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPhysicalComplexQuantity {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, HasQuantities: Handle<IfcPhysicalQuantity>[] , Discrimination: IfcLabel , Quality: IfcLabel | null, Usage: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.HasQuantities = HasQuantities;
		this.Discrimination = Discrimination;
		this.Quality = Quality;
		this.Usage = Usage;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	HasQuantities: Handle<IfcPhysicalQuantity>[] ;
	Discrimination: IfcLabel ;
	Quality: IfcLabel | null;
	Usage: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalComplexQuantity
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let HasQuantities;
		if (tape[ptr]) {
		HasQuantities = [];
		let HasQuantities_index = 0;
		while (HasQuantities_index < tape[ptr].length) {
			HasQuantities.push(tape[ptr][HasQuantities_index++]);
		}
	ptr++;
		} else { HasQuantities = null; ptr++; }
		let Discrimination;
		if (tape[ptr]) {
		Discrimination = tape[ptr++];
		} else { Discrimination = null; ptr++; }
		let Quality;
		if (tape[ptr]) {
		Quality = tape[ptr++];
		} else { Quality = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		return new IfcPhysicalComplexQuantity(expressID, type, Name, Description, HasQuantities, Discrimination, Quality, Usage);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.HasQuantities.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(STRING)
		args.push(this.Discrimination)
		if(this.Quality){
		args.push(STRING)
		args.push(this.Quality)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(STRING)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPhysicalQuantity {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalQuantity
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPhysicalQuantity(expressID, type, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPhysicalSimpleQuantity {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPhysicalSimpleQuantity
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		return new IfcPhysicalSimpleQuantity(expressID, type, Name, Description, Unit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPile {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPileTypeEnum | null, ConstructionType: IfcPileConstructionEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
		this.ConstructionType = ConstructionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPileTypeEnum | null;
	ConstructionType: IfcPileConstructionEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPile
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPileTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let ConstructionType;
		if (tape[ptr]) {
		ConstructionType = new IfcPileConstructionEnum(tape[ptr++]);
		} else { ConstructionType = null; ptr++; }
		return new IfcPile(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType, ConstructionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ConstructionType){
		args.push(ENUM);
		args.push(this.ConstructionType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPileType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPileTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPileTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPileType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPileTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPileType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcPipeFitting {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPipeFittingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPipeFittingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPipeFitting
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPipeFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPipeFitting(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPipeFittingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPipeFittingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPipeFittingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPipeFittingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPipeFittingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPipeFittingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcPipeSegment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPipeSegmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPipeSegmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPipeSegment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPipeSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPipeSegment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPipeSegmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPipeSegmentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPipeSegmentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPipeSegmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPipeSegmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPipeSegmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcPixelTexture {
	constructor(expressID: number, type: number, RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier[] | null, Width: IfcInteger , Height: IfcInteger , ColourComponents: IfcInteger , Pixel: IfcBinary[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
		this.Width = Width;
		this.Height = Height;
		this.ColourComponents = ColourComponents;
		this.Pixel = Pixel;
	}
	expressID: number;
	type: number;
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier[] | null;
	Width: IfcInteger ;
	Height: IfcInteger ;
	ColourComponents: IfcInteger ;
	Pixel: IfcBinary[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPixelTexture
	{
		let ptr = 0;
		let RepeatS;
		if (tape[ptr]) {
		RepeatS = tape[ptr++];
		} else { RepeatS = null; ptr++; }
		let RepeatT;
		if (tape[ptr]) {
		RepeatT = tape[ptr++];
		} else { RepeatT = null; ptr++; }
		let Mode;
		if (tape[ptr]) {
		Mode = tape[ptr++];
		} else { Mode = null; ptr++; }
		let TextureTransform;
		if (tape[ptr]) {
		TextureTransform = tape[ptr++];
		} else { TextureTransform = null; ptr++; }
		let Parameter;
		if (tape[ptr]) {
		Parameter = [];
		let Parameter_index = 0;
		while (Parameter_index < tape[ptr].length) {
			Parameter.push(tape[ptr][Parameter_index++]);
		}
	ptr++;
		} else { Parameter = null; ptr++; }
		let Width;
		if (tape[ptr]) {
		Width = tape[ptr++];
		} else { Width = null; ptr++; }
		let Height;
		if (tape[ptr]) {
		Height = tape[ptr++];
		} else { Height = null; ptr++; }
		let ColourComponents;
		if (tape[ptr]) {
		ColourComponents = tape[ptr++];
		} else { ColourComponents = null; ptr++; }
		let Pixel;
		if (tape[ptr]) {
		Pixel = [];
		let Pixel_index = 0;
		while (Pixel_index < tape[ptr].length) {
			Pixel.push(tape[ptr][Pixel_index++]);
		}
	ptr++;
		} else { Pixel = null; ptr++; }
		return new IfcPixelTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter, Width, Height, ColourComponents, Pixel);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Mode){
		args.push(STRING)
		args.push(this.Mode)
		}
		else{ args.push(EMPTY); }
		if(this.TextureTransform){
		args.push(REF)
		args.push(this.TextureTransform)
		}
		else{ args.push(EMPTY); }
		if(this.Parameter){
		args.push(STRING)
		args.push(...this.Parameter)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.Width)
		args.push(REAL)
		args.push(this.Height)
		args.push(REAL)
		args.push(this.ColourComponents)
		args.push(REAL)
		args.push(...this.Pixel)
		return args;
	}
};
export class IfcPlacement {
	constructor(expressID: number, type: number, Location: Handle<IfcCartesianPoint> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Location = Location;
	}
	expressID: number;
	type: number;
	Location: Handle<IfcCartesianPoint> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlacement
	{
		let ptr = 0;
		let Location;
		if (tape[ptr]) {
		Location = tape[ptr++];
		} else { Location = null; ptr++; }
		return new IfcPlacement(expressID, type, Location);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Location)
		return args;
	}
};
export class IfcPlanarBox {
	constructor(expressID: number, type: number, SizeInX: IfcLengthMeasure , SizeInY: IfcLengthMeasure , Placement: IfcAxis2Placement )
	{
		this.expressID = expressID;
		this.type = type;
		this.SizeInX = SizeInX;
		this.SizeInY = SizeInY;
		this.Placement = Placement;
	}
	expressID: number;
	type: number;
	SizeInX: IfcLengthMeasure ;
	SizeInY: IfcLengthMeasure ;
	Placement: IfcAxis2Placement ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarBox
	{
		let ptr = 0;
		let SizeInX;
		if (tape[ptr]) {
		SizeInX = tape[ptr++];
		} else { SizeInX = null; ptr++; }
		let SizeInY;
		if (tape[ptr]) {
		SizeInY = tape[ptr++];
		} else { SizeInY = null; ptr++; }
		let Placement;
		if (tape[ptr]) {
		Placement = tape[ptr++];
		} else { Placement = null; ptr++; }
		return new IfcPlanarBox(expressID, type, SizeInX, SizeInY, Placement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.SizeInX)
		args.push(REAL)
		args.push(this.SizeInY)
		return args;
	}
};
export class IfcPlanarExtent {
	constructor(expressID: number, type: number, SizeInX: IfcLengthMeasure , SizeInY: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.SizeInX = SizeInX;
		this.SizeInY = SizeInY;
	}
	expressID: number;
	type: number;
	SizeInX: IfcLengthMeasure ;
	SizeInY: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlanarExtent
	{
		let ptr = 0;
		let SizeInX;
		if (tape[ptr]) {
		SizeInX = tape[ptr++];
		} else { SizeInX = null; ptr++; }
		let SizeInY;
		if (tape[ptr]) {
		SizeInY = tape[ptr++];
		} else { SizeInY = null; ptr++; }
		return new IfcPlanarExtent(expressID, type, SizeInX, SizeInY);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.SizeInX)
		args.push(REAL)
		args.push(this.SizeInY)
		return args;
	}
};
export class IfcPlane {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlane
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcPlane(expressID, type, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcPlate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPlateTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPlateTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPlateTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPlate(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPlateStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPlateTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPlateTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlateStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPlateTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPlateStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPlateType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPlateTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPlateTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPlateType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPlateTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPlateType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcPoint {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPoint
	{
		let ptr = 0;
		return new IfcPoint(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcPointOnCurve {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> , PointParameter: IfcParameterValue )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.PointParameter = PointParameter;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	PointParameter: IfcParameterValue ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnCurve
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		let PointParameter;
		if (tape[ptr]) {
		PointParameter = tape[ptr++];
		} else { PointParameter = null; ptr++; }
		return new IfcPointOnCurve(expressID, type, BasisCurve, PointParameter);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		args.push(REAL)
		args.push(this.PointParameter)
		return args;
	}
};
export class IfcPointOnSurface {
	constructor(expressID: number, type: number, BasisSurface: Handle<IfcSurface> , PointParameterU: IfcParameterValue , PointParameterV: IfcParameterValue )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.PointParameterU = PointParameterU;
		this.PointParameterV = PointParameterV;
	}
	expressID: number;
	type: number;
	BasisSurface: Handle<IfcSurface> ;
	PointParameterU: IfcParameterValue ;
	PointParameterV: IfcParameterValue ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPointOnSurface
	{
		let ptr = 0;
		let BasisSurface;
		if (tape[ptr]) {
		BasisSurface = tape[ptr++];
		} else { BasisSurface = null; ptr++; }
		let PointParameterU;
		if (tape[ptr]) {
		PointParameterU = tape[ptr++];
		} else { PointParameterU = null; ptr++; }
		let PointParameterV;
		if (tape[ptr]) {
		PointParameterV = tape[ptr++];
		} else { PointParameterV = null; ptr++; }
		return new IfcPointOnSurface(expressID, type, BasisSurface, PointParameterU, PointParameterV);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisSurface)
		args.push(REAL)
		args.push(this.PointParameterU)
		args.push(REAL)
		args.push(this.PointParameterV)
		return args;
	}
};
export class IfcPolyLoop {
	constructor(expressID: number, type: number, Polygon: Handle<IfcCartesianPoint>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Polygon = Polygon;
	}
	expressID: number;
	type: number;
	Polygon: Handle<IfcCartesianPoint>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPolyLoop
	{
		let ptr = 0;
		let Polygon;
		if (tape[ptr]) {
		Polygon = [];
		let Polygon_index = 0;
		while (Polygon_index < tape[ptr].length) {
			Polygon.push(tape[ptr][Polygon_index++]);
		}
	ptr++;
		} else { Polygon = null; ptr++; }
		return new IfcPolyLoop(expressID, type, Polygon);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Polygon.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPolygonalBoundedHalfSpace {
	constructor(expressID: number, type: number, BaseSurface: Handle<IfcSurface> , AgreementFlag: IfcBoolean , Position: Handle<IfcAxis2Placement3D> , PolygonalBoundary: Handle<IfcBoundedCurve> )
	{
		this.expressID = expressID;
		this.type = type;
		this.BaseSurface = BaseSurface;
		this.AgreementFlag = AgreementFlag;
		this.Position = Position;
		this.PolygonalBoundary = PolygonalBoundary;
	}
	expressID: number;
	type: number;
	BaseSurface: Handle<IfcSurface> ;
	AgreementFlag: IfcBoolean ;
	Position: Handle<IfcAxis2Placement3D> ;
	PolygonalBoundary: Handle<IfcBoundedCurve> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPolygonalBoundedHalfSpace
	{
		let ptr = 0;
		let BaseSurface;
		if (tape[ptr]) {
		BaseSurface = tape[ptr++];
		} else { BaseSurface = null; ptr++; }
		let AgreementFlag;
		if (tape[ptr]) {
		AgreementFlag = tape[ptr++];
		} else { AgreementFlag = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let PolygonalBoundary;
		if (tape[ptr]) {
		PolygonalBoundary = tape[ptr++];
		} else { PolygonalBoundary = null; ptr++; }
		return new IfcPolygonalBoundedHalfSpace(expressID, type, BaseSurface, AgreementFlag, Position, PolygonalBoundary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BaseSurface)
		args.push(REF)
		args.push(this.Position)
		args.push(REF)
		args.push(this.PolygonalBoundary)
		return args;
	}
};
export class IfcPolygonalFaceSet {
	constructor(expressID: number, type: number, Coordinates: Handle<IfcCartesianPointList3D> , Closed: IfcBoolean | null, Faces: Handle<IfcIndexedPolygonalFace>[] , PnIndex: IfcPositiveInteger[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
		this.Closed = Closed;
		this.Faces = Faces;
		this.PnIndex = PnIndex;
	}
	expressID: number;
	type: number;
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Closed: IfcBoolean | null;
	Faces: Handle<IfcIndexedPolygonalFace>[] ;
	PnIndex: IfcPositiveInteger[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPolygonalFaceSet
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = tape[ptr++];
		} else { Coordinates = null; ptr++; }
		let Closed;
		if (tape[ptr]) {
		Closed = tape[ptr++];
		} else { Closed = null; ptr++; }
		let Faces;
		if (tape[ptr]) {
		Faces = [];
		let Faces_index = 0;
		while (Faces_index < tape[ptr].length) {
			Faces.push(tape[ptr][Faces_index++]);
		}
	ptr++;
		} else { Faces = null; ptr++; }
		let PnIndex;
		if (tape[ptr]) {
		PnIndex = [];
		let PnIndex_index = 0;
		while (PnIndex_index < tape[ptr].length) {
			PnIndex.push(tape[ptr][PnIndex_index++]);
		}
	ptr++;
		} else { PnIndex = null; ptr++; }
		return new IfcPolygonalFaceSet(expressID, type, Coordinates, Closed, Faces, PnIndex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Coordinates)
		if(this.Closed){
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Faces.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.PnIndex){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPolyline {
	constructor(expressID: number, type: number, Points: Handle<IfcCartesianPoint>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Points = Points;
	}
	expressID: number;
	type: number;
	Points: Handle<IfcCartesianPoint>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPolyline
	{
		let ptr = 0;
		let Points;
		if (tape[ptr]) {
		Points = [];
		let Points_index = 0;
		while (Points_index < tape[ptr].length) {
			Points.push(tape[ptr][Points_index++]);
		}
	ptr++;
		} else { Points = null; ptr++; }
		return new IfcPolyline(expressID, type, Points);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Points.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPort {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPort
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcPort(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPositioningElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPositioningElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcPositioningElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPostalAddress {
	constructor(expressID: number, type: number, Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null, InternalLocation: IfcLabel | null, AddressLines: IfcLabel[] | null, PostalBox: IfcLabel | null, Town: IfcLabel | null, Region: IfcLabel | null, PostalCode: IfcLabel | null, Country: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.InternalLocation = InternalLocation;
		this.AddressLines = AddressLines;
		this.PostalBox = PostalBox;
		this.Town = Town;
		this.Region = Region;
		this.PostalCode = PostalCode;
		this.Country = Country;
	}
	expressID: number;
	type: number;
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	InternalLocation: IfcLabel | null;
	AddressLines: IfcLabel[] | null;
	PostalBox: IfcLabel | null;
	Town: IfcLabel | null;
	Region: IfcLabel | null;
	PostalCode: IfcLabel | null;
	Country: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPostalAddress
	{
		let ptr = 0;
		let Purpose;
		if (tape[ptr]) {
		Purpose = new IfcAddressTypeEnum(tape[ptr++]);
		} else { Purpose = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UserDefinedPurpose;
		if (tape[ptr]) {
		UserDefinedPurpose = tape[ptr++];
		} else { UserDefinedPurpose = null; ptr++; }
		let InternalLocation;
		if (tape[ptr]) {
		InternalLocation = tape[ptr++];
		} else { InternalLocation = null; ptr++; }
		let AddressLines;
		if (tape[ptr]) {
		AddressLines = [];
		let AddressLines_index = 0;
		while (AddressLines_index < tape[ptr].length) {
			AddressLines.push(tape[ptr][AddressLines_index++]);
		}
	ptr++;
		} else { AddressLines = null; ptr++; }
		let PostalBox;
		if (tape[ptr]) {
		PostalBox = tape[ptr++];
		} else { PostalBox = null; ptr++; }
		let Town;
		if (tape[ptr]) {
		Town = tape[ptr++];
		} else { Town = null; ptr++; }
		let Region;
		if (tape[ptr]) {
		Region = tape[ptr++];
		} else { Region = null; ptr++; }
		let PostalCode;
		if (tape[ptr]) {
		PostalCode = tape[ptr++];
		} else { PostalCode = null; ptr++; }
		let Country;
		if (tape[ptr]) {
		Country = tape[ptr++];
		} else { Country = null; ptr++; }
		return new IfcPostalAddress(expressID, type, Purpose, Description, UserDefinedPurpose, InternalLocation, AddressLines, PostalBox, Town, Region, PostalCode, Country);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Purpose){
		args.push(ENUM);
		args.push(this.Purpose.value)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPurpose){
		args.push(STRING)
		args.push(this.UserDefinedPurpose)
		}
		else{ args.push(EMPTY); }
		if(this.InternalLocation){
		args.push(STRING)
		args.push(this.InternalLocation)
		}
		else{ args.push(EMPTY); }
		if(this.AddressLines){
		args.push(STRING)
		args.push(...this.AddressLines)
		}
		else{ args.push(EMPTY); }
		if(this.PostalBox){
		args.push(STRING)
		args.push(this.PostalBox)
		}
		else{ args.push(EMPTY); }
		if(this.Town){
		args.push(STRING)
		args.push(this.Town)
		}
		else{ args.push(EMPTY); }
		if(this.Region){
		args.push(STRING)
		args.push(this.Region)
		}
		else{ args.push(EMPTY); }
		if(this.PostalCode){
		args.push(STRING)
		args.push(this.PostalCode)
		}
		else{ args.push(EMPTY); }
		if(this.Country){
		args.push(STRING)
		args.push(this.Country)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPreDefinedColour {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedColour
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcPreDefinedColour(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcPreDefinedCurveFont {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedCurveFont
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcPreDefinedCurveFont(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcPreDefinedItem {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedItem
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcPreDefinedItem(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcPreDefinedProperties {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedProperties
	{
		let ptr = 0;
		return new IfcPreDefinedProperties(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcPreDefinedPropertySet {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedPropertySet
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPreDefinedPropertySet(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPreDefinedTextFont {
	constructor(expressID: number, type: number, Name: IfcLabel )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPreDefinedTextFont
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcPreDefinedTextFont(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		return args;
	}
};
export class IfcPresentationItem {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationItem
	{
		let ptr = 0;
		return new IfcPresentationItem(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcPresentationLayerAssignment {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, AssignedItems: IfcLayeredItem[] , Identifier: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	AssignedItems: IfcLayeredItem[] ;
	Identifier: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerAssignment
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let AssignedItems;
		if (tape[ptr]) {
		AssignedItems = [];
		let AssignedItems_index = 0;
		while (AssignedItems_index < tape[ptr].length) {
			AssignedItems.push(tape[ptr][AssignedItems_index++]);
		}
	ptr++;
		} else { AssignedItems = null; ptr++; }
		let Identifier;
		if (tape[ptr]) {
		Identifier = tape[ptr++];
		} else { Identifier = null; ptr++; }
		return new IfcPresentationLayerAssignment(expressID, type, Name, Description, AssignedItems, Identifier);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Identifier){
		args.push(STRING)
		args.push(this.Identifier)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPresentationLayerWithStyle {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, AssignedItems: IfcLayeredItem[] , Identifier: IfcIdentifier | null, LayerOn: IfcLogical , LayerFrozen: IfcLogical , LayerBlocked: IfcLogical , LayerStyles: Handle<IfcPresentationStyle>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.AssignedItems = AssignedItems;
		this.Identifier = Identifier;
		this.LayerOn = LayerOn;
		this.LayerFrozen = LayerFrozen;
		this.LayerBlocked = LayerBlocked;
		this.LayerStyles = LayerStyles;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	AssignedItems: IfcLayeredItem[] ;
	Identifier: IfcIdentifier | null;
	LayerOn: IfcLogical ;
	LayerFrozen: IfcLogical ;
	LayerBlocked: IfcLogical ;
	LayerStyles: Handle<IfcPresentationStyle>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationLayerWithStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let AssignedItems;
		if (tape[ptr]) {
		AssignedItems = [];
		let AssignedItems_index = 0;
		while (AssignedItems_index < tape[ptr].length) {
			AssignedItems.push(tape[ptr][AssignedItems_index++]);
		}
	ptr++;
		} else { AssignedItems = null; ptr++; }
		let Identifier;
		if (tape[ptr]) {
		Identifier = tape[ptr++];
		} else { Identifier = null; ptr++; }
		let LayerOn;
		if (tape[ptr]) {
		LayerOn = tape[ptr++];
		} else { LayerOn = null; ptr++; }
		let LayerFrozen;
		if (tape[ptr]) {
		LayerFrozen = tape[ptr++];
		} else { LayerFrozen = null; ptr++; }
		let LayerBlocked;
		if (tape[ptr]) {
		LayerBlocked = tape[ptr++];
		} else { LayerBlocked = null; ptr++; }
		let LayerStyles;
		if (tape[ptr]) {
		LayerStyles = [];
		let LayerStyles_index = 0;
		while (LayerStyles_index < tape[ptr].length) {
			LayerStyles.push(tape[ptr][LayerStyles_index++]);
		}
	ptr++;
		} else { LayerStyles = null; ptr++; }
		return new IfcPresentationLayerWithStyle(expressID, type, Name, Description, AssignedItems, Identifier, LayerOn, LayerFrozen, LayerBlocked, LayerStyles);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Identifier){
		args.push(STRING)
		args.push(this.Identifier)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.LayerStyles.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPresentationStyle {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcPresentationStyle(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPresentationStyleAssignment {
	constructor(expressID: number, type: number, Styles: IfcPresentationStyleSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Styles = Styles;
	}
	expressID: number;
	type: number;
	Styles: IfcPresentationStyleSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPresentationStyleAssignment
	{
		let ptr = 0;
		let Styles;
		if (tape[ptr]) {
		Styles = [];
		let Styles_index = 0;
		while (Styles_index < tape[ptr].length) {
			Styles.push(tape[ptr][Styles_index++]);
		}
	ptr++;
		} else { Styles = null; ptr++; }
		return new IfcPresentationStyleAssignment(expressID, type, Styles);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcProcedure {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, PredefinedType: IfcProcedureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	PredefinedType: IfcProcedureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProcedure
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProcedureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProcedure(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProcedureType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcProcedureTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcProcedureTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProcedureType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ProcessType;
		if (tape[ptr]) {
		ProcessType = tape[ptr++];
		} else { ProcessType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProcedureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProcedureType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ProcessType){
		args.push(STRING)
		args.push(this.ProcessType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcProcess {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProcess
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		return new IfcProcess(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProduct {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProduct
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcProduct(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProductDefinitionShape {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProductDefinitionShape
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Representations;
		if (tape[ptr]) {
		Representations = [];
		let Representations_index = 0;
		while (Representations_index < tape[ptr].length) {
			Representations.push(tape[ptr][Representations_index++]);
		}
	ptr++;
		} else { Representations = null; ptr++; }
		return new IfcProductDefinitionShape(expressID, type, Name, Description, Representations);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Representations.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcProductRepresentation {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, Representations: Handle<IfcRepresentation>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Representations = Representations;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Representations: Handle<IfcRepresentation>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProductRepresentation
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Representations;
		if (tape[ptr]) {
		Representations = [];
		let Representations_index = 0;
		while (Representations_index < tape[ptr].length) {
			Representations.push(tape[ptr][Representations_index++]);
		}
	ptr++;
		} else { Representations = null; ptr++; }
		return new IfcProductRepresentation(expressID, type, Name, Description, Representations);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Representations.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		return new IfcProfileDef(expressID, type, ProfileType, ProfileName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProfileProperties {
	constructor(expressID: number, type: number, Name: IfcIdentifier | null, Description: IfcText | null, Properties: Handle<IfcProperty>[] , ProfileDefinition: Handle<IfcProfileDef> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Properties = Properties;
		this.ProfileDefinition = ProfileDefinition;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier | null;
	Description: IfcText | null;
	Properties: Handle<IfcProperty>[] ;
	ProfileDefinition: Handle<IfcProfileDef> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProfileProperties
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Properties;
		if (tape[ptr]) {
		Properties = [];
		let Properties_index = 0;
		while (Properties_index < tape[ptr].length) {
			Properties.push(tape[ptr][Properties_index++]);
		}
	ptr++;
		} else { Properties = null; ptr++; }
		let ProfileDefinition;
		if (tape[ptr]) {
		ProfileDefinition = tape[ptr++];
		} else { ProfileDefinition = null; ptr++; }
		return new IfcProfileProperties(expressID, type, Name, Description, Properties, ProfileDefinition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Properties.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.ProfileDefinition)
		return args;
	}
};
export class IfcProject {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProject
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let Phase;
		if (tape[ptr]) {
		Phase = tape[ptr++];
		} else { Phase = null; ptr++; }
		let RepresentationContexts;
		if (tape[ptr]) {
		RepresentationContexts = [];
		let RepresentationContexts_index = 0;
		while (RepresentationContexts_index < tape[ptr].length) {
			RepresentationContexts.push(tape[ptr][RepresentationContexts_index++]);
		}
	ptr++;
		} else { RepresentationContexts = null; ptr++; }
		let UnitsInContext;
		if (tape[ptr]) {
		UnitsInContext = tape[ptr++];
		} else { UnitsInContext = null; ptr++; }
		return new IfcProject(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.Phase){
		args.push(STRING)
		args.push(this.Phase)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationContexts){
		args.push(SET_BEGIN)
		this.RepresentationContexts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.UnitsInContext){
		args.push(REF)
		args.push(this.UnitsInContext)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProjectLibrary {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null, Phase: IfcLabel | null, RepresentationContexts: Handle<IfcRepresentationContext>[] | null, UnitsInContext: Handle<IfcUnitAssignment> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
		this.Phase = Phase;
		this.RepresentationContexts = RepresentationContexts;
		this.UnitsInContext = UnitsInContext;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	Phase: IfcLabel | null;
	RepresentationContexts: Handle<IfcRepresentationContext>[] | null;
	UnitsInContext: Handle<IfcUnitAssignment> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProjectLibrary
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let Phase;
		if (tape[ptr]) {
		Phase = tape[ptr++];
		} else { Phase = null; ptr++; }
		let RepresentationContexts;
		if (tape[ptr]) {
		RepresentationContexts = [];
		let RepresentationContexts_index = 0;
		while (RepresentationContexts_index < tape[ptr].length) {
			RepresentationContexts.push(tape[ptr][RepresentationContexts_index++]);
		}
	ptr++;
		} else { RepresentationContexts = null; ptr++; }
		let UnitsInContext;
		if (tape[ptr]) {
		UnitsInContext = tape[ptr++];
		} else { UnitsInContext = null; ptr++; }
		return new IfcProjectLibrary(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName, Phase, RepresentationContexts, UnitsInContext);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.Phase){
		args.push(STRING)
		args.push(this.Phase)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationContexts){
		args.push(SET_BEGIN)
		this.RepresentationContexts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.UnitsInContext){
		args.push(REF)
		args.push(this.UnitsInContext)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProjectOrder {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, PredefinedType: IfcProjectOrderTypeEnum | null, Status: IfcLabel | null, LongDescription: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.PredefinedType = PredefinedType;
		this.Status = Status;
		this.LongDescription = LongDescription;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	PredefinedType: IfcProjectOrderTypeEnum | null;
	Status: IfcLabel | null;
	LongDescription: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProjectOrder
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProjectOrderTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		return new IfcProjectOrder(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, PredefinedType, Status, LongDescription);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProjectedCRS {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, GeodeticDatum: IfcIdentifier | null, VerticalDatum: IfcIdentifier | null, MapProjection: IfcIdentifier | null, MapZone: IfcIdentifier | null, MapUnit: Handle<IfcNamedUnit> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.GeodeticDatum = GeodeticDatum;
		this.VerticalDatum = VerticalDatum;
		this.MapProjection = MapProjection;
		this.MapZone = MapZone;
		this.MapUnit = MapUnit;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	GeodeticDatum: IfcIdentifier | null;
	VerticalDatum: IfcIdentifier | null;
	MapProjection: IfcIdentifier | null;
	MapZone: IfcIdentifier | null;
	MapUnit: Handle<IfcNamedUnit> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProjectedCRS
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let GeodeticDatum;
		if (tape[ptr]) {
		GeodeticDatum = tape[ptr++];
		} else { GeodeticDatum = null; ptr++; }
		let VerticalDatum;
		if (tape[ptr]) {
		VerticalDatum = tape[ptr++];
		} else { VerticalDatum = null; ptr++; }
		let MapProjection;
		if (tape[ptr]) {
		MapProjection = tape[ptr++];
		} else { MapProjection = null; ptr++; }
		let MapZone;
		if (tape[ptr]) {
		MapZone = tape[ptr++];
		} else { MapZone = null; ptr++; }
		let MapUnit;
		if (tape[ptr]) {
		MapUnit = tape[ptr++];
		} else { MapUnit = null; ptr++; }
		return new IfcProjectedCRS(expressID, type, Name, Description, GeodeticDatum, VerticalDatum, MapProjection, MapZone, MapUnit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.GeodeticDatum){
		args.push(STRING)
		args.push(this.GeodeticDatum)
		}
		else{ args.push(EMPTY); }
		if(this.VerticalDatum){
		args.push(STRING)
		args.push(this.VerticalDatum)
		}
		else{ args.push(EMPTY); }
		if(this.MapProjection){
		args.push(STRING)
		args.push(this.MapProjection)
		}
		else{ args.push(EMPTY); }
		if(this.MapZone){
		args.push(STRING)
		args.push(this.MapZone)
		}
		else{ args.push(EMPTY); }
		if(this.MapUnit){
		args.push(REF)
		args.push(this.MapUnit)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProjectionElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProjectionElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProjectionElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProjectionElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProjectionElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProjectionElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProperty {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProperty
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcProperty(expressID, type, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyAbstraction {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyAbstraction
	{
		let ptr = 0;
		return new IfcPropertyAbstraction(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcPropertyBoundedValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, UpperBoundValue: IfcValue | null, LowerBoundValue: IfcValue | null, Unit: IfcUnit | null, SetPointValue: IfcValue | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.UpperBoundValue = UpperBoundValue;
		this.LowerBoundValue = LowerBoundValue;
		this.Unit = Unit;
		this.SetPointValue = SetPointValue;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UpperBoundValue: IfcValue | null;
	LowerBoundValue: IfcValue | null;
	Unit: IfcUnit | null;
	SetPointValue: IfcValue | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyBoundedValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UpperBoundValue;
		if (tape[ptr]) {
		UpperBoundValue = tape[ptr++];
		} else { UpperBoundValue = null; ptr++; }
		let LowerBoundValue;
		if (tape[ptr]) {
		LowerBoundValue = tape[ptr++];
		} else { LowerBoundValue = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let SetPointValue;
		if (tape[ptr]) {
		SetPointValue = tape[ptr++];
		} else { SetPointValue = null; ptr++; }
		return new IfcPropertyBoundedValue(expressID, type, Name, Description, UpperBoundValue, LowerBoundValue, Unit, SetPointValue);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UpperBoundValue){
		args.push(LABEL)
		//@ts-ignore
		args.push(this.UpperBoundValue.t)
		args.push(SET_BEGIN)
		//@ts-ignore
		args.push(typeof this.UpperBoundValue.v == 'string' ? STRING : REAL)
		//@ts-ignore
		args.push(this.UpperBoundValue.v)
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.LowerBoundValue){
		args.push(LABEL)
		//@ts-ignore
		args.push(this.LowerBoundValue.t)
		args.push(SET_BEGIN)
		//@ts-ignore
		args.push(typeof this.LowerBoundValue.v == 'string' ? STRING : REAL)
		//@ts-ignore
		args.push(this.LowerBoundValue.v)
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		if(this.SetPointValue){
		args.push(LABEL)
		//@ts-ignore
		args.push(this.SetPointValue.t)
		args.push(SET_BEGIN)
		//@ts-ignore
		args.push(typeof this.SetPointValue.v == 'string' ? STRING : REAL)
		//@ts-ignore
		args.push(this.SetPointValue.v)
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyDefinition {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDefinition
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPropertyDefinition(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyDependencyRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, DependingProperty: Handle<IfcProperty> , DependantProperty: Handle<IfcProperty> , Expression: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.DependingProperty = DependingProperty;
		this.DependantProperty = DependantProperty;
		this.Expression = Expression;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	DependingProperty: Handle<IfcProperty> ;
	DependantProperty: Handle<IfcProperty> ;
	Expression: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyDependencyRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let DependingProperty;
		if (tape[ptr]) {
		DependingProperty = tape[ptr++];
		} else { DependingProperty = null; ptr++; }
		let DependantProperty;
		if (tape[ptr]) {
		DependantProperty = tape[ptr++];
		} else { DependantProperty = null; ptr++; }
		let Expression;
		if (tape[ptr]) {
		Expression = tape[ptr++];
		} else { Expression = null; ptr++; }
		return new IfcPropertyDependencyRelationship(expressID, type, Name, Description, DependingProperty, DependantProperty, Expression);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.DependingProperty)
		args.push(REF)
		args.push(this.DependantProperty)
		if(this.Expression){
		args.push(STRING)
		args.push(this.Expression)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyEnumeratedValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, EnumerationValues: IfcValue[] | null, EnumerationReference: Handle<IfcPropertyEnumeration> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.EnumerationValues = EnumerationValues;
		this.EnumerationReference = EnumerationReference;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	EnumerationValues: IfcValue[] | null;
	EnumerationReference: Handle<IfcPropertyEnumeration> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeratedValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let EnumerationValues;
		if (tape[ptr]) {
		EnumerationValues = [];
		let EnumerationValues_index = 0;
		while (EnumerationValues_index < tape[ptr].length) {
			EnumerationValues.push(tape[ptr][EnumerationValues_index++]);
		}
	ptr++;
		} else { EnumerationValues = null; ptr++; }
		let EnumerationReference;
		if (tape[ptr]) {
		EnumerationReference = tape[ptr++];
		} else { EnumerationReference = null; ptr++; }
		return new IfcPropertyEnumeratedValue(expressID, type, Name, Description, EnumerationValues, EnumerationReference);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.EnumerationValues){
		}
		else{ args.push(EMPTY); }
		if(this.EnumerationReference){
		args.push(REF)
		args.push(this.EnumerationReference)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyEnumeration {
	constructor(expressID: number, type: number, Name: IfcLabel , EnumerationValues: IfcValue[] , Unit: IfcUnit | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.EnumerationValues = EnumerationValues;
		this.Unit = Unit;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	EnumerationValues: IfcValue[] ;
	Unit: IfcUnit | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyEnumeration
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let EnumerationValues;
		if (tape[ptr]) {
		EnumerationValues = [];
		let EnumerationValues_index = 0;
		while (EnumerationValues_index < tape[ptr].length) {
			EnumerationValues.push(tape[ptr][EnumerationValues_index++]);
		}
	ptr++;
		} else { EnumerationValues = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		return new IfcPropertyEnumeration(expressID, type, Name, EnumerationValues, Unit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyListValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, ListValues: IfcValue[] | null, Unit: IfcUnit | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.ListValues = ListValues;
		this.Unit = Unit;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	ListValues: IfcValue[] | null;
	Unit: IfcUnit | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyListValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ListValues;
		if (tape[ptr]) {
		ListValues = [];
		let ListValues_index = 0;
		while (ListValues_index < tape[ptr].length) {
			ListValues.push(tape[ptr][ListValues_index++]);
		}
	ptr++;
		} else { ListValues = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		return new IfcPropertyListValue(expressID, type, Name, Description, ListValues, Unit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ListValues){
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyReferenceValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, UsageName: IfcText | null, PropertyReference: IfcObjectReferenceSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.UsageName = UsageName;
		this.PropertyReference = PropertyReference;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	UsageName: IfcText | null;
	PropertyReference: IfcObjectReferenceSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyReferenceValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UsageName;
		if (tape[ptr]) {
		UsageName = tape[ptr++];
		} else { UsageName = null; ptr++; }
		let PropertyReference;
		if (tape[ptr]) {
		PropertyReference = tape[ptr++];
		} else { PropertyReference = null; ptr++; }
		return new IfcPropertyReferenceValue(expressID, type, Name, Description, UsageName, PropertyReference);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UsageName){
		args.push(STRING)
		args.push(this.UsageName)
		}
		else{ args.push(EMPTY); }
		if(this.PropertyReference){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertySet {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, HasProperties: Handle<IfcProperty>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.HasProperties = HasProperties;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	HasProperties: Handle<IfcProperty>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySet
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let HasProperties;
		if (tape[ptr]) {
		HasProperties = [];
		let HasProperties_index = 0;
		while (HasProperties_index < tape[ptr].length) {
			HasProperties.push(tape[ptr][HasProperties_index++]);
		}
	ptr++;
		} else { HasProperties = null; ptr++; }
		return new IfcPropertySet(expressID, type, GlobalId, OwnerHistory, Name, Description, HasProperties);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.HasProperties.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPropertySetDefinition {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySetDefinition
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPropertySetDefinition(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertySetTemplate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, TemplateType: IfcPropertySetTemplateTypeEnum | null, ApplicableEntity: IfcIdentifier | null, HasPropertyTemplates: Handle<IfcPropertyTemplate>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.TemplateType = TemplateType;
		this.ApplicableEntity = ApplicableEntity;
		this.HasPropertyTemplates = HasPropertyTemplates;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TemplateType: IfcPropertySetTemplateTypeEnum | null;
	ApplicableEntity: IfcIdentifier | null;
	HasPropertyTemplates: Handle<IfcPropertyTemplate>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySetTemplate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let TemplateType;
		if (tape[ptr]) {
		TemplateType = new IfcPropertySetTemplateTypeEnum(tape[ptr++]);
		} else { TemplateType = null; ptr++; }
		let ApplicableEntity;
		if (tape[ptr]) {
		ApplicableEntity = tape[ptr++];
		} else { ApplicableEntity = null; ptr++; }
		let HasPropertyTemplates;
		if (tape[ptr]) {
		HasPropertyTemplates = [];
		let HasPropertyTemplates_index = 0;
		while (HasPropertyTemplates_index < tape[ptr].length) {
			HasPropertyTemplates.push(tape[ptr][HasPropertyTemplates_index++]);
		}
	ptr++;
		} else { HasPropertyTemplates = null; ptr++; }
		return new IfcPropertySetTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description, TemplateType, ApplicableEntity, HasPropertyTemplates);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.TemplateType){
		args.push(ENUM);
		args.push(this.TemplateType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableEntity){
		args.push(STRING)
		args.push(this.ApplicableEntity)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.HasPropertyTemplates.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcPropertySingleValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, NominalValue: IfcValue | null, Unit: IfcUnit | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.NominalValue = NominalValue;
		this.Unit = Unit;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	NominalValue: IfcValue | null;
	Unit: IfcUnit | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertySingleValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let NominalValue;
		if (tape[ptr]) {
		NominalValue = tape[ptr++];
		} else { NominalValue = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		return new IfcPropertySingleValue(expressID, type, Name, Description, NominalValue, Unit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.NominalValue){
		args.push(LABEL)
		//@ts-ignore
		args.push(this.NominalValue.t)
		args.push(SET_BEGIN)
		//@ts-ignore
		args.push(typeof this.NominalValue.v == 'string' ? STRING : REAL)
		//@ts-ignore
		args.push(this.NominalValue.v)
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyTableValue {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null, DefiningValues: IfcValue[] | null, DefinedValues: IfcValue[] | null, Expression: IfcText | null, DefiningUnit: IfcUnit | null, DefinedUnit: IfcUnit | null, CurveInterpolation: IfcCurveInterpolationEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.DefiningValues = DefiningValues;
		this.DefinedValues = DefinedValues;
		this.Expression = Expression;
		this.DefiningUnit = DefiningUnit;
		this.DefinedUnit = DefinedUnit;
		this.CurveInterpolation = CurveInterpolation;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	DefiningValues: IfcValue[] | null;
	DefinedValues: IfcValue[] | null;
	Expression: IfcText | null;
	DefiningUnit: IfcUnit | null;
	DefinedUnit: IfcUnit | null;
	CurveInterpolation: IfcCurveInterpolationEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTableValue
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let DefiningValues;
		if (tape[ptr]) {
		DefiningValues = [];
		let DefiningValues_index = 0;
		while (DefiningValues_index < tape[ptr].length) {
			DefiningValues.push(tape[ptr][DefiningValues_index++]);
		}
	ptr++;
		} else { DefiningValues = null; ptr++; }
		let DefinedValues;
		if (tape[ptr]) {
		DefinedValues = [];
		let DefinedValues_index = 0;
		while (DefinedValues_index < tape[ptr].length) {
			DefinedValues.push(tape[ptr][DefinedValues_index++]);
		}
	ptr++;
		} else { DefinedValues = null; ptr++; }
		let Expression;
		if (tape[ptr]) {
		Expression = tape[ptr++];
		} else { Expression = null; ptr++; }
		let DefiningUnit;
		if (tape[ptr]) {
		DefiningUnit = tape[ptr++];
		} else { DefiningUnit = null; ptr++; }
		let DefinedUnit;
		if (tape[ptr]) {
		DefinedUnit = tape[ptr++];
		} else { DefinedUnit = null; ptr++; }
		let CurveInterpolation;
		if (tape[ptr]) {
		CurveInterpolation = new IfcCurveInterpolationEnum(tape[ptr++]);
		} else { CurveInterpolation = null; ptr++; }
		return new IfcPropertyTableValue(expressID, type, Name, Description, DefiningValues, DefinedValues, Expression, DefiningUnit, DefinedUnit, CurveInterpolation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.DefiningValues){
		}
		else{ args.push(EMPTY); }
		if(this.DefinedValues){
		}
		else{ args.push(EMPTY); }
		if(this.Expression){
		args.push(STRING)
		args.push(this.Expression)
		}
		else{ args.push(EMPTY); }
		if(this.DefiningUnit){
		}
		else{ args.push(EMPTY); }
		if(this.DefinedUnit){
		}
		else{ args.push(EMPTY); }
		if(this.CurveInterpolation){
		args.push(ENUM);
		args.push(this.CurveInterpolation.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyTemplate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTemplate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPropertyTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPropertyTemplateDefinition {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPropertyTemplateDefinition
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcPropertyTemplateDefinition(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProtectiveDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProtectiveDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProtectiveDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProtectiveDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProtectiveDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProtectiveDeviceTrippingUnit {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceTrippingUnit
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProtectiveDeviceTrippingUnitTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProtectiveDeviceTrippingUnit(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcProtectiveDeviceTrippingUnitType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcProtectiveDeviceTrippingUnitTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceTrippingUnitType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProtectiveDeviceTrippingUnitTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProtectiveDeviceTrippingUnitType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcProtectiveDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcProtectiveDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcProtectiveDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProtectiveDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcProtectiveDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcProtectiveDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcProxy {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, ProxyType: IfcObjectTypeEnum , Tag: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.ProxyType = ProxyType;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	ProxyType: IfcObjectTypeEnum ;
	Tag: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcProxy
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let ProxyType;
		if (tape[ptr]) {
		ProxyType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { ProxyType = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcProxy(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, ProxyType, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ProxyType.value)
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPump {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcPumpTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcPumpTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPump
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPumpTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPump(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcPumpType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcPumpTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcPumpTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcPumpType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcPumpTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcPumpType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcQuantityArea {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, AreaValue: IfcAreaMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.AreaValue = AreaValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	AreaValue: IfcAreaMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityArea
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let AreaValue;
		if (tape[ptr]) {
		AreaValue = tape[ptr++];
		} else { AreaValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityArea(expressID, type, Name, Description, Unit, AreaValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.AreaValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantityCount {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, CountValue: IfcCountMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.CountValue = CountValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	CountValue: IfcCountMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityCount
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let CountValue;
		if (tape[ptr]) {
		CountValue = tape[ptr++];
		} else { CountValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityCount(expressID, type, Name, Description, Unit, CountValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.CountValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantityLength {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, LengthValue: IfcLengthMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.LengthValue = LengthValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	LengthValue: IfcLengthMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityLength
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let LengthValue;
		if (tape[ptr]) {
		LengthValue = tape[ptr++];
		} else { LengthValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityLength(expressID, type, Name, Description, Unit, LengthValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.LengthValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantitySet {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantitySet
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcQuantitySet(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantityTime {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, TimeValue: IfcTimeMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.TimeValue = TimeValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	TimeValue: IfcTimeMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let TimeValue;
		if (tape[ptr]) {
		TimeValue = tape[ptr++];
		} else { TimeValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityTime(expressID, type, Name, Description, Unit, TimeValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.TimeValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantityVolume {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, VolumeValue: IfcVolumeMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.VolumeValue = VolumeValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	VolumeValue: IfcVolumeMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityVolume
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let VolumeValue;
		if (tape[ptr]) {
		VolumeValue = tape[ptr++];
		} else { VolumeValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityVolume(expressID, type, Name, Description, Unit, VolumeValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.VolumeValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcQuantityWeight {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, Unit: Handle<IfcNamedUnit> | null, WeightValue: IfcMassMeasure , Formula: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.WeightValue = WeightValue;
		this.Formula = Formula;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	Unit: Handle<IfcNamedUnit> | null;
	WeightValue: IfcMassMeasure ;
	Formula: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcQuantityWeight
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let WeightValue;
		if (tape[ptr]) {
		WeightValue = tape[ptr++];
		} else { WeightValue = null; ptr++; }
		let Formula;
		if (tape[ptr]) {
		Formula = tape[ptr++];
		} else { Formula = null; ptr++; }
		return new IfcQuantityWeight(expressID, type, Name, Description, Unit, WeightValue, Formula);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		args.push(REF)
		args.push(this.Unit)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.WeightValue)
		if(this.Formula){
		args.push(STRING)
		args.push(this.Formula)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRailing {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRailingTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRailingTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRailing
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRailingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRailing(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRailingType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRailingTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRailingTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRailingType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRailingTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRailingType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcRamp {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRampTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRampTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRamp
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRampTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRamp(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRampFlight {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRampFlightTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRampFlightTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlight
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRampFlightTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRampFlight(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRampFlightType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRampFlightTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRampFlightTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRampFlightType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRampFlightTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRampFlightType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcRampType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRampTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRampTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRampType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRampTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRampType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcRationalBSplineCurveWithKnots {
	constructor(expressID: number, type: number, Degree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , CurveForm: IfcBSplineCurveForm , ClosedCurve: IfcLogical , SelfIntersect: IfcLogical , KnotMultiplicities: IfcInteger[] , Knots: IfcParameterValue[] , KnotSpec: IfcKnotType , WeightsData: IfcReal[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Degree = Degree;
		this.ControlPointsList = ControlPointsList;
		this.CurveForm = CurveForm;
		this.ClosedCurve = ClosedCurve;
		this.SelfIntersect = SelfIntersect;
		this.KnotMultiplicities = KnotMultiplicities;
		this.Knots = Knots;
		this.KnotSpec = KnotSpec;
		this.WeightsData = WeightsData;
	}
	expressID: number;
	type: number;
	Degree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	CurveForm: IfcBSplineCurveForm ;
	ClosedCurve: IfcLogical ;
	SelfIntersect: IfcLogical ;
	KnotMultiplicities: IfcInteger[] ;
	Knots: IfcParameterValue[] ;
	KnotSpec: IfcKnotType ;
	WeightsData: IfcReal[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRationalBSplineCurveWithKnots
	{
		let ptr = 0;
		let Degree;
		if (tape[ptr]) {
		Degree = tape[ptr++];
		} else { Degree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let CurveForm;
		if (tape[ptr]) {
		CurveForm = new IfcBSplineCurveForm(tape[ptr++]);
		} else { CurveForm = null; ptr++; }
		let ClosedCurve;
		if (tape[ptr]) {
		ClosedCurve = tape[ptr++];
		} else { ClosedCurve = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		let KnotMultiplicities;
		if (tape[ptr]) {
		KnotMultiplicities = [];
		let KnotMultiplicities_index = 0;
		while (KnotMultiplicities_index < tape[ptr].length) {
			KnotMultiplicities.push(tape[ptr][KnotMultiplicities_index++]);
		}
	ptr++;
		} else { KnotMultiplicities = null; ptr++; }
		let Knots;
		if (tape[ptr]) {
		Knots = [];
		let Knots_index = 0;
		while (Knots_index < tape[ptr].length) {
			Knots.push(tape[ptr][Knots_index++]);
		}
	ptr++;
		} else { Knots = null; ptr++; }
		let KnotSpec;
		if (tape[ptr]) {
		KnotSpec = new IfcKnotType(tape[ptr++]);
		} else { KnotSpec = null; ptr++; }
		let WeightsData;
		if (tape[ptr]) {
		WeightsData = [];
		let WeightsData_index = 0;
		while (WeightsData_index < tape[ptr].length) {
			WeightsData.push(tape[ptr][WeightsData_index++]);
		}
	ptr++;
		} else { WeightsData = null; ptr++; }
		return new IfcRationalBSplineCurveWithKnots(expressID, type, Degree, ControlPointsList, CurveForm, ClosedCurve, SelfIntersect, KnotMultiplicities, Knots, KnotSpec, WeightsData);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.Degree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.CurveForm.value)
		args.push(REAL)
		args.push(...this.KnotMultiplicities)
		args.push(REAL)
		args.push(...this.Knots)
		args.push(ENUM);
		args.push(this.KnotSpec.value)
		args.push(REAL)
		args.push(...this.WeightsData)
		return args;
	}
};
export class IfcRationalBSplineSurfaceWithKnots {
	constructor(expressID: number, type: number, UDegree: IfcInteger , VDegree: IfcInteger , ControlPointsList: Handle<IfcCartesianPoint>[] , SurfaceForm: IfcBSplineSurfaceForm , UClosed: IfcLogical , VClosed: IfcLogical , SelfIntersect: IfcLogical , UMultiplicities: IfcInteger[] , VMultiplicities: IfcInteger[] , UKnots: IfcParameterValue[] , VKnots: IfcParameterValue[] , KnotSpec: IfcKnotType , WeightsData: IfcReal[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.UDegree = UDegree;
		this.VDegree = VDegree;
		this.ControlPointsList = ControlPointsList;
		this.SurfaceForm = SurfaceForm;
		this.UClosed = UClosed;
		this.VClosed = VClosed;
		this.SelfIntersect = SelfIntersect;
		this.UMultiplicities = UMultiplicities;
		this.VMultiplicities = VMultiplicities;
		this.UKnots = UKnots;
		this.VKnots = VKnots;
		this.KnotSpec = KnotSpec;
		this.WeightsData = WeightsData;
	}
	expressID: number;
	type: number;
	UDegree: IfcInteger ;
	VDegree: IfcInteger ;
	ControlPointsList: Handle<IfcCartesianPoint>[] ;
	SurfaceForm: IfcBSplineSurfaceForm ;
	UClosed: IfcLogical ;
	VClosed: IfcLogical ;
	SelfIntersect: IfcLogical ;
	UMultiplicities: IfcInteger[] ;
	VMultiplicities: IfcInteger[] ;
	UKnots: IfcParameterValue[] ;
	VKnots: IfcParameterValue[] ;
	KnotSpec: IfcKnotType ;
	WeightsData: IfcReal[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRationalBSplineSurfaceWithKnots
	{
		let ptr = 0;
		let UDegree;
		if (tape[ptr]) {
		UDegree = tape[ptr++];
		} else { UDegree = null; ptr++; }
		let VDegree;
		if (tape[ptr]) {
		VDegree = tape[ptr++];
		} else { VDegree = null; ptr++; }
		let ControlPointsList;
		if (tape[ptr]) {
		ControlPointsList = [];
		let ControlPointsList_index = 0;
		while (ControlPointsList_index < tape[ptr].length) {
			ControlPointsList.push(tape[ptr][ControlPointsList_index++]);
		}
	ptr++;
		} else { ControlPointsList = null; ptr++; }
		let SurfaceForm;
		if (tape[ptr]) {
		SurfaceForm = new IfcBSplineSurfaceForm(tape[ptr++]);
		} else { SurfaceForm = null; ptr++; }
		let UClosed;
		if (tape[ptr]) {
		UClosed = tape[ptr++];
		} else { UClosed = null; ptr++; }
		let VClosed;
		if (tape[ptr]) {
		VClosed = tape[ptr++];
		} else { VClosed = null; ptr++; }
		let SelfIntersect;
		if (tape[ptr]) {
		SelfIntersect = tape[ptr++];
		} else { SelfIntersect = null; ptr++; }
		let UMultiplicities;
		if (tape[ptr]) {
		UMultiplicities = [];
		let UMultiplicities_index = 0;
		while (UMultiplicities_index < tape[ptr].length) {
			UMultiplicities.push(tape[ptr][UMultiplicities_index++]);
		}
	ptr++;
		} else { UMultiplicities = null; ptr++; }
		let VMultiplicities;
		if (tape[ptr]) {
		VMultiplicities = [];
		let VMultiplicities_index = 0;
		while (VMultiplicities_index < tape[ptr].length) {
			VMultiplicities.push(tape[ptr][VMultiplicities_index++]);
		}
	ptr++;
		} else { VMultiplicities = null; ptr++; }
		let UKnots;
		if (tape[ptr]) {
		UKnots = [];
		let UKnots_index = 0;
		while (UKnots_index < tape[ptr].length) {
			UKnots.push(tape[ptr][UKnots_index++]);
		}
	ptr++;
		} else { UKnots = null; ptr++; }
		let VKnots;
		if (tape[ptr]) {
		VKnots = [];
		let VKnots_index = 0;
		while (VKnots_index < tape[ptr].length) {
			VKnots.push(tape[ptr][VKnots_index++]);
		}
	ptr++;
		} else { VKnots = null; ptr++; }
		let KnotSpec;
		if (tape[ptr]) {
		KnotSpec = new IfcKnotType(tape[ptr++]);
		} else { KnotSpec = null; ptr++; }
		let WeightsData;
		if (tape[ptr]) {
		WeightsData = [];
		let WeightsData_index = 0;
		while (WeightsData_index < tape[ptr].length) {
			WeightsData.push(tape[ptr][WeightsData_index++]);
		}
	ptr++;
		} else { WeightsData = null; ptr++; }
		return new IfcRationalBSplineSurfaceWithKnots(expressID, type, UDegree, VDegree, ControlPointsList, SurfaceForm, UClosed, VClosed, SelfIntersect, UMultiplicities, VMultiplicities, UKnots, VKnots, KnotSpec, WeightsData);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.UDegree)
		args.push(REAL)
		args.push(this.VDegree)
		args.push(SET_BEGIN)
		this.ControlPointsList.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.SurfaceForm.value)
		args.push(REAL)
		args.push(...this.UMultiplicities)
		args.push(REAL)
		args.push(...this.VMultiplicities)
		args.push(REAL)
		args.push(...this.UKnots)
		args.push(REAL)
		args.push(...this.VKnots)
		args.push(ENUM);
		args.push(this.KnotSpec.value)
		args.push(REAL)
		args.push(...this.WeightsData)
		return args;
	}
};
export class IfcRectangleHollowProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , WallThickness: IfcPositiveLengthMeasure , InnerFilletRadius: IfcNonNegativeLengthMeasure | null, OuterFilletRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
		this.WallThickness = WallThickness;
		this.InnerFilletRadius = InnerFilletRadius;
		this.OuterFilletRadius = OuterFilletRadius;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	WallThickness: IfcPositiveLengthMeasure ;
	InnerFilletRadius: IfcNonNegativeLengthMeasure | null;
	OuterFilletRadius: IfcNonNegativeLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleHollowProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let XDim;
		if (tape[ptr]) {
		XDim = tape[ptr++];
		} else { XDim = null; ptr++; }
		let YDim;
		if (tape[ptr]) {
		YDim = tape[ptr++];
		} else { YDim = null; ptr++; }
		let WallThickness;
		if (tape[ptr]) {
		WallThickness = tape[ptr++];
		} else { WallThickness = null; ptr++; }
		let InnerFilletRadius;
		if (tape[ptr]) {
		InnerFilletRadius = tape[ptr++];
		} else { InnerFilletRadius = null; ptr++; }
		let OuterFilletRadius;
		if (tape[ptr]) {
		OuterFilletRadius = tape[ptr++];
		} else { OuterFilletRadius = null; ptr++; }
		return new IfcRectangleHollowProfileDef(expressID, type, ProfileType, ProfileName, Position, XDim, YDim, WallThickness, InnerFilletRadius, OuterFilletRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.InnerFilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.OuterFilletRadius){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRectangleProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRectangleProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let XDim;
		if (tape[ptr]) {
		XDim = tape[ptr++];
		} else { XDim = null; ptr++; }
		let YDim;
		if (tape[ptr]) {
		YDim = tape[ptr++];
		} else { YDim = null; ptr++; }
		return new IfcRectangleProfileDef(expressID, type, ProfileType, ProfileName, Position, XDim, YDim);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRectangularPyramid {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , XLength: IfcPositiveLengthMeasure , YLength: IfcPositiveLengthMeasure , Height: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.XLength = XLength;
		this.YLength = YLength;
		this.Height = Height;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	XLength: IfcPositiveLengthMeasure ;
	YLength: IfcPositiveLengthMeasure ;
	Height: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularPyramid
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let XLength;
		if (tape[ptr]) {
		XLength = tape[ptr++];
		} else { XLength = null; ptr++; }
		let YLength;
		if (tape[ptr]) {
		YLength = tape[ptr++];
		} else { YLength = null; ptr++; }
		let Height;
		if (tape[ptr]) {
		Height = tape[ptr++];
		} else { Height = null; ptr++; }
		return new IfcRectangularPyramid(expressID, type, Position, XLength, YLength, Height);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcRectangularTrimmedSurface {
	constructor(expressID: number, type: number, BasisSurface: Handle<IfcSurface> , U1: IfcParameterValue , V1: IfcParameterValue , U2: IfcParameterValue , V2: IfcParameterValue , Usense: IfcBoolean , Vsense: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisSurface = BasisSurface;
		this.U1 = U1;
		this.V1 = V1;
		this.U2 = U2;
		this.V2 = V2;
		this.Usense = Usense;
		this.Vsense = Vsense;
	}
	expressID: number;
	type: number;
	BasisSurface: Handle<IfcSurface> ;
	U1: IfcParameterValue ;
	V1: IfcParameterValue ;
	U2: IfcParameterValue ;
	V2: IfcParameterValue ;
	Usense: IfcBoolean ;
	Vsense: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRectangularTrimmedSurface
	{
		let ptr = 0;
		let BasisSurface;
		if (tape[ptr]) {
		BasisSurface = tape[ptr++];
		} else { BasisSurface = null; ptr++; }
		let U1;
		if (tape[ptr]) {
		U1 = tape[ptr++];
		} else { U1 = null; ptr++; }
		let V1;
		if (tape[ptr]) {
		V1 = tape[ptr++];
		} else { V1 = null; ptr++; }
		let U2;
		if (tape[ptr]) {
		U2 = tape[ptr++];
		} else { U2 = null; ptr++; }
		let V2;
		if (tape[ptr]) {
		V2 = tape[ptr++];
		} else { V2 = null; ptr++; }
		let Usense;
		if (tape[ptr]) {
		Usense = tape[ptr++];
		} else { Usense = null; ptr++; }
		let Vsense;
		if (tape[ptr]) {
		Vsense = tape[ptr++];
		} else { Vsense = null; ptr++; }
		return new IfcRectangularTrimmedSurface(expressID, type, BasisSurface, U1, V1, U2, V2, Usense, Vsense);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisSurface)
		args.push(REAL)
		args.push(this.U1)
		args.push(REAL)
		args.push(this.V1)
		args.push(REAL)
		args.push(this.U2)
		args.push(REAL)
		args.push(this.V2)
		return args;
	}
};
export class IfcRecurrencePattern {
	constructor(expressID: number, type: number, RecurrenceType: IfcRecurrenceTypeEnum , DayComponent: IfcDayInMonthNumber[] | null, WeekdayComponent: IfcDayInWeekNumber[] | null, MonthComponent: IfcMonthInYearNumber[] | null, Position: IfcInteger | null, Interval: IfcInteger | null, Occurrences: IfcInteger | null, TimePeriods: Handle<IfcTimePeriod>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.RecurrenceType = RecurrenceType;
		this.DayComponent = DayComponent;
		this.WeekdayComponent = WeekdayComponent;
		this.MonthComponent = MonthComponent;
		this.Position = Position;
		this.Interval = Interval;
		this.Occurrences = Occurrences;
		this.TimePeriods = TimePeriods;
	}
	expressID: number;
	type: number;
	RecurrenceType: IfcRecurrenceTypeEnum ;
	DayComponent: IfcDayInMonthNumber[] | null;
	WeekdayComponent: IfcDayInWeekNumber[] | null;
	MonthComponent: IfcMonthInYearNumber[] | null;
	Position: IfcInteger | null;
	Interval: IfcInteger | null;
	Occurrences: IfcInteger | null;
	TimePeriods: Handle<IfcTimePeriod>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRecurrencePattern
	{
		let ptr = 0;
		let RecurrenceType;
		if (tape[ptr]) {
		RecurrenceType = new IfcRecurrenceTypeEnum(tape[ptr++]);
		} else { RecurrenceType = null; ptr++; }
		let DayComponent;
		if (tape[ptr]) {
		DayComponent = [];
		let DayComponent_index = 0;
		while (DayComponent_index < tape[ptr].length) {
			DayComponent.push(tape[ptr][DayComponent_index++]);
		}
	ptr++;
		} else { DayComponent = null; ptr++; }
		let WeekdayComponent;
		if (tape[ptr]) {
		WeekdayComponent = [];
		let WeekdayComponent_index = 0;
		while (WeekdayComponent_index < tape[ptr].length) {
			WeekdayComponent.push(tape[ptr][WeekdayComponent_index++]);
		}
	ptr++;
		} else { WeekdayComponent = null; ptr++; }
		let MonthComponent;
		if (tape[ptr]) {
		MonthComponent = [];
		let MonthComponent_index = 0;
		while (MonthComponent_index < tape[ptr].length) {
			MonthComponent.push(tape[ptr][MonthComponent_index++]);
		}
	ptr++;
		} else { MonthComponent = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Interval;
		if (tape[ptr]) {
		Interval = tape[ptr++];
		} else { Interval = null; ptr++; }
		let Occurrences;
		if (tape[ptr]) {
		Occurrences = tape[ptr++];
		} else { Occurrences = null; ptr++; }
		let TimePeriods;
		if (tape[ptr]) {
		TimePeriods = [];
		let TimePeriods_index = 0;
		while (TimePeriods_index < tape[ptr].length) {
			TimePeriods.push(tape[ptr][TimePeriods_index++]);
		}
	ptr++;
		} else { TimePeriods = null; ptr++; }
		return new IfcRecurrencePattern(expressID, type, RecurrenceType, DayComponent, WeekdayComponent, MonthComponent, Position, Interval, Occurrences, TimePeriods);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.RecurrenceType.value)
		if(this.DayComponent){
		args.push(REAL)
		args.push(...this.DayComponent)
		}
		else{ args.push(EMPTY); }
		if(this.WeekdayComponent){
		args.push(REAL)
		args.push(...this.WeekdayComponent)
		}
		else{ args.push(EMPTY); }
		if(this.MonthComponent){
		args.push(REAL)
		args.push(...this.MonthComponent)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REAL)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.Interval){
		args.push(REAL)
		args.push(this.Interval)
		}
		else{ args.push(EMPTY); }
		if(this.Occurrences){
		args.push(REAL)
		args.push(this.Occurrences)
		}
		else{ args.push(EMPTY); }
		if(this.TimePeriods){
		args.push(SET_BEGIN)
		this.TimePeriods.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReference {
	constructor(expressID: number, type: number, TypeIdentifier: IfcIdentifier | null, AttributeIdentifier: IfcIdentifier | null, InstanceName: IfcLabel | null, ListPositions: IfcInteger[] | null, InnerReference: Handle<IfcReference> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.TypeIdentifier = TypeIdentifier;
		this.AttributeIdentifier = AttributeIdentifier;
		this.InstanceName = InstanceName;
		this.ListPositions = ListPositions;
		this.InnerReference = InnerReference;
	}
	expressID: number;
	type: number;
	TypeIdentifier: IfcIdentifier | null;
	AttributeIdentifier: IfcIdentifier | null;
	InstanceName: IfcLabel | null;
	ListPositions: IfcInteger[] | null;
	InnerReference: Handle<IfcReference> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReference
	{
		let ptr = 0;
		let TypeIdentifier;
		if (tape[ptr]) {
		TypeIdentifier = tape[ptr++];
		} else { TypeIdentifier = null; ptr++; }
		let AttributeIdentifier;
		if (tape[ptr]) {
		AttributeIdentifier = tape[ptr++];
		} else { AttributeIdentifier = null; ptr++; }
		let InstanceName;
		if (tape[ptr]) {
		InstanceName = tape[ptr++];
		} else { InstanceName = null; ptr++; }
		let ListPositions;
		if (tape[ptr]) {
		ListPositions = [];
		let ListPositions_index = 0;
		while (ListPositions_index < tape[ptr].length) {
			ListPositions.push(tape[ptr][ListPositions_index++]);
		}
	ptr++;
		} else { ListPositions = null; ptr++; }
		let InnerReference;
		if (tape[ptr]) {
		InnerReference = tape[ptr++];
		} else { InnerReference = null; ptr++; }
		return new IfcReference(expressID, type, TypeIdentifier, AttributeIdentifier, InstanceName, ListPositions, InnerReference);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TypeIdentifier){
		args.push(STRING)
		args.push(this.TypeIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.AttributeIdentifier){
		args.push(STRING)
		args.push(this.AttributeIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.InstanceName){
		args.push(STRING)
		args.push(this.InstanceName)
		}
		else{ args.push(EMPTY); }
		if(this.ListPositions){
		args.push(REAL)
		args.push(...this.ListPositions)
		}
		else{ args.push(EMPTY); }
		if(this.InnerReference){
		args.push(REF)
		args.push(this.InnerReference)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReferent {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcReferentTypeEnum | null, RestartDistance: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.RestartDistance = RestartDistance;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcReferentTypeEnum | null;
	RestartDistance: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReferent
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcReferentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let RestartDistance;
		if (tape[ptr]) {
		RestartDistance = tape[ptr++];
		} else { RestartDistance = null; ptr++; }
		return new IfcReferent(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, RestartDistance);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.RestartDistance){
		args.push(REAL)
		args.push(this.RestartDistance)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRegularTimeSeries {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null, TimeStep: IfcTimeMeasure , Values: Handle<IfcTimeSeriesValue>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
		this.TimeStep = TimeStep;
		this.Values = Values;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	TimeStep: IfcTimeMeasure ;
	Values: Handle<IfcTimeSeriesValue>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRegularTimeSeries
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let EndTime;
		if (tape[ptr]) {
		EndTime = tape[ptr++];
		} else { EndTime = null; ptr++; }
		let TimeSeriesDataType;
		if (tape[ptr]) {
		TimeSeriesDataType = new IfcTimeSeriesDataTypeEnum(tape[ptr++]);
		} else { TimeSeriesDataType = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let TimeStep;
		if (tape[ptr]) {
		TimeStep = tape[ptr++];
		} else { TimeStep = null; ptr++; }
		let Values;
		if (tape[ptr]) {
		Values = [];
		let Values_index = 0;
		while (Values_index < tape[ptr].length) {
			Values.push(tape[ptr][Values_index++]);
		}
	ptr++;
		} else { Values = null; ptr++; }
		return new IfcRegularTimeSeries(expressID, type, Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit, TimeStep, Values);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		args.push(STRING)
		args.push(this.EndTime)
		args.push(ENUM);
		args.push(this.TimeSeriesDataType.value)
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.TimeStep)
		args.push(SET_BEGIN)
		this.Values.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcReinforcementBarProperties {
	constructor(expressID: number, type: number, TotalCrossSectionArea: IfcAreaMeasure , SteelGrade: IfcLabel , BarSurface: IfcReinforcingBarSurfaceEnum | null, EffectiveDepth: IfcLengthMeasure | null, NominalBarDiameter: IfcPositiveLengthMeasure | null, BarCount: IfcCountMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.TotalCrossSectionArea = TotalCrossSectionArea;
		this.SteelGrade = SteelGrade;
		this.BarSurface = BarSurface;
		this.EffectiveDepth = EffectiveDepth;
		this.NominalBarDiameter = NominalBarDiameter;
		this.BarCount = BarCount;
	}
	expressID: number;
	type: number;
	TotalCrossSectionArea: IfcAreaMeasure ;
	SteelGrade: IfcLabel ;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	EffectiveDepth: IfcLengthMeasure | null;
	NominalBarDiameter: IfcPositiveLengthMeasure | null;
	BarCount: IfcCountMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementBarProperties
	{
		let ptr = 0;
		let TotalCrossSectionArea;
		if (tape[ptr]) {
		TotalCrossSectionArea = tape[ptr++];
		} else { TotalCrossSectionArea = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let BarSurface;
		if (tape[ptr]) {
		BarSurface = new IfcReinforcingBarSurfaceEnum(tape[ptr++]);
		} else { BarSurface = null; ptr++; }
		let EffectiveDepth;
		if (tape[ptr]) {
		EffectiveDepth = tape[ptr++];
		} else { EffectiveDepth = null; ptr++; }
		let NominalBarDiameter;
		if (tape[ptr]) {
		NominalBarDiameter = tape[ptr++];
		} else { NominalBarDiameter = null; ptr++; }
		let BarCount;
		if (tape[ptr]) {
		BarCount = tape[ptr++];
		} else { BarCount = null; ptr++; }
		return new IfcReinforcementBarProperties(expressID, type, TotalCrossSectionArea, SteelGrade, BarSurface, EffectiveDepth, NominalBarDiameter, BarCount);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.TotalCrossSectionArea)
		args.push(STRING)
		args.push(this.SteelGrade)
		if(this.BarSurface){
		args.push(ENUM);
		args.push(this.BarSurface.value)
		}
		else{ args.push(EMPTY); }
		if(this.EffectiveDepth){
		args.push(REAL)
		args.push(this.EffectiveDepth)
		}
		else{ args.push(EMPTY); }
		if(this.NominalBarDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.BarCount){
		args.push(REAL)
		args.push(this.BarCount)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcementDefinitionProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, DefinitionType: IfcLabel | null, ReinforcementSectionDefinitions: Handle<IfcSectionReinforcementProperties>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.DefinitionType = DefinitionType;
		this.ReinforcementSectionDefinitions = ReinforcementSectionDefinitions;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	DefinitionType: IfcLabel | null;
	ReinforcementSectionDefinitions: Handle<IfcSectionReinforcementProperties>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcementDefinitionProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let DefinitionType;
		if (tape[ptr]) {
		DefinitionType = tape[ptr++];
		} else { DefinitionType = null; ptr++; }
		let ReinforcementSectionDefinitions;
		if (tape[ptr]) {
		ReinforcementSectionDefinitions = [];
		let ReinforcementSectionDefinitions_index = 0;
		while (ReinforcementSectionDefinitions_index < tape[ptr].length) {
			ReinforcementSectionDefinitions.push(tape[ptr][ReinforcementSectionDefinitions_index++]);
		}
	ptr++;
		} else { ReinforcementSectionDefinitions = null; ptr++; }
		return new IfcReinforcementDefinitionProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, DefinitionType, ReinforcementSectionDefinitions);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.DefinitionType){
		args.push(STRING)
		args.push(this.DefinitionType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.ReinforcementSectionDefinitions.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcReinforcingBar {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, BarLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcReinforcingBarTypeEnum | null, BarSurface: IfcReinforcingBarSurfaceEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.BarLength = BarLength;
		this.PredefinedType = PredefinedType;
		this.BarSurface = BarSurface;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	BarLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcReinforcingBarTypeEnum | null;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingBar
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let CrossSectionArea;
		if (tape[ptr]) {
		CrossSectionArea = tape[ptr++];
		} else { CrossSectionArea = null; ptr++; }
		let BarLength;
		if (tape[ptr]) {
		BarLength = tape[ptr++];
		} else { BarLength = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcReinforcingBarTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let BarSurface;
		if (tape[ptr]) {
		BarSurface = new IfcReinforcingBarSurfaceEnum(tape[ptr++]);
		} else { BarSurface = null; ptr++; }
		return new IfcReinforcingBar(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade, NominalDiameter, CrossSectionArea, BarLength, PredefinedType, BarSurface);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.CrossSectionArea){
		args.push(REAL)
		args.push(this.CrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.BarLength){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.BarSurface){
		args.push(ENUM);
		args.push(this.BarSurface.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcingBarType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcReinforcingBarTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, BarLength: IfcPositiveLengthMeasure | null, BarSurface: IfcReinforcingBarSurfaceEnum | null, BendingShapeCode: IfcLabel | null, BendingParameters: IfcBendingParameterSelect[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.BarLength = BarLength;
		this.BarSurface = BarSurface;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcReinforcingBarTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	BarLength: IfcPositiveLengthMeasure | null;
	BarSurface: IfcReinforcingBarSurfaceEnum | null;
	BendingShapeCode: IfcLabel | null;
	BendingParameters: IfcBendingParameterSelect[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingBarType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcReinforcingBarTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let CrossSectionArea;
		if (tape[ptr]) {
		CrossSectionArea = tape[ptr++];
		} else { CrossSectionArea = null; ptr++; }
		let BarLength;
		if (tape[ptr]) {
		BarLength = tape[ptr++];
		} else { BarLength = null; ptr++; }
		let BarSurface;
		if (tape[ptr]) {
		BarSurface = new IfcReinforcingBarSurfaceEnum(tape[ptr++]);
		} else { BarSurface = null; ptr++; }
		let BendingShapeCode;
		if (tape[ptr]) {
		BendingShapeCode = tape[ptr++];
		} else { BendingShapeCode = null; ptr++; }
		let BendingParameters;
		if (tape[ptr]) {
		BendingParameters = [];
		let BendingParameters_index = 0;
		while (BendingParameters_index < tape[ptr].length) {
			BendingParameters.push(tape[ptr][BendingParameters_index++]);
		}
	ptr++;
		} else { BendingParameters = null; ptr++; }
		return new IfcReinforcingBarType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, NominalDiameter, CrossSectionArea, BarLength, BarSurface, BendingShapeCode, BendingParameters);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.CrossSectionArea){
		args.push(REAL)
		args.push(this.CrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.BarLength){
		}
		else{ args.push(EMPTY); }
		if(this.BarSurface){
		args.push(ENUM);
		args.push(this.BarSurface.value)
		}
		else{ args.push(EMPTY); }
		if(this.BendingShapeCode){
		args.push(STRING)
		args.push(this.BendingShapeCode)
		}
		else{ args.push(EMPTY); }
		if(this.BendingParameters){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcingElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		return new IfcReinforcingElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcingElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcReinforcingElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcingMesh {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, MeshLength: IfcPositiveLengthMeasure | null, MeshWidth: IfcPositiveLengthMeasure | null, LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null, TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null, LongitudinalBarCrossSectionArea: IfcAreaMeasure | null, TransverseBarCrossSectionArea: IfcAreaMeasure | null, LongitudinalBarSpacing: IfcPositiveLengthMeasure | null, TransverseBarSpacing: IfcPositiveLengthMeasure | null, PredefinedType: IfcReinforcingMeshTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	MeshLength: IfcPositiveLengthMeasure | null;
	MeshWidth: IfcPositiveLengthMeasure | null;
	LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null;
	TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null;
	LongitudinalBarCrossSectionArea: IfcAreaMeasure | null;
	TransverseBarCrossSectionArea: IfcAreaMeasure | null;
	LongitudinalBarSpacing: IfcPositiveLengthMeasure | null;
	TransverseBarSpacing: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcReinforcingMeshTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingMesh
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let MeshLength;
		if (tape[ptr]) {
		MeshLength = tape[ptr++];
		} else { MeshLength = null; ptr++; }
		let MeshWidth;
		if (tape[ptr]) {
		MeshWidth = tape[ptr++];
		} else { MeshWidth = null; ptr++; }
		let LongitudinalBarNominalDiameter;
		if (tape[ptr]) {
		LongitudinalBarNominalDiameter = tape[ptr++];
		} else { LongitudinalBarNominalDiameter = null; ptr++; }
		let TransverseBarNominalDiameter;
		if (tape[ptr]) {
		TransverseBarNominalDiameter = tape[ptr++];
		} else { TransverseBarNominalDiameter = null; ptr++; }
		let LongitudinalBarCrossSectionArea;
		if (tape[ptr]) {
		LongitudinalBarCrossSectionArea = tape[ptr++];
		} else { LongitudinalBarCrossSectionArea = null; ptr++; }
		let TransverseBarCrossSectionArea;
		if (tape[ptr]) {
		TransverseBarCrossSectionArea = tape[ptr++];
		} else { TransverseBarCrossSectionArea = null; ptr++; }
		let LongitudinalBarSpacing;
		if (tape[ptr]) {
		LongitudinalBarSpacing = tape[ptr++];
		} else { LongitudinalBarSpacing = null; ptr++; }
		let TransverseBarSpacing;
		if (tape[ptr]) {
		TransverseBarSpacing = tape[ptr++];
		} else { TransverseBarSpacing = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcReinforcingMeshTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcReinforcingMesh(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade, MeshLength, MeshWidth, LongitudinalBarNominalDiameter, TransverseBarNominalDiameter, LongitudinalBarCrossSectionArea, TransverseBarCrossSectionArea, LongitudinalBarSpacing, TransverseBarSpacing, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		if(this.MeshLength){
		}
		else{ args.push(EMPTY); }
		if(this.MeshWidth){
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarNominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarNominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarCrossSectionArea){
		args.push(REAL)
		args.push(this.LongitudinalBarCrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarCrossSectionArea){
		args.push(REAL)
		args.push(this.TransverseBarCrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReinforcingMeshType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcReinforcingMeshTypeEnum , MeshLength: IfcPositiveLengthMeasure | null, MeshWidth: IfcPositiveLengthMeasure | null, LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null, TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null, LongitudinalBarCrossSectionArea: IfcAreaMeasure | null, TransverseBarCrossSectionArea: IfcAreaMeasure | null, LongitudinalBarSpacing: IfcPositiveLengthMeasure | null, TransverseBarSpacing: IfcPositiveLengthMeasure | null, BendingShapeCode: IfcLabel | null, BendingParameters: IfcBendingParameterSelect[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.MeshLength = MeshLength;
		this.MeshWidth = MeshWidth;
		this.LongitudinalBarNominalDiameter = LongitudinalBarNominalDiameter;
		this.TransverseBarNominalDiameter = TransverseBarNominalDiameter;
		this.LongitudinalBarCrossSectionArea = LongitudinalBarCrossSectionArea;
		this.TransverseBarCrossSectionArea = TransverseBarCrossSectionArea;
		this.LongitudinalBarSpacing = LongitudinalBarSpacing;
		this.TransverseBarSpacing = TransverseBarSpacing;
		this.BendingShapeCode = BendingShapeCode;
		this.BendingParameters = BendingParameters;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcReinforcingMeshTypeEnum ;
	MeshLength: IfcPositiveLengthMeasure | null;
	MeshWidth: IfcPositiveLengthMeasure | null;
	LongitudinalBarNominalDiameter: IfcPositiveLengthMeasure | null;
	TransverseBarNominalDiameter: IfcPositiveLengthMeasure | null;
	LongitudinalBarCrossSectionArea: IfcAreaMeasure | null;
	TransverseBarCrossSectionArea: IfcAreaMeasure | null;
	LongitudinalBarSpacing: IfcPositiveLengthMeasure | null;
	TransverseBarSpacing: IfcPositiveLengthMeasure | null;
	BendingShapeCode: IfcLabel | null;
	BendingParameters: IfcBendingParameterSelect[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReinforcingMeshType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcReinforcingMeshTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let MeshLength;
		if (tape[ptr]) {
		MeshLength = tape[ptr++];
		} else { MeshLength = null; ptr++; }
		let MeshWidth;
		if (tape[ptr]) {
		MeshWidth = tape[ptr++];
		} else { MeshWidth = null; ptr++; }
		let LongitudinalBarNominalDiameter;
		if (tape[ptr]) {
		LongitudinalBarNominalDiameter = tape[ptr++];
		} else { LongitudinalBarNominalDiameter = null; ptr++; }
		let TransverseBarNominalDiameter;
		if (tape[ptr]) {
		TransverseBarNominalDiameter = tape[ptr++];
		} else { TransverseBarNominalDiameter = null; ptr++; }
		let LongitudinalBarCrossSectionArea;
		if (tape[ptr]) {
		LongitudinalBarCrossSectionArea = tape[ptr++];
		} else { LongitudinalBarCrossSectionArea = null; ptr++; }
		let TransverseBarCrossSectionArea;
		if (tape[ptr]) {
		TransverseBarCrossSectionArea = tape[ptr++];
		} else { TransverseBarCrossSectionArea = null; ptr++; }
		let LongitudinalBarSpacing;
		if (tape[ptr]) {
		LongitudinalBarSpacing = tape[ptr++];
		} else { LongitudinalBarSpacing = null; ptr++; }
		let TransverseBarSpacing;
		if (tape[ptr]) {
		TransverseBarSpacing = tape[ptr++];
		} else { TransverseBarSpacing = null; ptr++; }
		let BendingShapeCode;
		if (tape[ptr]) {
		BendingShapeCode = tape[ptr++];
		} else { BendingShapeCode = null; ptr++; }
		let BendingParameters;
		if (tape[ptr]) {
		BendingParameters = [];
		let BendingParameters_index = 0;
		while (BendingParameters_index < tape[ptr].length) {
			BendingParameters.push(tape[ptr][BendingParameters_index++]);
		}
	ptr++;
		} else { BendingParameters = null; ptr++; }
		return new IfcReinforcingMeshType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, MeshLength, MeshWidth, LongitudinalBarNominalDiameter, TransverseBarNominalDiameter, LongitudinalBarCrossSectionArea, TransverseBarCrossSectionArea, LongitudinalBarSpacing, TransverseBarSpacing, BendingShapeCode, BendingParameters);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.MeshLength){
		}
		else{ args.push(EMPTY); }
		if(this.MeshWidth){
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarNominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarNominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarCrossSectionArea){
		args.push(REAL)
		args.push(this.LongitudinalBarCrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarCrossSectionArea){
		args.push(REAL)
		args.push(this.TransverseBarCrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.LongitudinalBarSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.TransverseBarSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.BendingShapeCode){
		args.push(STRING)
		args.push(this.BendingShapeCode)
		}
		else{ args.push(EMPTY); }
		if(this.BendingParameters){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAggregates {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingObject: Handle<IfcObjectDefinition> , RelatedObjects: Handle<IfcObjectDefinition>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingObject = RelatingObject;
		this.RelatedObjects = RelatedObjects;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingObject: Handle<IfcObjectDefinition> ;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAggregates
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingObject;
		if (tape[ptr]) {
		RelatingObject = tape[ptr++];
		} else { RelatingObject = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		return new IfcRelAggregates(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingObject)
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelAssigns {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssigns
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		return new IfcRelAssigns(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssignsToActor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingActor: Handle<IfcActor> , ActingRole: Handle<IfcActorRole> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingActor = RelatingActor;
		this.ActingRole = ActingRole;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingActor: Handle<IfcActor> ;
	ActingRole: Handle<IfcActorRole> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToActor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingActor;
		if (tape[ptr]) {
		RelatingActor = tape[ptr++];
		} else { RelatingActor = null; ptr++; }
		let ActingRole;
		if (tape[ptr]) {
		ActingRole = tape[ptr++];
		} else { ActingRole = null; ptr++; }
		return new IfcRelAssignsToActor(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingActor, ActingRole);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingActor)
		if(this.ActingRole){
		args.push(REF)
		args.push(this.ActingRole)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssignsToControl {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingControl: Handle<IfcControl> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingControl = RelatingControl;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingControl: Handle<IfcControl> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToControl
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingControl;
		if (tape[ptr]) {
		RelatingControl = tape[ptr++];
		} else { RelatingControl = null; ptr++; }
		return new IfcRelAssignsToControl(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingControl);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingControl)
		return args;
	}
};
export class IfcRelAssignsToGroup {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingGroup: Handle<IfcGroup> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingGroup = RelatingGroup;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingGroup: Handle<IfcGroup> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToGroup
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingGroup;
		if (tape[ptr]) {
		RelatingGroup = tape[ptr++];
		} else { RelatingGroup = null; ptr++; }
		return new IfcRelAssignsToGroup(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingGroup);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingGroup)
		return args;
	}
};
export class IfcRelAssignsToGroupByFactor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingGroup: Handle<IfcGroup> , Factor: IfcRatioMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingGroup = RelatingGroup;
		this.Factor = Factor;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingGroup: Handle<IfcGroup> ;
	Factor: IfcRatioMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToGroupByFactor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingGroup;
		if (tape[ptr]) {
		RelatingGroup = tape[ptr++];
		} else { RelatingGroup = null; ptr++; }
		let Factor;
		if (tape[ptr]) {
		Factor = tape[ptr++];
		} else { Factor = null; ptr++; }
		return new IfcRelAssignsToGroupByFactor(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingGroup, Factor);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingGroup)
		args.push(REAL)
		args.push(this.Factor)
		return args;
	}
};
export class IfcRelAssignsToProcess {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingProcess: IfcProcessSelect , QuantityInProcess: Handle<IfcMeasureWithUnit> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingProcess = RelatingProcess;
		this.QuantityInProcess = QuantityInProcess;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingProcess: IfcProcessSelect ;
	QuantityInProcess: Handle<IfcMeasureWithUnit> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProcess
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingProcess;
		if (tape[ptr]) {
		RelatingProcess = tape[ptr++];
		} else { RelatingProcess = null; ptr++; }
		let QuantityInProcess;
		if (tape[ptr]) {
		QuantityInProcess = tape[ptr++];
		} else { QuantityInProcess = null; ptr++; }
		return new IfcRelAssignsToProcess(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingProcess, QuantityInProcess);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		if(this.QuantityInProcess){
		args.push(REF)
		args.push(this.QuantityInProcess)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssignsToProduct {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingProduct: IfcProductSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingProduct = RelatingProduct;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingProduct: IfcProductSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToProduct
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingProduct;
		if (tape[ptr]) {
		RelatingProduct = tape[ptr++];
		} else { RelatingProduct = null; ptr++; }
		return new IfcRelAssignsToProduct(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingProduct);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssignsToResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatedObjectsType: IfcObjectTypeEnum | null, RelatingResource: IfcResourceSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatedObjectsType = RelatedObjectsType;
		this.RelatingResource = RelatingResource;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatedObjectsType: IfcObjectTypeEnum | null;
	RelatingResource: IfcResourceSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssignsToResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatedObjectsType;
		if (tape[ptr]) {
		RelatedObjectsType = new IfcObjectTypeEnum(tape[ptr++]);
		} else { RelatedObjectsType = null; ptr++; }
		let RelatingResource;
		if (tape[ptr]) {
		RelatingResource = tape[ptr++];
		} else { RelatingResource = null; ptr++; }
		return new IfcRelAssignsToResource(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatedObjectsType, RelatingResource);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.RelatedObjectsType){
		args.push(ENUM);
		args.push(this.RelatedObjectsType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssociates {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociates
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		return new IfcRelAssociates(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssociatesApproval {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingApproval: Handle<IfcApproval> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingApproval = RelatingApproval;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingApproval: Handle<IfcApproval> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesApproval
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingApproval;
		if (tape[ptr]) {
		RelatingApproval = tape[ptr++];
		} else { RelatingApproval = null; ptr++; }
		return new IfcRelAssociatesApproval(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingApproval);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingApproval)
		return args;
	}
};
export class IfcRelAssociatesClassification {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingClassification: IfcClassificationSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingClassification = RelatingClassification;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingClassification: IfcClassificationSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesClassification
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingClassification;
		if (tape[ptr]) {
		RelatingClassification = tape[ptr++];
		} else { RelatingClassification = null; ptr++; }
		return new IfcRelAssociatesClassification(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingClassification);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssociatesConstraint {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , Intent: IfcLabel | null, RelatingConstraint: Handle<IfcConstraint> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.Intent = Intent;
		this.RelatingConstraint = RelatingConstraint;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	Intent: IfcLabel | null;
	RelatingConstraint: Handle<IfcConstraint> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesConstraint
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let Intent;
		if (tape[ptr]) {
		Intent = tape[ptr++];
		} else { Intent = null; ptr++; }
		let RelatingConstraint;
		if (tape[ptr]) {
		RelatingConstraint = tape[ptr++];
		} else { RelatingConstraint = null; ptr++; }
		return new IfcRelAssociatesConstraint(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, Intent, RelatingConstraint);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Intent){
		args.push(STRING)
		args.push(this.Intent)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingConstraint)
		return args;
	}
};
export class IfcRelAssociatesDocument {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingDocument: IfcDocumentSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingDocument = RelatingDocument;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingDocument: IfcDocumentSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesDocument
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingDocument;
		if (tape[ptr]) {
		RelatingDocument = tape[ptr++];
		} else { RelatingDocument = null; ptr++; }
		return new IfcRelAssociatesDocument(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingDocument);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssociatesLibrary {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingLibrary: IfcLibrarySelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingLibrary = RelatingLibrary;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingLibrary: IfcLibrarySelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesLibrary
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingLibrary;
		if (tape[ptr]) {
		RelatingLibrary = tape[ptr++];
		} else { RelatingLibrary = null; ptr++; }
		return new IfcRelAssociatesLibrary(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingLibrary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelAssociatesMaterial {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: IfcDefinitionSelect[] , RelatingMaterial: IfcMaterialSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingMaterial = RelatingMaterial;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: IfcDefinitionSelect[] ;
	RelatingMaterial: IfcMaterialSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelAssociatesMaterial
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingMaterial;
		if (tape[ptr]) {
		RelatingMaterial = tape[ptr++];
		} else { RelatingMaterial = null; ptr++; }
		return new IfcRelAssociatesMaterial(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingMaterial);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelConnects {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnects
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcRelConnects(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelConnectsElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedElement;
		if (tape[ptr]) {
		RelatedElement = tape[ptr++];
		} else { RelatedElement = null; ptr++; }
		return new IfcRelConnectsElements(expressID, type, GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingElement)
		args.push(REF)
		args.push(this.RelatedElement)
		return args;
	}
};
export class IfcRelConnectsPathElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , RelatingPriorities: IfcInteger[] , RelatedPriorities: IfcInteger[] , RelatedConnectionType: IfcConnectionTypeEnum , RelatingConnectionType: IfcConnectionTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.RelatingPriorities = RelatingPriorities;
		this.RelatedPriorities = RelatedPriorities;
		this.RelatedConnectionType = RelatedConnectionType;
		this.RelatingConnectionType = RelatingConnectionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	RelatingPriorities: IfcInteger[] ;
	RelatedPriorities: IfcInteger[] ;
	RelatedConnectionType: IfcConnectionTypeEnum ;
	RelatingConnectionType: IfcConnectionTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPathElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedElement;
		if (tape[ptr]) {
		RelatedElement = tape[ptr++];
		} else { RelatedElement = null; ptr++; }
		let RelatingPriorities;
		if (tape[ptr]) {
		RelatingPriorities = [];
		let RelatingPriorities_index = 0;
		while (RelatingPriorities_index < tape[ptr].length) {
			RelatingPriorities.push(tape[ptr][RelatingPriorities_index++]);
		}
	ptr++;
		} else { RelatingPriorities = null; ptr++; }
		let RelatedPriorities;
		if (tape[ptr]) {
		RelatedPriorities = [];
		let RelatedPriorities_index = 0;
		while (RelatedPriorities_index < tape[ptr].length) {
			RelatedPriorities.push(tape[ptr][RelatedPriorities_index++]);
		}
	ptr++;
		} else { RelatedPriorities = null; ptr++; }
		let RelatedConnectionType;
		if (tape[ptr]) {
		RelatedConnectionType = new IfcConnectionTypeEnum(tape[ptr++]);
		} else { RelatedConnectionType = null; ptr++; }
		let RelatingConnectionType;
		if (tape[ptr]) {
		RelatingConnectionType = new IfcConnectionTypeEnum(tape[ptr++]);
		} else { RelatingConnectionType = null; ptr++; }
		return new IfcRelConnectsPathElements(expressID, type, GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement, RelatingPriorities, RelatedPriorities, RelatedConnectionType, RelatingConnectionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingElement)
		args.push(REF)
		args.push(this.RelatedElement)
		args.push(REAL)
		args.push(...this.RelatingPriorities)
		args.push(REAL)
		args.push(...this.RelatedPriorities)
		args.push(ENUM);
		args.push(this.RelatedConnectionType.value)
		args.push(ENUM);
		args.push(this.RelatingConnectionType.value)
		return args;
	}
};
export class IfcRelConnectsPortToElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPort: Handle<IfcPort> , RelatedElement: Handle<IfcDistributionElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPort = RelatingPort;
		this.RelatedElement = RelatedElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPort: Handle<IfcPort> ;
	RelatedElement: Handle<IfcDistributionElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPortToElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingPort;
		if (tape[ptr]) {
		RelatingPort = tape[ptr++];
		} else { RelatingPort = null; ptr++; }
		let RelatedElement;
		if (tape[ptr]) {
		RelatedElement = tape[ptr++];
		} else { RelatedElement = null; ptr++; }
		return new IfcRelConnectsPortToElement(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingPort, RelatedElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingPort)
		args.push(REF)
		args.push(this.RelatedElement)
		return args;
	}
};
export class IfcRelConnectsPorts {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPort: Handle<IfcPort> , RelatedPort: Handle<IfcPort> , RealizingElement: Handle<IfcElement> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPort = RelatingPort;
		this.RelatedPort = RelatedPort;
		this.RealizingElement = RealizingElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPort: Handle<IfcPort> ;
	RelatedPort: Handle<IfcPort> ;
	RealizingElement: Handle<IfcElement> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsPorts
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingPort;
		if (tape[ptr]) {
		RelatingPort = tape[ptr++];
		} else { RelatingPort = null; ptr++; }
		let RelatedPort;
		if (tape[ptr]) {
		RelatedPort = tape[ptr++];
		} else { RelatedPort = null; ptr++; }
		let RealizingElement;
		if (tape[ptr]) {
		RealizingElement = tape[ptr++];
		} else { RealizingElement = null; ptr++; }
		return new IfcRelConnectsPorts(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingPort, RelatedPort, RealizingElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingPort)
		args.push(REF)
		args.push(this.RelatedPort)
		if(this.RealizingElement){
		args.push(REF)
		args.push(this.RealizingElement)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelConnectsStructuralActivity {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: IfcStructuralActivityAssignmentSelect , RelatedStructuralActivity: Handle<IfcStructuralActivity> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedStructuralActivity = RelatedStructuralActivity;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: IfcStructuralActivityAssignmentSelect ;
	RelatedStructuralActivity: Handle<IfcStructuralActivity> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralActivity
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedStructuralActivity;
		if (tape[ptr]) {
		RelatedStructuralActivity = tape[ptr++];
		} else { RelatedStructuralActivity = null; ptr++; }
		return new IfcRelConnectsStructuralActivity(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingElement, RelatedStructuralActivity);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatedStructuralActivity)
		return args;
	}
};
export class IfcRelConnectsStructuralMember {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingStructuralMember: Handle<IfcStructuralMember> , RelatedStructuralConnection: Handle<IfcStructuralConnection> , AppliedCondition: Handle<IfcBoundaryCondition> | null, AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null, SupportedLength: IfcLengthMeasure | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingStructuralMember = RelatingStructuralMember;
		this.RelatedStructuralConnection = RelatedStructuralConnection;
		this.AppliedCondition = AppliedCondition;
		this.AdditionalConditions = AdditionalConditions;
		this.SupportedLength = SupportedLength;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingStructuralMember: Handle<IfcStructuralMember> ;
	RelatedStructuralConnection: Handle<IfcStructuralConnection> ;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null;
	SupportedLength: IfcLengthMeasure | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsStructuralMember
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingStructuralMember;
		if (tape[ptr]) {
		RelatingStructuralMember = tape[ptr++];
		} else { RelatingStructuralMember = null; ptr++; }
		let RelatedStructuralConnection;
		if (tape[ptr]) {
		RelatedStructuralConnection = tape[ptr++];
		} else { RelatedStructuralConnection = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		let AdditionalConditions;
		if (tape[ptr]) {
		AdditionalConditions = tape[ptr++];
		} else { AdditionalConditions = null; ptr++; }
		let SupportedLength;
		if (tape[ptr]) {
		SupportedLength = tape[ptr++];
		} else { SupportedLength = null; ptr++; }
		let ConditionCoordinateSystem;
		if (tape[ptr]) {
		ConditionCoordinateSystem = tape[ptr++];
		} else { ConditionCoordinateSystem = null; ptr++; }
		return new IfcRelConnectsStructuralMember(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingStructuralMember)
		args.push(REF)
		args.push(this.RelatedStructuralConnection)
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		if(this.AdditionalConditions){
		args.push(REF)
		args.push(this.AdditionalConditions)
		}
		else{ args.push(EMPTY); }
		if(this.SupportedLength){
		args.push(REAL)
		args.push(this.SupportedLength)
		}
		else{ args.push(EMPTY); }
		if(this.ConditionCoordinateSystem){
		args.push(REF)
		args.push(this.ConditionCoordinateSystem)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelConnectsWithEccentricity {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingStructuralMember: Handle<IfcStructuralMember> , RelatedStructuralConnection: Handle<IfcStructuralConnection> , AppliedCondition: Handle<IfcBoundaryCondition> | null, AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null, SupportedLength: IfcLengthMeasure | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null, ConnectionConstraint: Handle<IfcConnectionGeometry> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingStructuralMember = RelatingStructuralMember;
		this.RelatedStructuralConnection = RelatedStructuralConnection;
		this.AppliedCondition = AppliedCondition;
		this.AdditionalConditions = AdditionalConditions;
		this.SupportedLength = SupportedLength;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
		this.ConnectionConstraint = ConnectionConstraint;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingStructuralMember: Handle<IfcStructuralMember> ;
	RelatedStructuralConnection: Handle<IfcStructuralConnection> ;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	AdditionalConditions: Handle<IfcStructuralConnectionCondition> | null;
	SupportedLength: IfcLengthMeasure | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	ConnectionConstraint: Handle<IfcConnectionGeometry> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithEccentricity
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingStructuralMember;
		if (tape[ptr]) {
		RelatingStructuralMember = tape[ptr++];
		} else { RelatingStructuralMember = null; ptr++; }
		let RelatedStructuralConnection;
		if (tape[ptr]) {
		RelatedStructuralConnection = tape[ptr++];
		} else { RelatedStructuralConnection = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		let AdditionalConditions;
		if (tape[ptr]) {
		AdditionalConditions = tape[ptr++];
		} else { AdditionalConditions = null; ptr++; }
		let SupportedLength;
		if (tape[ptr]) {
		SupportedLength = tape[ptr++];
		} else { SupportedLength = null; ptr++; }
		let ConditionCoordinateSystem;
		if (tape[ptr]) {
		ConditionCoordinateSystem = tape[ptr++];
		} else { ConditionCoordinateSystem = null; ptr++; }
		let ConnectionConstraint;
		if (tape[ptr]) {
		ConnectionConstraint = tape[ptr++];
		} else { ConnectionConstraint = null; ptr++; }
		return new IfcRelConnectsWithEccentricity(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingStructuralMember, RelatedStructuralConnection, AppliedCondition, AdditionalConditions, SupportedLength, ConditionCoordinateSystem, ConnectionConstraint);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingStructuralMember)
		args.push(REF)
		args.push(this.RelatedStructuralConnection)
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		if(this.AdditionalConditions){
		args.push(REF)
		args.push(this.AdditionalConditions)
		}
		else{ args.push(EMPTY); }
		if(this.SupportedLength){
		args.push(REAL)
		args.push(this.SupportedLength)
		}
		else{ args.push(EMPTY); }
		if(this.ConditionCoordinateSystem){
		args.push(REF)
		args.push(this.ConditionCoordinateSystem)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ConnectionConstraint)
		return args;
	}
};
export class IfcRelConnectsWithRealizingElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ConnectionGeometry: Handle<IfcConnectionGeometry> | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , RealizingElements: Handle<IfcElement>[] , ConnectionType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ConnectionGeometry = ConnectionGeometry;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.RealizingElements = RealizingElements;
		this.ConnectionType = ConnectionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	RealizingElements: Handle<IfcElement>[] ;
	ConnectionType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelConnectsWithRealizingElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedElement;
		if (tape[ptr]) {
		RelatedElement = tape[ptr++];
		} else { RelatedElement = null; ptr++; }
		let RealizingElements;
		if (tape[ptr]) {
		RealizingElements = [];
		let RealizingElements_index = 0;
		while (RealizingElements_index < tape[ptr].length) {
			RealizingElements.push(tape[ptr][RealizingElements_index++]);
		}
	ptr++;
		} else { RealizingElements = null; ptr++; }
		let ConnectionType;
		if (tape[ptr]) {
		ConnectionType = tape[ptr++];
		} else { ConnectionType = null; ptr++; }
		return new IfcRelConnectsWithRealizingElements(expressID, type, GlobalId, OwnerHistory, Name, Description, ConnectionGeometry, RelatingElement, RelatedElement, RealizingElements, ConnectionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingElement)
		args.push(REF)
		args.push(this.RelatedElement)
		args.push(SET_BEGIN)
		this.RealizingElements.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.ConnectionType){
		args.push(STRING)
		args.push(this.ConnectionType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelContainedInSpatialStructure {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedElements: Handle<IfcProduct>[] , RelatingStructure: Handle<IfcSpatialElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedElements = RelatedElements;
		this.RelatingStructure = RelatingStructure;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedElements: Handle<IfcProduct>[] ;
	RelatingStructure: Handle<IfcSpatialElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelContainedInSpatialStructure
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedElements;
		if (tape[ptr]) {
		RelatedElements = [];
		let RelatedElements_index = 0;
		while (RelatedElements_index < tape[ptr].length) {
			RelatedElements.push(tape[ptr][RelatedElements_index++]);
		}
	ptr++;
		} else { RelatedElements = null; ptr++; }
		let RelatingStructure;
		if (tape[ptr]) {
		RelatingStructure = tape[ptr++];
		} else { RelatingStructure = null; ptr++; }
		return new IfcRelContainedInSpatialStructure(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedElements, RelatingStructure);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedElements.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingStructure)
		return args;
	}
};
export class IfcRelCoversBldgElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingBuildingElement: Handle<IfcElement> , RelatedCoverings: Handle<IfcCovering>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingBuildingElement = RelatingBuildingElement;
		this.RelatedCoverings = RelatedCoverings;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingBuildingElement: Handle<IfcElement> ;
	RelatedCoverings: Handle<IfcCovering>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversBldgElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingBuildingElement;
		if (tape[ptr]) {
		RelatingBuildingElement = tape[ptr++];
		} else { RelatingBuildingElement = null; ptr++; }
		let RelatedCoverings;
		if (tape[ptr]) {
		RelatedCoverings = [];
		let RelatedCoverings_index = 0;
		while (RelatedCoverings_index < tape[ptr].length) {
			RelatedCoverings.push(tape[ptr][RelatedCoverings_index++]);
		}
	ptr++;
		} else { RelatedCoverings = null; ptr++; }
		return new IfcRelCoversBldgElements(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingBuildingElement, RelatedCoverings);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingBuildingElement)
		args.push(SET_BEGIN)
		this.RelatedCoverings.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelCoversSpaces {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: Handle<IfcSpace> , RelatedCoverings: Handle<IfcCovering>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedCoverings = RelatedCoverings;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: Handle<IfcSpace> ;
	RelatedCoverings: Handle<IfcCovering>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelCoversSpaces
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingSpace;
		if (tape[ptr]) {
		RelatingSpace = tape[ptr++];
		} else { RelatingSpace = null; ptr++; }
		let RelatedCoverings;
		if (tape[ptr]) {
		RelatedCoverings = [];
		let RelatedCoverings_index = 0;
		while (RelatedCoverings_index < tape[ptr].length) {
			RelatedCoverings.push(tape[ptr][RelatedCoverings_index++]);
		}
	ptr++;
		} else { RelatedCoverings = null; ptr++; }
		return new IfcRelCoversSpaces(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedCoverings);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingSpace)
		args.push(SET_BEGIN)
		this.RelatedCoverings.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelDeclares {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingContext: Handle<IfcContext> , RelatedDefinitions: IfcDefinitionSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingContext = RelatingContext;
		this.RelatedDefinitions = RelatedDefinitions;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingContext: Handle<IfcContext> ;
	RelatedDefinitions: IfcDefinitionSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDeclares
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingContext;
		if (tape[ptr]) {
		RelatingContext = tape[ptr++];
		} else { RelatingContext = null; ptr++; }
		let RelatedDefinitions;
		if (tape[ptr]) {
		RelatedDefinitions = [];
		let RelatedDefinitions_index = 0;
		while (RelatedDefinitions_index < tape[ptr].length) {
			RelatedDefinitions.push(tape[ptr][RelatedDefinitions_index++]);
		}
	ptr++;
		} else { RelatedDefinitions = null; ptr++; }
		return new IfcRelDeclares(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingContext, RelatedDefinitions);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingContext)
		return args;
	}
};
export class IfcRelDecomposes {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDecomposes
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcRelDecomposes(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelDefines {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefines
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcRelDefines(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelDefinesByObject {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObject>[] , RelatingObject: Handle<IfcObject> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingObject = RelatingObject;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObject>[] ;
	RelatingObject: Handle<IfcObject> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByObject
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingObject;
		if (tape[ptr]) {
		RelatingObject = tape[ptr++];
		} else { RelatingObject = null; ptr++; }
		return new IfcRelDefinesByObject(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingObject);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingObject)
		return args;
	}
};
export class IfcRelDefinesByProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObjectDefinition>[] , RelatingPropertyDefinition: IfcPropertySetDefinitionSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingPropertyDefinition = RelatingPropertyDefinition;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	RelatingPropertyDefinition: IfcPropertySetDefinitionSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingPropertyDefinition;
		if (tape[ptr]) {
		RelatingPropertyDefinition = tape[ptr++];
		} else { RelatingPropertyDefinition = null; ptr++; }
		return new IfcRelDefinesByProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingPropertyDefinition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelDefinesByTemplate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedPropertySets: Handle<IfcPropertySetDefinition>[] , RelatingTemplate: Handle<IfcPropertySetTemplate> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedPropertySets = RelatedPropertySets;
		this.RelatingTemplate = RelatingTemplate;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedPropertySets: Handle<IfcPropertySetDefinition>[] ;
	RelatingTemplate: Handle<IfcPropertySetTemplate> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByTemplate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedPropertySets;
		if (tape[ptr]) {
		RelatedPropertySets = [];
		let RelatedPropertySets_index = 0;
		while (RelatedPropertySets_index < tape[ptr].length) {
			RelatedPropertySets.push(tape[ptr][RelatedPropertySets_index++]);
		}
	ptr++;
		} else { RelatedPropertySets = null; ptr++; }
		let RelatingTemplate;
		if (tape[ptr]) {
		RelatingTemplate = tape[ptr++];
		} else { RelatingTemplate = null; ptr++; }
		return new IfcRelDefinesByTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedPropertySets, RelatingTemplate);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingTemplate)
		return args;
	}
};
export class IfcRelDefinesByType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedObjects: Handle<IfcObject>[] , RelatingType: Handle<IfcTypeObject> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedObjects = RelatedObjects;
		this.RelatingType = RelatingType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedObjects: Handle<IfcObject>[] ;
	RelatingType: Handle<IfcTypeObject> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelDefinesByType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		let RelatingType;
		if (tape[ptr]) {
		RelatingType = tape[ptr++];
		} else { RelatingType = null; ptr++; }
		return new IfcRelDefinesByType(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedObjects, RelatingType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingType)
		return args;
	}
};
export class IfcRelFillsElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingOpeningElement: Handle<IfcOpeningElement> , RelatedBuildingElement: Handle<IfcElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingOpeningElement = RelatingOpeningElement;
		this.RelatedBuildingElement = RelatedBuildingElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingOpeningElement: Handle<IfcOpeningElement> ;
	RelatedBuildingElement: Handle<IfcElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelFillsElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingOpeningElement;
		if (tape[ptr]) {
		RelatingOpeningElement = tape[ptr++];
		} else { RelatingOpeningElement = null; ptr++; }
		let RelatedBuildingElement;
		if (tape[ptr]) {
		RelatedBuildingElement = tape[ptr++];
		} else { RelatedBuildingElement = null; ptr++; }
		return new IfcRelFillsElement(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingOpeningElement, RelatedBuildingElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingOpeningElement)
		args.push(REF)
		args.push(this.RelatedBuildingElement)
		return args;
	}
};
export class IfcRelFlowControlElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedControlElements: Handle<IfcDistributionControlElement>[] , RelatingFlowElement: Handle<IfcDistributionFlowElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedControlElements = RelatedControlElements;
		this.RelatingFlowElement = RelatingFlowElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedControlElements: Handle<IfcDistributionControlElement>[] ;
	RelatingFlowElement: Handle<IfcDistributionFlowElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelFlowControlElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedControlElements;
		if (tape[ptr]) {
		RelatedControlElements = [];
		let RelatedControlElements_index = 0;
		while (RelatedControlElements_index < tape[ptr].length) {
			RelatedControlElements.push(tape[ptr][RelatedControlElements_index++]);
		}
	ptr++;
		} else { RelatedControlElements = null; ptr++; }
		let RelatingFlowElement;
		if (tape[ptr]) {
		RelatingFlowElement = tape[ptr++];
		} else { RelatingFlowElement = null; ptr++; }
		return new IfcRelFlowControlElements(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedControlElements, RelatingFlowElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedControlElements.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingFlowElement)
		return args;
	}
};
export class IfcRelInterferesElements {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: Handle<IfcElement> , RelatedElement: Handle<IfcElement> , InterferenceGeometry: Handle<IfcConnectionGeometry> | null, InterferenceType: IfcIdentifier | null, ImpliedOrder: Handle<boolean> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedElement = RelatedElement;
		this.InterferenceGeometry = InterferenceGeometry;
		this.InterferenceType = InterferenceType;
		this.ImpliedOrder = ImpliedOrder;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedElement: Handle<IfcElement> ;
	InterferenceGeometry: Handle<IfcConnectionGeometry> | null;
	InterferenceType: IfcIdentifier | null;
	ImpliedOrder: Handle<boolean> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelInterferesElements
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedElement;
		if (tape[ptr]) {
		RelatedElement = tape[ptr++];
		} else { RelatedElement = null; ptr++; }
		let InterferenceGeometry;
		if (tape[ptr]) {
		InterferenceGeometry = tape[ptr++];
		} else { InterferenceGeometry = null; ptr++; }
		let InterferenceType;
		if (tape[ptr]) {
		InterferenceType = tape[ptr++];
		} else { InterferenceType = null; ptr++; }
		let ImpliedOrder;
		if (tape[ptr]) {
		ImpliedOrder = tape[ptr++];
		} else { ImpliedOrder = null; ptr++; }
		return new IfcRelInterferesElements(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingElement, RelatedElement, InterferenceGeometry, InterferenceType, ImpliedOrder);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingElement)
		args.push(REF)
		args.push(this.RelatedElement)
		if(this.InterferenceGeometry){
		args.push(REF)
		args.push(this.InterferenceGeometry)
		}
		else{ args.push(EMPTY); }
		if(this.InterferenceType){
		args.push(STRING)
		args.push(this.InterferenceType)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ImpliedOrder)
		return args;
	}
};
export class IfcRelNests {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingObject: Handle<IfcObjectDefinition> , RelatedObjects: Handle<IfcObjectDefinition>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingObject = RelatingObject;
		this.RelatedObjects = RelatedObjects;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingObject: Handle<IfcObjectDefinition> ;
	RelatedObjects: Handle<IfcObjectDefinition>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelNests
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingObject;
		if (tape[ptr]) {
		RelatingObject = tape[ptr++];
		} else { RelatingObject = null; ptr++; }
		let RelatedObjects;
		if (tape[ptr]) {
		RelatedObjects = [];
		let RelatedObjects_index = 0;
		while (RelatedObjects_index < tape[ptr].length) {
			RelatedObjects.push(tape[ptr][RelatedObjects_index++]);
		}
	ptr++;
		} else { RelatedObjects = null; ptr++; }
		return new IfcRelNests(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingObject, RelatedObjects);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingObject)
		args.push(SET_BEGIN)
		this.RelatedObjects.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelPositions {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingPositioningElement: Handle<IfcPositioningElement> , RelatedProducts: Handle<IfcProduct>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingPositioningElement = RelatingPositioningElement;
		this.RelatedProducts = RelatedProducts;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingPositioningElement: Handle<IfcPositioningElement> ;
	RelatedProducts: Handle<IfcProduct>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelPositions
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingPositioningElement;
		if (tape[ptr]) {
		RelatingPositioningElement = tape[ptr++];
		} else { RelatingPositioningElement = null; ptr++; }
		let RelatedProducts;
		if (tape[ptr]) {
		RelatedProducts = [];
		let RelatedProducts_index = 0;
		while (RelatedProducts_index < tape[ptr].length) {
			RelatedProducts.push(tape[ptr][RelatedProducts_index++]);
		}
	ptr++;
		} else { RelatedProducts = null; ptr++; }
		return new IfcRelPositions(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingPositioningElement, RelatedProducts);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingPositioningElement)
		args.push(SET_BEGIN)
		this.RelatedProducts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelProjectsElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingElement: Handle<IfcElement> , RelatedFeatureElement: Handle<IfcFeatureElementAddition> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingElement = RelatingElement;
		this.RelatedFeatureElement = RelatedFeatureElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingElement: Handle<IfcElement> ;
	RelatedFeatureElement: Handle<IfcFeatureElementAddition> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelProjectsElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingElement;
		if (tape[ptr]) {
		RelatingElement = tape[ptr++];
		} else { RelatingElement = null; ptr++; }
		let RelatedFeatureElement;
		if (tape[ptr]) {
		RelatedFeatureElement = tape[ptr++];
		} else { RelatedFeatureElement = null; ptr++; }
		return new IfcRelProjectsElement(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingElement, RelatedFeatureElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingElement)
		args.push(REF)
		args.push(this.RelatedFeatureElement)
		return args;
	}
};
export class IfcRelReferencedInSpatialStructure {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatedElements: Handle<IfcProduct>[] , RelatingStructure: Handle<IfcSpatialElement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatedElements = RelatedElements;
		this.RelatingStructure = RelatingStructure;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedElements: Handle<IfcProduct>[] ;
	RelatingStructure: Handle<IfcSpatialElement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelReferencedInSpatialStructure
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedElements;
		if (tape[ptr]) {
		RelatedElements = [];
		let RelatedElements_index = 0;
		while (RelatedElements_index < tape[ptr].length) {
			RelatedElements.push(tape[ptr][RelatedElements_index++]);
		}
	ptr++;
		} else { RelatedElements = null; ptr++; }
		let RelatingStructure;
		if (tape[ptr]) {
		RelatingStructure = tape[ptr++];
		} else { RelatingStructure = null; ptr++; }
		return new IfcRelReferencedInSpatialStructure(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatedElements, RelatingStructure);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.RelatedElements.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.RelatingStructure)
		return args;
	}
};
export class IfcRelSequence {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingProcess: Handle<IfcProcess> , RelatedProcess: Handle<IfcProcess> , TimeLag: Handle<IfcLagTime> | null, SequenceType: IfcSequenceEnum | null, UserDefinedSequenceType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingProcess = RelatingProcess;
		this.RelatedProcess = RelatedProcess;
		this.TimeLag = TimeLag;
		this.SequenceType = SequenceType;
		this.UserDefinedSequenceType = UserDefinedSequenceType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingProcess: Handle<IfcProcess> ;
	RelatedProcess: Handle<IfcProcess> ;
	TimeLag: Handle<IfcLagTime> | null;
	SequenceType: IfcSequenceEnum | null;
	UserDefinedSequenceType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelSequence
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingProcess;
		if (tape[ptr]) {
		RelatingProcess = tape[ptr++];
		} else { RelatingProcess = null; ptr++; }
		let RelatedProcess;
		if (tape[ptr]) {
		RelatedProcess = tape[ptr++];
		} else { RelatedProcess = null; ptr++; }
		let TimeLag;
		if (tape[ptr]) {
		TimeLag = tape[ptr++];
		} else { TimeLag = null; ptr++; }
		let SequenceType;
		if (tape[ptr]) {
		SequenceType = new IfcSequenceEnum(tape[ptr++]);
		} else { SequenceType = null; ptr++; }
		let UserDefinedSequenceType;
		if (tape[ptr]) {
		UserDefinedSequenceType = tape[ptr++];
		} else { UserDefinedSequenceType = null; ptr++; }
		return new IfcRelSequence(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingProcess, RelatedProcess, TimeLag, SequenceType, UserDefinedSequenceType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingProcess)
		args.push(REF)
		args.push(this.RelatedProcess)
		if(this.TimeLag){
		args.push(REF)
		args.push(this.TimeLag)
		}
		else{ args.push(EMPTY); }
		if(this.SequenceType){
		args.push(ENUM);
		args.push(this.SequenceType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedSequenceType){
		args.push(STRING)
		args.push(this.UserDefinedSequenceType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelServicesBuildings {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSystem: Handle<IfcSystem> , RelatedBuildings: Handle<IfcSpatialElement>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSystem = RelatingSystem;
		this.RelatedBuildings = RelatedBuildings;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSystem: Handle<IfcSystem> ;
	RelatedBuildings: Handle<IfcSpatialElement>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelServicesBuildings
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingSystem;
		if (tape[ptr]) {
		RelatingSystem = tape[ptr++];
		} else { RelatingSystem = null; ptr++; }
		let RelatedBuildings;
		if (tape[ptr]) {
		RelatedBuildings = [];
		let RelatedBuildings_index = 0;
		while (RelatedBuildings_index < tape[ptr].length) {
			RelatedBuildings.push(tape[ptr][RelatedBuildings_index++]);
		}
	ptr++;
		} else { RelatedBuildings = null; ptr++; }
		return new IfcRelServicesBuildings(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingSystem, RelatedBuildings);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingSystem)
		args.push(SET_BEGIN)
		this.RelatedBuildings.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRelSpaceBoundary {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingSpace;
		if (tape[ptr]) {
		RelatingSpace = tape[ptr++];
		} else { RelatingSpace = null; ptr++; }
		let RelatedBuildingElement;
		if (tape[ptr]) {
		RelatedBuildingElement = tape[ptr++];
		} else { RelatedBuildingElement = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let PhysicalOrVirtualBoundary;
		if (tape[ptr]) {
		PhysicalOrVirtualBoundary = new IfcPhysicalOrVirtualEnum(tape[ptr++]);
		} else { PhysicalOrVirtualBoundary = null; ptr++; }
		let InternalOrExternalBoundary;
		if (tape[ptr]) {
		InternalOrExternalBoundary = new IfcInternalOrExternalEnum(tape[ptr++]);
		} else { InternalOrExternalBoundary = null; ptr++; }
		return new IfcRelSpaceBoundary(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatedBuildingElement)
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PhysicalOrVirtualBoundary.value)
		args.push(ENUM);
		args.push(this.InternalOrExternalBoundary.value)
		return args;
	}
};
export class IfcRelSpaceBoundary1stLevel {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum , ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		this.ParentBoundary = ParentBoundary;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary1stLevel
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingSpace;
		if (tape[ptr]) {
		RelatingSpace = tape[ptr++];
		} else { RelatingSpace = null; ptr++; }
		let RelatedBuildingElement;
		if (tape[ptr]) {
		RelatedBuildingElement = tape[ptr++];
		} else { RelatedBuildingElement = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let PhysicalOrVirtualBoundary;
		if (tape[ptr]) {
		PhysicalOrVirtualBoundary = new IfcPhysicalOrVirtualEnum(tape[ptr++]);
		} else { PhysicalOrVirtualBoundary = null; ptr++; }
		let InternalOrExternalBoundary;
		if (tape[ptr]) {
		InternalOrExternalBoundary = new IfcInternalOrExternalEnum(tape[ptr++]);
		} else { InternalOrExternalBoundary = null; ptr++; }
		let ParentBoundary;
		if (tape[ptr]) {
		ParentBoundary = tape[ptr++];
		} else { ParentBoundary = null; ptr++; }
		return new IfcRelSpaceBoundary1stLevel(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary, ParentBoundary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatedBuildingElement)
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PhysicalOrVirtualBoundary.value)
		args.push(ENUM);
		args.push(this.InternalOrExternalBoundary.value)
		if(this.ParentBoundary){
		args.push(REF)
		args.push(this.ParentBoundary)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelSpaceBoundary2ndLevel {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingSpace: IfcSpaceBoundarySelect , RelatedBuildingElement: Handle<IfcElement> , ConnectionGeometry: Handle<IfcConnectionGeometry> | null, PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum , InternalOrExternalBoundary: IfcInternalOrExternalEnum , ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null, CorrespondingBoundary: Handle<IfcRelSpaceBoundary2ndLevel> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingSpace = RelatingSpace;
		this.RelatedBuildingElement = RelatedBuildingElement;
		this.ConnectionGeometry = ConnectionGeometry;
		this.PhysicalOrVirtualBoundary = PhysicalOrVirtualBoundary;
		this.InternalOrExternalBoundary = InternalOrExternalBoundary;
		this.ParentBoundary = ParentBoundary;
		this.CorrespondingBoundary = CorrespondingBoundary;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingSpace: IfcSpaceBoundarySelect ;
	RelatedBuildingElement: Handle<IfcElement> ;
	ConnectionGeometry: Handle<IfcConnectionGeometry> | null;
	PhysicalOrVirtualBoundary: IfcPhysicalOrVirtualEnum ;
	InternalOrExternalBoundary: IfcInternalOrExternalEnum ;
	ParentBoundary: Handle<IfcRelSpaceBoundary1stLevel> | null;
	CorrespondingBoundary: Handle<IfcRelSpaceBoundary2ndLevel> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelSpaceBoundary2ndLevel
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingSpace;
		if (tape[ptr]) {
		RelatingSpace = tape[ptr++];
		} else { RelatingSpace = null; ptr++; }
		let RelatedBuildingElement;
		if (tape[ptr]) {
		RelatedBuildingElement = tape[ptr++];
		} else { RelatedBuildingElement = null; ptr++; }
		let ConnectionGeometry;
		if (tape[ptr]) {
		ConnectionGeometry = tape[ptr++];
		} else { ConnectionGeometry = null; ptr++; }
		let PhysicalOrVirtualBoundary;
		if (tape[ptr]) {
		PhysicalOrVirtualBoundary = new IfcPhysicalOrVirtualEnum(tape[ptr++]);
		} else { PhysicalOrVirtualBoundary = null; ptr++; }
		let InternalOrExternalBoundary;
		if (tape[ptr]) {
		InternalOrExternalBoundary = new IfcInternalOrExternalEnum(tape[ptr++]);
		} else { InternalOrExternalBoundary = null; ptr++; }
		let ParentBoundary;
		if (tape[ptr]) {
		ParentBoundary = tape[ptr++];
		} else { ParentBoundary = null; ptr++; }
		let CorrespondingBoundary;
		if (tape[ptr]) {
		CorrespondingBoundary = tape[ptr++];
		} else { CorrespondingBoundary = null; ptr++; }
		return new IfcRelSpaceBoundary2ndLevel(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingSpace, RelatedBuildingElement, ConnectionGeometry, PhysicalOrVirtualBoundary, InternalOrExternalBoundary, ParentBoundary, CorrespondingBoundary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatedBuildingElement)
		if(this.ConnectionGeometry){
		args.push(REF)
		args.push(this.ConnectionGeometry)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PhysicalOrVirtualBoundary.value)
		args.push(ENUM);
		args.push(this.InternalOrExternalBoundary.value)
		if(this.ParentBoundary){
		args.push(REF)
		args.push(this.ParentBoundary)
		}
		else{ args.push(EMPTY); }
		if(this.CorrespondingBoundary){
		args.push(REF)
		args.push(this.CorrespondingBoundary)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRelVoidsElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, RelatingBuildingElement: Handle<IfcElement> , RelatedOpeningElement: Handle<IfcFeatureElementSubtraction> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.RelatingBuildingElement = RelatingBuildingElement;
		this.RelatedOpeningElement = RelatedOpeningElement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingBuildingElement: Handle<IfcElement> ;
	RelatedOpeningElement: Handle<IfcFeatureElementSubtraction> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelVoidsElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingBuildingElement;
		if (tape[ptr]) {
		RelatingBuildingElement = tape[ptr++];
		} else { RelatingBuildingElement = null; ptr++; }
		let RelatedOpeningElement;
		if (tape[ptr]) {
		RelatedOpeningElement = tape[ptr++];
		} else { RelatedOpeningElement = null; ptr++; }
		return new IfcRelVoidsElement(expressID, type, GlobalId, OwnerHistory, Name, Description, RelatingBuildingElement, RelatedOpeningElement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingBuildingElement)
		args.push(REF)
		args.push(this.RelatedOpeningElement)
		return args;
	}
};
export class IfcRelationship {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRelationship
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcRelationship(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcReparametrisedCompositeCurveSegment {
	constructor(expressID: number, type: number, Transition: IfcTransitionCode , SameSense: IfcBoolean , ParentCurve: Handle<IfcCurve> , ParamLength: IfcParameterValue )
	{
		this.expressID = expressID;
		this.type = type;
		this.Transition = Transition;
		this.SameSense = SameSense;
		this.ParentCurve = ParentCurve;
		this.ParamLength = ParamLength;
	}
	expressID: number;
	type: number;
	Transition: IfcTransitionCode ;
	SameSense: IfcBoolean ;
	ParentCurve: Handle<IfcCurve> ;
	ParamLength: IfcParameterValue ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcReparametrisedCompositeCurveSegment
	{
		let ptr = 0;
		let Transition;
		if (tape[ptr]) {
		Transition = new IfcTransitionCode(tape[ptr++]);
		} else { Transition = null; ptr++; }
		let SameSense;
		if (tape[ptr]) {
		SameSense = tape[ptr++];
		} else { SameSense = null; ptr++; }
		let ParentCurve;
		if (tape[ptr]) {
		ParentCurve = tape[ptr++];
		} else { ParentCurve = null; ptr++; }
		let ParamLength;
		if (tape[ptr]) {
		ParamLength = tape[ptr++];
		} else { ParamLength = null; ptr++; }
		return new IfcReparametrisedCompositeCurveSegment(expressID, type, Transition, SameSense, ParentCurve, ParamLength);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.Transition.value)
		args.push(REF)
		args.push(this.ParentCurve)
		args.push(REAL)
		args.push(this.ParamLength)
		return args;
	}
};
export class IfcRepresentation {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentation
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcRepresentation(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcRepresentationContext {
	constructor(expressID: number, type: number, ContextIdentifier: IfcLabel | null, ContextType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextIdentifier = ContextIdentifier;
		this.ContextType = ContextType;
	}
	expressID: number;
	type: number;
	ContextIdentifier: IfcLabel | null;
	ContextType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationContext
	{
		let ptr = 0;
		let ContextIdentifier;
		if (tape[ptr]) {
		ContextIdentifier = tape[ptr++];
		} else { ContextIdentifier = null; ptr++; }
		let ContextType;
		if (tape[ptr]) {
		ContextType = tape[ptr++];
		} else { ContextType = null; ptr++; }
		return new IfcRepresentationContext(expressID, type, ContextIdentifier, ContextType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.ContextIdentifier){
		args.push(STRING)
		args.push(this.ContextIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.ContextType){
		args.push(STRING)
		args.push(this.ContextType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRepresentationItem {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationItem
	{
		let ptr = 0;
		return new IfcRepresentationItem(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcRepresentationMap {
	constructor(expressID: number, type: number, MappingOrigin: IfcAxis2Placement , MappedRepresentation: Handle<IfcRepresentation> )
	{
		this.expressID = expressID;
		this.type = type;
		this.MappingOrigin = MappingOrigin;
		this.MappedRepresentation = MappedRepresentation;
	}
	expressID: number;
	type: number;
	MappingOrigin: IfcAxis2Placement ;
	MappedRepresentation: Handle<IfcRepresentation> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRepresentationMap
	{
		let ptr = 0;
		let MappingOrigin;
		if (tape[ptr]) {
		MappingOrigin = tape[ptr++];
		} else { MappingOrigin = null; ptr++; }
		let MappedRepresentation;
		if (tape[ptr]) {
		MappedRepresentation = tape[ptr++];
		} else { MappedRepresentation = null; ptr++; }
		return new IfcRepresentationMap(expressID, type, MappingOrigin, MappedRepresentation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.MappedRepresentation)
		return args;
	}
};
export class IfcResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		return new IfcResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcResourceApprovalRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatedResourceObjects: IfcResourceObjectSelect[] , RelatingApproval: Handle<IfcApproval> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatedResourceObjects = RelatedResourceObjects;
		this.RelatingApproval = RelatingApproval;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	RelatingApproval: Handle<IfcApproval> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcResourceApprovalRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatedResourceObjects;
		if (tape[ptr]) {
		RelatedResourceObjects = [];
		let RelatedResourceObjects_index = 0;
		while (RelatedResourceObjects_index < tape[ptr].length) {
			RelatedResourceObjects.push(tape[ptr][RelatedResourceObjects_index++]);
		}
	ptr++;
		} else { RelatedResourceObjects = null; ptr++; }
		let RelatingApproval;
		if (tape[ptr]) {
		RelatingApproval = tape[ptr++];
		} else { RelatingApproval = null; ptr++; }
		return new IfcResourceApprovalRelationship(expressID, type, Name, Description, RelatedResourceObjects, RelatingApproval);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingApproval)
		return args;
	}
};
export class IfcResourceConstraintRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null, RelatingConstraint: Handle<IfcConstraint> , RelatedResourceObjects: IfcResourceObjectSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.RelatingConstraint = RelatingConstraint;
		this.RelatedResourceObjects = RelatedResourceObjects;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	RelatingConstraint: Handle<IfcConstraint> ;
	RelatedResourceObjects: IfcResourceObjectSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcResourceConstraintRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let RelatingConstraint;
		if (tape[ptr]) {
		RelatingConstraint = tape[ptr++];
		} else { RelatingConstraint = null; ptr++; }
		let RelatedResourceObjects;
		if (tape[ptr]) {
		RelatedResourceObjects = [];
		let RelatedResourceObjects_index = 0;
		while (RelatedResourceObjects_index < tape[ptr].length) {
			RelatedResourceObjects.push(tape[ptr][RelatedResourceObjects_index++]);
		}
	ptr++;
		} else { RelatedResourceObjects = null; ptr++; }
		return new IfcResourceConstraintRelationship(expressID, type, Name, Description, RelatingConstraint, RelatedResourceObjects);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.RelatingConstraint)
		return args;
	}
};
export class IfcResourceLevelRelationship {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcResourceLevelRelationship
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcResourceLevelRelationship(expressID, type, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcResourceTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, ScheduleWork: IfcDuration | null, ScheduleUsage: IfcPositiveRatioMeasure | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, ScheduleContour: IfcLabel | null, LevelingDelay: IfcDuration | null, IsOverAllocated: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualWork: IfcDuration | null, ActualUsage: IfcPositiveRatioMeasure | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingWork: IfcDuration | null, RemainingUsage: IfcPositiveRatioMeasure | null, Completion: IfcPositiveRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.ScheduleWork = ScheduleWork;
		this.ScheduleUsage = ScheduleUsage;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.ScheduleContour = ScheduleContour;
		this.LevelingDelay = LevelingDelay;
		this.IsOverAllocated = IsOverAllocated;
		this.StatusTime = StatusTime;
		this.ActualWork = ActualWork;
		this.ActualUsage = ActualUsage;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingWork = RemainingWork;
		this.RemainingUsage = RemainingUsage;
		this.Completion = Completion;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	ScheduleWork: IfcDuration | null;
	ScheduleUsage: IfcPositiveRatioMeasure | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	ScheduleContour: IfcLabel | null;
	LevelingDelay: IfcDuration | null;
	IsOverAllocated: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualWork: IfcDuration | null;
	ActualUsage: IfcPositiveRatioMeasure | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingWork: IfcDuration | null;
	RemainingUsage: IfcPositiveRatioMeasure | null;
	Completion: IfcPositiveRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcResourceTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let ScheduleWork;
		if (tape[ptr]) {
		ScheduleWork = tape[ptr++];
		} else { ScheduleWork = null; ptr++; }
		let ScheduleUsage;
		if (tape[ptr]) {
		ScheduleUsage = tape[ptr++];
		} else { ScheduleUsage = null; ptr++; }
		let ScheduleStart;
		if (tape[ptr]) {
		ScheduleStart = tape[ptr++];
		} else { ScheduleStart = null; ptr++; }
		let ScheduleFinish;
		if (tape[ptr]) {
		ScheduleFinish = tape[ptr++];
		} else { ScheduleFinish = null; ptr++; }
		let ScheduleContour;
		if (tape[ptr]) {
		ScheduleContour = tape[ptr++];
		} else { ScheduleContour = null; ptr++; }
		let LevelingDelay;
		if (tape[ptr]) {
		LevelingDelay = tape[ptr++];
		} else { LevelingDelay = null; ptr++; }
		let IsOverAllocated;
		if (tape[ptr]) {
		IsOverAllocated = tape[ptr++];
		} else { IsOverAllocated = null; ptr++; }
		let StatusTime;
		if (tape[ptr]) {
		StatusTime = tape[ptr++];
		} else { StatusTime = null; ptr++; }
		let ActualWork;
		if (tape[ptr]) {
		ActualWork = tape[ptr++];
		} else { ActualWork = null; ptr++; }
		let ActualUsage;
		if (tape[ptr]) {
		ActualUsage = tape[ptr++];
		} else { ActualUsage = null; ptr++; }
		let ActualStart;
		if (tape[ptr]) {
		ActualStart = tape[ptr++];
		} else { ActualStart = null; ptr++; }
		let ActualFinish;
		if (tape[ptr]) {
		ActualFinish = tape[ptr++];
		} else { ActualFinish = null; ptr++; }
		let RemainingWork;
		if (tape[ptr]) {
		RemainingWork = tape[ptr++];
		} else { RemainingWork = null; ptr++; }
		let RemainingUsage;
		if (tape[ptr]) {
		RemainingUsage = tape[ptr++];
		} else { RemainingUsage = null; ptr++; }
		let Completion;
		if (tape[ptr]) {
		Completion = tape[ptr++];
		} else { Completion = null; ptr++; }
		return new IfcResourceTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, ScheduleWork, ScheduleUsage, ScheduleStart, ScheduleFinish, ScheduleContour, LevelingDelay, IsOverAllocated, StatusTime, ActualWork, ActualUsage, ActualStart, ActualFinish, RemainingWork, RemainingUsage, Completion);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleWork){
		args.push(STRING)
		args.push(this.ScheduleWork)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleUsage){
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleStart){
		args.push(STRING)
		args.push(this.ScheduleStart)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleFinish){
		args.push(STRING)
		args.push(this.ScheduleFinish)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleContour){
		args.push(STRING)
		args.push(this.ScheduleContour)
		}
		else{ args.push(EMPTY); }
		if(this.LevelingDelay){
		args.push(STRING)
		args.push(this.LevelingDelay)
		}
		else{ args.push(EMPTY); }
		if(this.IsOverAllocated){
		}
		else{ args.push(EMPTY); }
		if(this.StatusTime){
		args.push(STRING)
		args.push(this.StatusTime)
		}
		else{ args.push(EMPTY); }
		if(this.ActualWork){
		args.push(STRING)
		args.push(this.ActualWork)
		}
		else{ args.push(EMPTY); }
		if(this.ActualUsage){
		}
		else{ args.push(EMPTY); }
		if(this.ActualStart){
		args.push(STRING)
		args.push(this.ActualStart)
		}
		else{ args.push(EMPTY); }
		if(this.ActualFinish){
		args.push(STRING)
		args.push(this.ActualFinish)
		}
		else{ args.push(EMPTY); }
		if(this.RemainingWork){
		args.push(STRING)
		args.push(this.RemainingWork)
		}
		else{ args.push(EMPTY); }
		if(this.RemainingUsage){
		}
		else{ args.push(EMPTY); }
		if(this.Completion){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRevolvedAreaSolid {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Axis: Handle<IfcAxis1Placement> , Angle: IfcPlaneAngleMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Axis = Axis;
		this.Angle = Angle;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Axis: Handle<IfcAxis1Placement> ;
	Angle: IfcPlaneAngleMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRevolvedAreaSolid
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		let Angle;
		if (tape[ptr]) {
		Angle = tape[ptr++];
		} else { Angle = null; ptr++; }
		return new IfcRevolvedAreaSolid(expressID, type, SweptArea, Position, Axis, Angle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Axis)
		args.push(REAL)
		args.push(this.Angle)
		return args;
	}
};
export class IfcRevolvedAreaSolidTapered {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Axis: Handle<IfcAxis1Placement> , Angle: IfcPlaneAngleMeasure , EndSweptArea: Handle<IfcProfileDef> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Axis = Axis;
		this.Angle = Angle;
		this.EndSweptArea = EndSweptArea;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Axis: Handle<IfcAxis1Placement> ;
	Angle: IfcPlaneAngleMeasure ;
	EndSweptArea: Handle<IfcProfileDef> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRevolvedAreaSolidTapered
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		let Angle;
		if (tape[ptr]) {
		Angle = tape[ptr++];
		} else { Angle = null; ptr++; }
		let EndSweptArea;
		if (tape[ptr]) {
		EndSweptArea = tape[ptr++];
		} else { EndSweptArea = null; ptr++; }
		return new IfcRevolvedAreaSolidTapered(expressID, type, SweptArea, Position, Axis, Angle, EndSweptArea);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Axis)
		args.push(REAL)
		args.push(this.Angle)
		args.push(REF)
		args.push(this.EndSweptArea)
		return args;
	}
};
export class IfcRightCircularCone {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , Height: IfcPositiveLengthMeasure , BottomRadius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Height = Height;
		this.BottomRadius = BottomRadius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	Height: IfcPositiveLengthMeasure ;
	BottomRadius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCone
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Height;
		if (tape[ptr]) {
		Height = tape[ptr++];
		} else { Height = null; ptr++; }
		let BottomRadius;
		if (tape[ptr]) {
		BottomRadius = tape[ptr++];
		} else { BottomRadius = null; ptr++; }
		return new IfcRightCircularCone(expressID, type, Position, Height, BottomRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcRightCircularCylinder {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , Height: IfcPositiveLengthMeasure , Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Height = Height;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	Height: IfcPositiveLengthMeasure ;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRightCircularCylinder
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Height;
		if (tape[ptr]) {
		Height = tape[ptr++];
		} else { Height = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcRightCircularCylinder(expressID, type, Position, Height, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcRoof {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcRoofTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcRoofTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRoof
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRoofTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRoof(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRoofType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcRoofTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcRoofTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRoofType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcRoofTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcRoofType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcRoot {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRoot
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcRoot(expressID, type, GlobalId, OwnerHistory, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcRoundedRectangleProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, XDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , RoundingRadius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.XDim = XDim;
		this.YDim = YDim;
		this.RoundingRadius = RoundingRadius;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	XDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	RoundingRadius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcRoundedRectangleProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let XDim;
		if (tape[ptr]) {
		XDim = tape[ptr++];
		} else { XDim = null; ptr++; }
		let YDim;
		if (tape[ptr]) {
		YDim = tape[ptr++];
		} else { YDim = null; ptr++; }
		let RoundingRadius;
		if (tape[ptr]) {
		RoundingRadius = tape[ptr++];
		} else { RoundingRadius = null; ptr++; }
		return new IfcRoundedRectangleProfileDef(expressID, type, ProfileType, ProfileName, Position, XDim, YDim, RoundingRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSIUnit {
	constructor(expressID: number, type: number, Dimensions: Handle<IfcDimensionalExponents> , UnitType: IfcUnitEnum , Prefix: IfcSIPrefix | null, Name: IfcSIUnitName )
	{
		this.expressID = expressID;
		this.type = type;
		this.Dimensions = Dimensions;
		this.UnitType = UnitType;
		this.Prefix = Prefix;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Dimensions: Handle<IfcDimensionalExponents> ;
	UnitType: IfcUnitEnum ;
	Prefix: IfcSIPrefix | null;
	Name: IfcSIUnitName ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSIUnit
	{
		let ptr = 0;
		let Dimensions;
		if (tape[ptr]) {
		Dimensions = tape[ptr++];
		} else { Dimensions = null; ptr++; }
		let UnitType;
		if (tape[ptr]) {
		UnitType = new IfcUnitEnum(tape[ptr++]);
		} else { UnitType = null; ptr++; }
		let Prefix;
		if (tape[ptr]) {
		Prefix = new IfcSIPrefix(tape[ptr++]);
		} else { Prefix = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = new IfcSIUnitName(tape[ptr++]);
		} else { Name = null; ptr++; }
		return new IfcSIUnit(expressID, type, Dimensions, UnitType, Prefix, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Dimensions)
		args.push(ENUM);
		args.push(this.UnitType.value)
		if(this.Prefix){
		args.push(ENUM);
		args.push(this.Prefix.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.Name.value)
		return args;
	}
};
export class IfcSanitaryTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSanitaryTerminalTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSanitaryTerminalTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSanitaryTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSanitaryTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSanitaryTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSanitaryTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSanitaryTerminalTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSanitaryTerminalTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSanitaryTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSanitaryTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSanitaryTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSchedulingTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSchedulingTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		return new IfcSchedulingTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSeamCurve {
	constructor(expressID: number, type: number, Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve>[] , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.expressID = expressID;
		this.type = type;
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	expressID: number;
	type: number;
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve>[] ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSeamCurve
	{
		let ptr = 0;
		let Curve3D;
		if (tape[ptr]) {
		Curve3D = tape[ptr++];
		} else { Curve3D = null; ptr++; }
		let AssociatedGeometry;
		if (tape[ptr]) {
		AssociatedGeometry = [];
		let AssociatedGeometry_index = 0;
		while (AssociatedGeometry_index < tape[ptr].length) {
			AssociatedGeometry.push(tape[ptr][AssociatedGeometry_index++]);
		}
	ptr++;
		} else { AssociatedGeometry = null; ptr++; }
		let MasterRepresentation;
		if (tape[ptr]) {
		MasterRepresentation = new IfcPreferredSurfaceCurveRepresentation(tape[ptr++]);
		} else { MasterRepresentation = null; ptr++; }
		return new IfcSeamCurve(expressID, type, Curve3D, AssociatedGeometry, MasterRepresentation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Curve3D)
		args.push(SET_BEGIN)
		this.AssociatedGeometry.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.MasterRepresentation.value)
		return args;
	}
};
export class IfcSectionProperties {
	constructor(expressID: number, type: number, SectionType: IfcSectionTypeEnum , StartProfile: Handle<IfcProfileDef> , EndProfile: Handle<IfcProfileDef> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SectionType = SectionType;
		this.StartProfile = StartProfile;
		this.EndProfile = EndProfile;
	}
	expressID: number;
	type: number;
	SectionType: IfcSectionTypeEnum ;
	StartProfile: Handle<IfcProfileDef> ;
	EndProfile: Handle<IfcProfileDef> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSectionProperties
	{
		let ptr = 0;
		let SectionType;
		if (tape[ptr]) {
		SectionType = new IfcSectionTypeEnum(tape[ptr++]);
		} else { SectionType = null; ptr++; }
		let StartProfile;
		if (tape[ptr]) {
		StartProfile = tape[ptr++];
		} else { StartProfile = null; ptr++; }
		let EndProfile;
		if (tape[ptr]) {
		EndProfile = tape[ptr++];
		} else { EndProfile = null; ptr++; }
		return new IfcSectionProperties(expressID, type, SectionType, StartProfile, EndProfile);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.SectionType.value)
		args.push(REF)
		args.push(this.StartProfile)
		if(this.EndProfile){
		args.push(REF)
		args.push(this.EndProfile)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSectionReinforcementProperties {
	constructor(expressID: number, type: number, LongitudinalStartPosition: IfcLengthMeasure , LongitudinalEndPosition: IfcLengthMeasure , TransversePosition: IfcLengthMeasure | null, ReinforcementRole: IfcReinforcingBarRoleEnum , SectionDefinition: Handle<IfcSectionProperties> , CrossSectionReinforcementDefinitions: Handle<IfcReinforcementBarProperties>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.LongitudinalStartPosition = LongitudinalStartPosition;
		this.LongitudinalEndPosition = LongitudinalEndPosition;
		this.TransversePosition = TransversePosition;
		this.ReinforcementRole = ReinforcementRole;
		this.SectionDefinition = SectionDefinition;
		this.CrossSectionReinforcementDefinitions = CrossSectionReinforcementDefinitions;
	}
	expressID: number;
	type: number;
	LongitudinalStartPosition: IfcLengthMeasure ;
	LongitudinalEndPosition: IfcLengthMeasure ;
	TransversePosition: IfcLengthMeasure | null;
	ReinforcementRole: IfcReinforcingBarRoleEnum ;
	SectionDefinition: Handle<IfcSectionProperties> ;
	CrossSectionReinforcementDefinitions: Handle<IfcReinforcementBarProperties>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSectionReinforcementProperties
	{
		let ptr = 0;
		let LongitudinalStartPosition;
		if (tape[ptr]) {
		LongitudinalStartPosition = tape[ptr++];
		} else { LongitudinalStartPosition = null; ptr++; }
		let LongitudinalEndPosition;
		if (tape[ptr]) {
		LongitudinalEndPosition = tape[ptr++];
		} else { LongitudinalEndPosition = null; ptr++; }
		let TransversePosition;
		if (tape[ptr]) {
		TransversePosition = tape[ptr++];
		} else { TransversePosition = null; ptr++; }
		let ReinforcementRole;
		if (tape[ptr]) {
		ReinforcementRole = new IfcReinforcingBarRoleEnum(tape[ptr++]);
		} else { ReinforcementRole = null; ptr++; }
		let SectionDefinition;
		if (tape[ptr]) {
		SectionDefinition = tape[ptr++];
		} else { SectionDefinition = null; ptr++; }
		let CrossSectionReinforcementDefinitions;
		if (tape[ptr]) {
		CrossSectionReinforcementDefinitions = [];
		let CrossSectionReinforcementDefinitions_index = 0;
		while (CrossSectionReinforcementDefinitions_index < tape[ptr].length) {
			CrossSectionReinforcementDefinitions.push(tape[ptr][CrossSectionReinforcementDefinitions_index++]);
		}
	ptr++;
		} else { CrossSectionReinforcementDefinitions = null; ptr++; }
		return new IfcSectionReinforcementProperties(expressID, type, LongitudinalStartPosition, LongitudinalEndPosition, TransversePosition, ReinforcementRole, SectionDefinition, CrossSectionReinforcementDefinitions);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(this.LongitudinalStartPosition)
		args.push(REAL)
		args.push(this.LongitudinalEndPosition)
		if(this.TransversePosition){
		args.push(REAL)
		args.push(this.TransversePosition)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ReinforcementRole.value)
		args.push(REF)
		args.push(this.SectionDefinition)
		args.push(SET_BEGIN)
		this.CrossSectionReinforcementDefinitions.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSectionedSolid {
	constructor(expressID: number, type: number, Directrix: Handle<IfcCurve> , CrossSections: Handle<IfcProfileDef>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Directrix = Directrix;
		this.CrossSections = CrossSections;
	}
	expressID: number;
	type: number;
	Directrix: Handle<IfcCurve> ;
	CrossSections: Handle<IfcProfileDef>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSectionedSolid
	{
		let ptr = 0;
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let CrossSections;
		if (tape[ptr]) {
		CrossSections = [];
		let CrossSections_index = 0;
		while (CrossSections_index < tape[ptr].length) {
			CrossSections.push(tape[ptr][CrossSections_index++]);
		}
	ptr++;
		} else { CrossSections = null; ptr++; }
		return new IfcSectionedSolid(expressID, type, Directrix, CrossSections);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Directrix)
		args.push(SET_BEGIN)
		this.CrossSections.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSectionedSolidHorizontal {
	constructor(expressID: number, type: number, Directrix: Handle<IfcCurve> , CrossSections: Handle<IfcProfileDef>[] , CrossSectionPositions: Handle<IfcDistanceExpression>[] , FixedAxisVertical: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.Directrix = Directrix;
		this.CrossSections = CrossSections;
		this.CrossSectionPositions = CrossSectionPositions;
		this.FixedAxisVertical = FixedAxisVertical;
	}
	expressID: number;
	type: number;
	Directrix: Handle<IfcCurve> ;
	CrossSections: Handle<IfcProfileDef>[] ;
	CrossSectionPositions: Handle<IfcDistanceExpression>[] ;
	FixedAxisVertical: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSectionedSolidHorizontal
	{
		let ptr = 0;
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let CrossSections;
		if (tape[ptr]) {
		CrossSections = [];
		let CrossSections_index = 0;
		while (CrossSections_index < tape[ptr].length) {
			CrossSections.push(tape[ptr][CrossSections_index++]);
		}
	ptr++;
		} else { CrossSections = null; ptr++; }
		let CrossSectionPositions;
		if (tape[ptr]) {
		CrossSectionPositions = [];
		let CrossSectionPositions_index = 0;
		while (CrossSectionPositions_index < tape[ptr].length) {
			CrossSectionPositions.push(tape[ptr][CrossSectionPositions_index++]);
		}
	ptr++;
		} else { CrossSectionPositions = null; ptr++; }
		let FixedAxisVertical;
		if (tape[ptr]) {
		FixedAxisVertical = tape[ptr++];
		} else { FixedAxisVertical = null; ptr++; }
		return new IfcSectionedSolidHorizontal(expressID, type, Directrix, CrossSections, CrossSectionPositions, FixedAxisVertical);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Directrix)
		args.push(SET_BEGIN)
		this.CrossSections.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(SET_BEGIN)
		this.CrossSectionPositions.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSectionedSpine {
	constructor(expressID: number, type: number, SpineCurve: Handle<IfcCompositeCurve> , CrossSections: Handle<IfcProfileDef>[] , CrossSectionPositions: Handle<IfcAxis2Placement3D>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.SpineCurve = SpineCurve;
		this.CrossSections = CrossSections;
		this.CrossSectionPositions = CrossSectionPositions;
	}
	expressID: number;
	type: number;
	SpineCurve: Handle<IfcCompositeCurve> ;
	CrossSections: Handle<IfcProfileDef>[] ;
	CrossSectionPositions: Handle<IfcAxis2Placement3D>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSectionedSpine
	{
		let ptr = 0;
		let SpineCurve;
		if (tape[ptr]) {
		SpineCurve = tape[ptr++];
		} else { SpineCurve = null; ptr++; }
		let CrossSections;
		if (tape[ptr]) {
		CrossSections = [];
		let CrossSections_index = 0;
		while (CrossSections_index < tape[ptr].length) {
			CrossSections.push(tape[ptr][CrossSections_index++]);
		}
	ptr++;
		} else { CrossSections = null; ptr++; }
		let CrossSectionPositions;
		if (tape[ptr]) {
		CrossSectionPositions = [];
		let CrossSectionPositions_index = 0;
		while (CrossSectionPositions_index < tape[ptr].length) {
			CrossSectionPositions.push(tape[ptr][CrossSectionPositions_index++]);
		}
	ptr++;
		} else { CrossSectionPositions = null; ptr++; }
		return new IfcSectionedSpine(expressID, type, SpineCurve, CrossSections, CrossSectionPositions);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SpineCurve)
		args.push(SET_BEGIN)
		this.CrossSections.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(SET_BEGIN)
		this.CrossSectionPositions.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSensor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSensorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSensorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSensor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSensorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSensor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSensorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSensorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSensorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSensorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSensorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSensorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcShadingDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcShadingDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcShadingDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShadingDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcShadingDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcShadingDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcShadingDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcShadingDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcShadingDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShadingDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcShadingDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcShadingDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcShapeAspect {
	constructor(expressID: number, type: number, ShapeRepresentations: Handle<IfcShapeModel>[] , Name: IfcLabel | null, Description: IfcText | null, ProductDefinitional: IfcLogical , PartOfProductDefinitionShape: IfcProductRepresentationSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ShapeRepresentations = ShapeRepresentations;
		this.Name = Name;
		this.Description = Description;
		this.ProductDefinitional = ProductDefinitional;
		this.PartOfProductDefinitionShape = PartOfProductDefinitionShape;
	}
	expressID: number;
	type: number;
	ShapeRepresentations: Handle<IfcShapeModel>[] ;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ProductDefinitional: IfcLogical ;
	PartOfProductDefinitionShape: IfcProductRepresentationSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShapeAspect
	{
		let ptr = 0;
		let ShapeRepresentations;
		if (tape[ptr]) {
		ShapeRepresentations = [];
		let ShapeRepresentations_index = 0;
		while (ShapeRepresentations_index < tape[ptr].length) {
			ShapeRepresentations.push(tape[ptr][ShapeRepresentations_index++]);
		}
	ptr++;
		} else { ShapeRepresentations = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ProductDefinitional;
		if (tape[ptr]) {
		ProductDefinitional = tape[ptr++];
		} else { ProductDefinitional = null; ptr++; }
		let PartOfProductDefinitionShape;
		if (tape[ptr]) {
		PartOfProductDefinitionShape = tape[ptr++];
		} else { PartOfProductDefinitionShape = null; ptr++; }
		return new IfcShapeAspect(expressID, type, ShapeRepresentations, Name, Description, ProductDefinitional, PartOfProductDefinitionShape);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.ShapeRepresentations.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.PartOfProductDefinitionShape){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcShapeModel {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShapeModel
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcShapeModel(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcShapeRepresentation {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShapeRepresentation
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcShapeRepresentation(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcShellBasedSurfaceModel {
	constructor(expressID: number, type: number, SbsmBoundary: IfcShell[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.SbsmBoundary = SbsmBoundary;
	}
	expressID: number;
	type: number;
	SbsmBoundary: IfcShell[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcShellBasedSurfaceModel
	{
		let ptr = 0;
		let SbsmBoundary;
		if (tape[ptr]) {
		SbsmBoundary = [];
		let SbsmBoundary_index = 0;
		while (SbsmBoundary_index < tape[ptr].length) {
			SbsmBoundary.push(tape[ptr][SbsmBoundary_index++]);
		}
	ptr++;
		} else { SbsmBoundary = null; ptr++; }
		return new IfcShellBasedSurfaceModel(expressID, type, SbsmBoundary);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcSimpleProperty {
	constructor(expressID: number, type: number, Name: IfcIdentifier , Description: IfcText | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
	}
	expressID: number;
	type: number;
	Name: IfcIdentifier ;
	Description: IfcText | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSimpleProperty
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		return new IfcSimpleProperty(expressID, type, Name, Description);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSimplePropertyTemplate {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, TemplateType: IfcSimplePropertyTemplateTypeEnum | null, PrimaryMeasureType: IfcLabel | null, SecondaryMeasureType: IfcLabel | null, Enumerators: Handle<IfcPropertyEnumeration> | null, PrimaryUnit: IfcUnit | null, SecondaryUnit: IfcUnit | null, Expression: IfcLabel | null, AccessState: IfcStateEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.TemplateType = TemplateType;
		this.PrimaryMeasureType = PrimaryMeasureType;
		this.SecondaryMeasureType = SecondaryMeasureType;
		this.Enumerators = Enumerators;
		this.PrimaryUnit = PrimaryUnit;
		this.SecondaryUnit = SecondaryUnit;
		this.Expression = Expression;
		this.AccessState = AccessState;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	TemplateType: IfcSimplePropertyTemplateTypeEnum | null;
	PrimaryMeasureType: IfcLabel | null;
	SecondaryMeasureType: IfcLabel | null;
	Enumerators: Handle<IfcPropertyEnumeration> | null;
	PrimaryUnit: IfcUnit | null;
	SecondaryUnit: IfcUnit | null;
	Expression: IfcLabel | null;
	AccessState: IfcStateEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSimplePropertyTemplate
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let TemplateType;
		if (tape[ptr]) {
		TemplateType = new IfcSimplePropertyTemplateTypeEnum(tape[ptr++]);
		} else { TemplateType = null; ptr++; }
		let PrimaryMeasureType;
		if (tape[ptr]) {
		PrimaryMeasureType = tape[ptr++];
		} else { PrimaryMeasureType = null; ptr++; }
		let SecondaryMeasureType;
		if (tape[ptr]) {
		SecondaryMeasureType = tape[ptr++];
		} else { SecondaryMeasureType = null; ptr++; }
		let Enumerators;
		if (tape[ptr]) {
		Enumerators = tape[ptr++];
		} else { Enumerators = null; ptr++; }
		let PrimaryUnit;
		if (tape[ptr]) {
		PrimaryUnit = tape[ptr++];
		} else { PrimaryUnit = null; ptr++; }
		let SecondaryUnit;
		if (tape[ptr]) {
		SecondaryUnit = tape[ptr++];
		} else { SecondaryUnit = null; ptr++; }
		let Expression;
		if (tape[ptr]) {
		Expression = tape[ptr++];
		} else { Expression = null; ptr++; }
		let AccessState;
		if (tape[ptr]) {
		AccessState = new IfcStateEnum(tape[ptr++]);
		} else { AccessState = null; ptr++; }
		return new IfcSimplePropertyTemplate(expressID, type, GlobalId, OwnerHistory, Name, Description, TemplateType, PrimaryMeasureType, SecondaryMeasureType, Enumerators, PrimaryUnit, SecondaryUnit, Expression, AccessState);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.TemplateType){
		args.push(ENUM);
		args.push(this.TemplateType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PrimaryMeasureType){
		args.push(STRING)
		args.push(this.PrimaryMeasureType)
		}
		else{ args.push(EMPTY); }
		if(this.SecondaryMeasureType){
		args.push(STRING)
		args.push(this.SecondaryMeasureType)
		}
		else{ args.push(EMPTY); }
		if(this.Enumerators){
		args.push(REF)
		args.push(this.Enumerators)
		}
		else{ args.push(EMPTY); }
		if(this.PrimaryUnit){
		}
		else{ args.push(EMPTY); }
		if(this.SecondaryUnit){
		}
		else{ args.push(EMPTY); }
		if(this.Expression){
		args.push(STRING)
		args.push(this.Expression)
		}
		else{ args.push(EMPTY); }
		if(this.AccessState){
		args.push(ENUM);
		args.push(this.AccessState.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSite {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, RefLatitude: IfcCompoundPlaneAngleMeasure | null, RefLongitude: IfcCompoundPlaneAngleMeasure | null, RefElevation: IfcLengthMeasure | null, LandTitleNumber: IfcLabel | null, SiteAddress: Handle<IfcPostalAddress> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.RefLatitude = RefLatitude;
		this.RefLongitude = RefLongitude;
		this.RefElevation = RefElevation;
		this.LandTitleNumber = LandTitleNumber;
		this.SiteAddress = SiteAddress;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	RefLatitude: IfcCompoundPlaneAngleMeasure | null;
	RefLongitude: IfcCompoundPlaneAngleMeasure | null;
	RefElevation: IfcLengthMeasure | null;
	LandTitleNumber: IfcLabel | null;
	SiteAddress: Handle<IfcPostalAddress> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSite
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let RefLatitude;
		if (tape[ptr]) {
		RefLatitude = tape[ptr++];
		} else { RefLatitude = null; ptr++; }
		let RefLongitude;
		if (tape[ptr]) {
		RefLongitude = tape[ptr++];
		} else { RefLongitude = null; ptr++; }
		let RefElevation;
		if (tape[ptr]) {
		RefElevation = tape[ptr++];
		} else { RefElevation = null; ptr++; }
		let LandTitleNumber;
		if (tape[ptr]) {
		LandTitleNumber = tape[ptr++];
		} else { LandTitleNumber = null; ptr++; }
		let SiteAddress;
		if (tape[ptr]) {
		SiteAddress = tape[ptr++];
		} else { SiteAddress = null; ptr++; }
		return new IfcSite(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, RefLatitude, RefLongitude, RefElevation, LandTitleNumber, SiteAddress);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.RefLatitude){
		args.push(REAL)
		args.push(this.RefLatitude)
		}
		else{ args.push(EMPTY); }
		if(this.RefLongitude){
		args.push(REAL)
		args.push(this.RefLongitude)
		}
		else{ args.push(EMPTY); }
		if(this.RefElevation){
		args.push(REAL)
		args.push(this.RefElevation)
		}
		else{ args.push(EMPTY); }
		if(this.LandTitleNumber){
		args.push(STRING)
		args.push(this.LandTitleNumber)
		}
		else{ args.push(EMPTY); }
		if(this.SiteAddress){
		args.push(REF)
		args.push(this.SiteAddress)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSlab {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSlab
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSlabTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSlab(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSlabElementedCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSlabElementedCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSlabTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSlabElementedCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSlabStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSlabTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSlabTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSlabStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSlabTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSlabStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSlabType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSlabTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSlabTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSlabType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSlabTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSlabType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSlippageConnectionCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null, SlippageX: IfcLengthMeasure | null, SlippageY: IfcLengthMeasure | null, SlippageZ: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.SlippageX = SlippageX;
		this.SlippageY = SlippageY;
		this.SlippageZ = SlippageZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	SlippageX: IfcLengthMeasure | null;
	SlippageY: IfcLengthMeasure | null;
	SlippageZ: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSlippageConnectionCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let SlippageX;
		if (tape[ptr]) {
		SlippageX = tape[ptr++];
		} else { SlippageX = null; ptr++; }
		let SlippageY;
		if (tape[ptr]) {
		SlippageY = tape[ptr++];
		} else { SlippageY = null; ptr++; }
		let SlippageZ;
		if (tape[ptr]) {
		SlippageZ = tape[ptr++];
		} else { SlippageZ = null; ptr++; }
		return new IfcSlippageConnectionCondition(expressID, type, Name, SlippageX, SlippageY, SlippageZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.SlippageX){
		args.push(REAL)
		args.push(this.SlippageX)
		}
		else{ args.push(EMPTY); }
		if(this.SlippageY){
		args.push(REAL)
		args.push(this.SlippageY)
		}
		else{ args.push(EMPTY); }
		if(this.SlippageZ){
		args.push(REAL)
		args.push(this.SlippageZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSolarDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSolarDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSolarDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSolarDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSolarDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSolarDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSolarDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSolarDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSolarDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSolarDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSolarDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSolarDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSolidModel {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSolidModel
	{
		let ptr = 0;
		return new IfcSolidModel(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcSpace {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null, PredefinedType: IfcSpaceTypeEnum | null, ElevationWithFlooring: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
		this.PredefinedType = PredefinedType;
		this.ElevationWithFlooring = ElevationWithFlooring;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	PredefinedType: IfcSpaceTypeEnum | null;
	ElevationWithFlooring: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpace
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpaceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let ElevationWithFlooring;
		if (tape[ptr]) {
		ElevationWithFlooring = tape[ptr++];
		} else { ElevationWithFlooring = null; ptr++; }
		return new IfcSpace(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType, PredefinedType, ElevationWithFlooring);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ElevationWithFlooring){
		args.push(REAL)
		args.push(this.ElevationWithFlooring)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpaceHeater {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSpaceHeaterTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSpaceHeaterTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceHeater
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpaceHeaterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSpaceHeater(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpaceHeaterType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpaceHeaterTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpaceHeaterTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceHeaterType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpaceHeaterTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSpaceHeaterType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSpaceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpaceTypeEnum , LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpaceTypeEnum ;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpaceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpaceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcSpaceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcSpatialElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcSpatialElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialStructureElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, CompositionType: IfcElementCompositionEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.CompositionType = CompositionType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	CompositionType: IfcElementCompositionEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let CompositionType;
		if (tape[ptr]) {
		CompositionType = new IfcElementCompositionEnum(tape[ptr++]);
		} else { CompositionType = null; ptr++; }
		return new IfcSpatialStructureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, CompositionType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.CompositionType){
		args.push(ENUM);
		args.push(this.CompositionType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialStructureElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialStructureElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		return new IfcSpatialStructureElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialZone {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, LongName: IfcLabel | null, PredefinedType: IfcSpatialZoneTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.LongName = LongName;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	LongName: IfcLabel | null;
	PredefinedType: IfcSpatialZoneTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialZone
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpatialZoneTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSpatialZone(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, LongName, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSpatialZoneType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSpatialZoneTypeEnum , LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSpatialZoneTypeEnum ;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSpatialZoneType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSpatialZoneTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcSpatialZoneType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSphere {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSphere
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcSphere(expressID, type, Position, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcSphericalSurface {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , Radius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.Radius = Radius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	Radius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSphericalSurface
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		return new IfcSphericalSurface(expressID, type, Position, Radius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcStackTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcStackTerminalTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcStackTerminalTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStackTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStackTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStackTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStackTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStackTerminalTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStackTerminalTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStackTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStackTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStackTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStair {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcStairTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcStairTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStair
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStairTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStair(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStairFlight {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, NumberOfRisers: IfcInteger | null, NumberOfTreads: IfcInteger | null, RiserHeight: IfcPositiveLengthMeasure | null, TreadLength: IfcPositiveLengthMeasure | null, PredefinedType: IfcStairFlightTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.NumberOfRisers = NumberOfRisers;
		this.NumberOfTreads = NumberOfTreads;
		this.RiserHeight = RiserHeight;
		this.TreadLength = TreadLength;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	NumberOfRisers: IfcInteger | null;
	NumberOfTreads: IfcInteger | null;
	RiserHeight: IfcPositiveLengthMeasure | null;
	TreadLength: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcStairFlightTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlight
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let NumberOfRisers;
		if (tape[ptr]) {
		NumberOfRisers = tape[ptr++];
		} else { NumberOfRisers = null; ptr++; }
		let NumberOfTreads;
		if (tape[ptr]) {
		NumberOfTreads = tape[ptr++];
		} else { NumberOfTreads = null; ptr++; }
		let RiserHeight;
		if (tape[ptr]) {
		RiserHeight = tape[ptr++];
		} else { RiserHeight = null; ptr++; }
		let TreadLength;
		if (tape[ptr]) {
		TreadLength = tape[ptr++];
		} else { TreadLength = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStairFlightTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStairFlight(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, NumberOfRisers, NumberOfTreads, RiserHeight, TreadLength, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.NumberOfRisers){
		args.push(REAL)
		args.push(this.NumberOfRisers)
		}
		else{ args.push(EMPTY); }
		if(this.NumberOfTreads){
		args.push(REAL)
		args.push(this.NumberOfTreads)
		}
		else{ args.push(EMPTY); }
		if(this.RiserHeight){
		}
		else{ args.push(EMPTY); }
		if(this.TreadLength){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStairFlightType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStairFlightTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStairFlightTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStairFlightType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStairFlightTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStairFlightType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStairType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcStairTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcStairTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStairType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStairTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStairType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		return new IfcStructuralAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralActivity {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralActivity
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		return new IfcStructuralActivity(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		return args;
	}
};
export class IfcStructuralAnalysisModel {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcAnalysisModelTypeEnum , OrientationOf2DPlane: Handle<IfcAxis2Placement3D> | null, LoadedBy: Handle<IfcStructuralLoadGroup>[] | null, HasResults: Handle<IfcStructuralResultGroup>[] | null, SharedPlacement: Handle<IfcObjectPlacement> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.OrientationOf2DPlane = OrientationOf2DPlane;
		this.LoadedBy = LoadedBy;
		this.HasResults = HasResults;
		this.SharedPlacement = SharedPlacement;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcAnalysisModelTypeEnum ;
	OrientationOf2DPlane: Handle<IfcAxis2Placement3D> | null;
	LoadedBy: Handle<IfcStructuralLoadGroup>[] | null;
	HasResults: Handle<IfcStructuralResultGroup>[] | null;
	SharedPlacement: Handle<IfcObjectPlacement> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralAnalysisModel
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcAnalysisModelTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let OrientationOf2DPlane;
		if (tape[ptr]) {
		OrientationOf2DPlane = tape[ptr++];
		} else { OrientationOf2DPlane = null; ptr++; }
		let LoadedBy;
		if (tape[ptr]) {
		LoadedBy = [];
		let LoadedBy_index = 0;
		while (LoadedBy_index < tape[ptr].length) {
			LoadedBy.push(tape[ptr][LoadedBy_index++]);
		}
	ptr++;
		} else { LoadedBy = null; ptr++; }
		let HasResults;
		if (tape[ptr]) {
		HasResults = [];
		let HasResults_index = 0;
		while (HasResults_index < tape[ptr].length) {
			HasResults.push(tape[ptr][HasResults_index++]);
		}
	ptr++;
		} else { HasResults = null; ptr++; }
		let SharedPlacement;
		if (tape[ptr]) {
		SharedPlacement = tape[ptr++];
		} else { SharedPlacement = null; ptr++; }
		return new IfcStructuralAnalysisModel(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, OrientationOf2DPlane, LoadedBy, HasResults, SharedPlacement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.OrientationOf2DPlane){
		args.push(REF)
		args.push(this.OrientationOf2DPlane)
		}
		else{ args.push(EMPTY); }
		if(this.LoadedBy){
		args.push(SET_BEGIN)
		this.LoadedBy.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.HasResults){
		args.push(SET_BEGIN)
		this.HasResults.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.SharedPlacement){
		args.push(REF)
		args.push(this.SharedPlacement)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralConnection {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnection
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		return new IfcStructuralConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralConnectionCondition {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralConnectionCondition
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcStructuralConnectionCondition(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralCurveAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		let ProjectedOrTrue;
		if (tape[ptr]) {
		ProjectedOrTrue = new IfcProjectedOrTrueLengthEnum(tape[ptr++]);
		} else { ProjectedOrTrue = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralCurveActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralCurveAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		if(this.ProjectedOrTrue){
		args.push(ENUM);
		args.push(this.ProjectedOrTrue.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralCurveConnection {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null, Axis: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
		this.Axis = Axis;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	Axis: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveConnection
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		return new IfcStructuralCurveConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition, Axis);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Axis)
		return args;
	}
};
export class IfcStructuralCurveMember {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralCurveMemberTypeEnum , Axis: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Axis = Axis;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralCurveMemberTypeEnum ;
	Axis: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMember
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralCurveMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		return new IfcStructuralCurveMember(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Axis);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(REF)
		args.push(this.Axis)
		return args;
	}
};
export class IfcStructuralCurveMemberVarying {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralCurveMemberTypeEnum , Axis: Handle<IfcDirection> )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Axis = Axis;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralCurveMemberTypeEnum ;
	Axis: Handle<IfcDirection> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveMemberVarying
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralCurveMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Axis;
		if (tape[ptr]) {
		Axis = tape[ptr++];
		} else { Axis = null; ptr++; }
		return new IfcStructuralCurveMemberVarying(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Axis);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(REF)
		args.push(this.Axis)
		return args;
	}
};
export class IfcStructuralCurveReaction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralCurveReaction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralCurveActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralCurveReaction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralItem {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralItem
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcStructuralItem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLinearAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralCurveActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralCurveActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLinearAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		let ProjectedOrTrue;
		if (tape[ptr]) {
		ProjectedOrTrue = new IfcProjectedOrTrueLengthEnum(tape[ptr++]);
		} else { ProjectedOrTrue = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralCurveActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralLinearAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		if(this.ProjectedOrTrue){
		args.push(ENUM);
		args.push(this.ProjectedOrTrue.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralLoad {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoad
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcStructuralLoad(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcLoadGroupTypeEnum , ActionType: IfcActionTypeEnum , ActionSource: IfcActionSourceTypeEnum , Coefficient: IfcRatioMeasure | null, Purpose: IfcLabel | null, SelfWeightCoefficients: IfcRatioMeasure[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.ActionType = ActionType;
		this.ActionSource = ActionSource;
		this.Coefficient = Coefficient;
		this.Purpose = Purpose;
		this.SelfWeightCoefficients = SelfWeightCoefficients;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcLoadGroupTypeEnum ;
	ActionType: IfcActionTypeEnum ;
	ActionSource: IfcActionSourceTypeEnum ;
	Coefficient: IfcRatioMeasure | null;
	Purpose: IfcLabel | null;
	SelfWeightCoefficients: IfcRatioMeasure[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLoadGroupTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let ActionType;
		if (tape[ptr]) {
		ActionType = new IfcActionTypeEnum(tape[ptr++]);
		} else { ActionType = null; ptr++; }
		let ActionSource;
		if (tape[ptr]) {
		ActionSource = new IfcActionSourceTypeEnum(tape[ptr++]);
		} else { ActionSource = null; ptr++; }
		let Coefficient;
		if (tape[ptr]) {
		Coefficient = tape[ptr++];
		} else { Coefficient = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		let SelfWeightCoefficients;
		if (tape[ptr]) {
		SelfWeightCoefficients = [];
		let SelfWeightCoefficients_index = 0;
		while (SelfWeightCoefficients_index < tape[ptr].length) {
			SelfWeightCoefficients.push(tape[ptr][SelfWeightCoefficients_index++]);
		}
	ptr++;
		} else { SelfWeightCoefficients = null; ptr++; }
		return new IfcStructuralLoadCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, ActionType, ActionSource, Coefficient, Purpose, SelfWeightCoefficients);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(ENUM);
		args.push(this.ActionType.value)
		args.push(ENUM);
		args.push(this.ActionSource.value)
		if(this.Coefficient){
		args.push(REAL)
		args.push(this.Coefficient)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		if(this.SelfWeightCoefficients){
		args.push(REAL)
		args.push(...this.SelfWeightCoefficients)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadConfiguration {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Values: Handle<IfcStructuralLoadOrResult>[] , Locations: IfcLengthMeasure[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Values = Values;
		this.Locations = Locations;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Values: Handle<IfcStructuralLoadOrResult>[] ;
	Locations: IfcLengthMeasure[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadConfiguration
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Values;
		if (tape[ptr]) {
		Values = [];
		let Values_index = 0;
		while (Values_index < tape[ptr].length) {
			Values.push(tape[ptr][Values_index++]);
		}
	ptr++;
		} else { Values = null; ptr++; }
		let Locations;
		if (tape[ptr]) {
		Locations = [];
		let Locations_index = 0;
		while (Locations_index < tape[ptr].length) {
			Locations.push(tape[ptr][Locations_index++]);
		}
	ptr++;
		} else { Locations = null; ptr++; }
		return new IfcStructuralLoadConfiguration(expressID, type, Name, Values, Locations);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Values.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		if(this.Locations){
		args.push(REAL)
		args.push(...this.Locations)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadGroup {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, PredefinedType: IfcLoadGroupTypeEnum , ActionType: IfcActionTypeEnum , ActionSource: IfcActionSourceTypeEnum , Coefficient: IfcRatioMeasure | null, Purpose: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.PredefinedType = PredefinedType;
		this.ActionType = ActionType;
		this.ActionSource = ActionSource;
		this.Coefficient = Coefficient;
		this.Purpose = Purpose;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	PredefinedType: IfcLoadGroupTypeEnum ;
	ActionType: IfcActionTypeEnum ;
	ActionSource: IfcActionSourceTypeEnum ;
	Coefficient: IfcRatioMeasure | null;
	Purpose: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadGroup
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcLoadGroupTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let ActionType;
		if (tape[ptr]) {
		ActionType = new IfcActionTypeEnum(tape[ptr++]);
		} else { ActionType = null; ptr++; }
		let ActionSource;
		if (tape[ptr]) {
		ActionSource = new IfcActionSourceTypeEnum(tape[ptr++]);
		} else { ActionSource = null; ptr++; }
		let Coefficient;
		if (tape[ptr]) {
		Coefficient = tape[ptr++];
		} else { Coefficient = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		return new IfcStructuralLoadGroup(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, PredefinedType, ActionType, ActionSource, Coefficient, Purpose);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(ENUM);
		args.push(this.ActionType.value)
		args.push(ENUM);
		args.push(this.ActionSource.value)
		if(this.Coefficient){
		args.push(REAL)
		args.push(this.Coefficient)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadLinearForce {
	constructor(expressID: number, type: number, Name: IfcLabel | null, LinearForceX: IfcLinearForceMeasure | null, LinearForceY: IfcLinearForceMeasure | null, LinearForceZ: IfcLinearForceMeasure | null, LinearMomentX: IfcLinearMomentMeasure | null, LinearMomentY: IfcLinearMomentMeasure | null, LinearMomentZ: IfcLinearMomentMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.LinearForceX = LinearForceX;
		this.LinearForceY = LinearForceY;
		this.LinearForceZ = LinearForceZ;
		this.LinearMomentX = LinearMomentX;
		this.LinearMomentY = LinearMomentY;
		this.LinearMomentZ = LinearMomentZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	LinearForceX: IfcLinearForceMeasure | null;
	LinearForceY: IfcLinearForceMeasure | null;
	LinearForceZ: IfcLinearForceMeasure | null;
	LinearMomentX: IfcLinearMomentMeasure | null;
	LinearMomentY: IfcLinearMomentMeasure | null;
	LinearMomentZ: IfcLinearMomentMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadLinearForce
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let LinearForceX;
		if (tape[ptr]) {
		LinearForceX = tape[ptr++];
		} else { LinearForceX = null; ptr++; }
		let LinearForceY;
		if (tape[ptr]) {
		LinearForceY = tape[ptr++];
		} else { LinearForceY = null; ptr++; }
		let LinearForceZ;
		if (tape[ptr]) {
		LinearForceZ = tape[ptr++];
		} else { LinearForceZ = null; ptr++; }
		let LinearMomentX;
		if (tape[ptr]) {
		LinearMomentX = tape[ptr++];
		} else { LinearMomentX = null; ptr++; }
		let LinearMomentY;
		if (tape[ptr]) {
		LinearMomentY = tape[ptr++];
		} else { LinearMomentY = null; ptr++; }
		let LinearMomentZ;
		if (tape[ptr]) {
		LinearMomentZ = tape[ptr++];
		} else { LinearMomentZ = null; ptr++; }
		return new IfcStructuralLoadLinearForce(expressID, type, Name, LinearForceX, LinearForceY, LinearForceZ, LinearMomentX, LinearMomentY, LinearMomentZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.LinearForceX){
		args.push(REAL)
		args.push(this.LinearForceX)
		}
		else{ args.push(EMPTY); }
		if(this.LinearForceY){
		args.push(REAL)
		args.push(this.LinearForceY)
		}
		else{ args.push(EMPTY); }
		if(this.LinearForceZ){
		args.push(REAL)
		args.push(this.LinearForceZ)
		}
		else{ args.push(EMPTY); }
		if(this.LinearMomentX){
		args.push(REAL)
		args.push(this.LinearMomentX)
		}
		else{ args.push(EMPTY); }
		if(this.LinearMomentY){
		args.push(REAL)
		args.push(this.LinearMomentY)
		}
		else{ args.push(EMPTY); }
		if(this.LinearMomentZ){
		args.push(REAL)
		args.push(this.LinearMomentZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadOrResult {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadOrResult
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcStructuralLoadOrResult(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadPlanarForce {
	constructor(expressID: number, type: number, Name: IfcLabel | null, PlanarForceX: IfcPlanarForceMeasure | null, PlanarForceY: IfcPlanarForceMeasure | null, PlanarForceZ: IfcPlanarForceMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.PlanarForceX = PlanarForceX;
		this.PlanarForceY = PlanarForceY;
		this.PlanarForceZ = PlanarForceZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	PlanarForceX: IfcPlanarForceMeasure | null;
	PlanarForceY: IfcPlanarForceMeasure | null;
	PlanarForceZ: IfcPlanarForceMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadPlanarForce
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let PlanarForceX;
		if (tape[ptr]) {
		PlanarForceX = tape[ptr++];
		} else { PlanarForceX = null; ptr++; }
		let PlanarForceY;
		if (tape[ptr]) {
		PlanarForceY = tape[ptr++];
		} else { PlanarForceY = null; ptr++; }
		let PlanarForceZ;
		if (tape[ptr]) {
		PlanarForceZ = tape[ptr++];
		} else { PlanarForceZ = null; ptr++; }
		return new IfcStructuralLoadPlanarForce(expressID, type, Name, PlanarForceX, PlanarForceY, PlanarForceZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.PlanarForceX){
		args.push(REAL)
		args.push(this.PlanarForceX)
		}
		else{ args.push(EMPTY); }
		if(this.PlanarForceY){
		args.push(REAL)
		args.push(this.PlanarForceY)
		}
		else{ args.push(EMPTY); }
		if(this.PlanarForceZ){
		args.push(REAL)
		args.push(this.PlanarForceZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadSingleDisplacement {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DisplacementX: IfcLengthMeasure | null, DisplacementY: IfcLengthMeasure | null, DisplacementZ: IfcLengthMeasure | null, RotationalDisplacementRX: IfcPlaneAngleMeasure | null, RotationalDisplacementRY: IfcPlaneAngleMeasure | null, RotationalDisplacementRZ: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DisplacementX: IfcLengthMeasure | null;
	DisplacementY: IfcLengthMeasure | null;
	DisplacementZ: IfcLengthMeasure | null;
	RotationalDisplacementRX: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRY: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRZ: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacement
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DisplacementX;
		if (tape[ptr]) {
		DisplacementX = tape[ptr++];
		} else { DisplacementX = null; ptr++; }
		let DisplacementY;
		if (tape[ptr]) {
		DisplacementY = tape[ptr++];
		} else { DisplacementY = null; ptr++; }
		let DisplacementZ;
		if (tape[ptr]) {
		DisplacementZ = tape[ptr++];
		} else { DisplacementZ = null; ptr++; }
		let RotationalDisplacementRX;
		if (tape[ptr]) {
		RotationalDisplacementRX = tape[ptr++];
		} else { RotationalDisplacementRX = null; ptr++; }
		let RotationalDisplacementRY;
		if (tape[ptr]) {
		RotationalDisplacementRY = tape[ptr++];
		} else { RotationalDisplacementRY = null; ptr++; }
		let RotationalDisplacementRZ;
		if (tape[ptr]) {
		RotationalDisplacementRZ = tape[ptr++];
		} else { RotationalDisplacementRZ = null; ptr++; }
		return new IfcStructuralLoadSingleDisplacement(expressID, type, Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementX){
		args.push(REAL)
		args.push(this.DisplacementX)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementY){
		args.push(REAL)
		args.push(this.DisplacementY)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementZ){
		args.push(REAL)
		args.push(this.DisplacementZ)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRX){
		args.push(REAL)
		args.push(this.RotationalDisplacementRX)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRY){
		args.push(REAL)
		args.push(this.RotationalDisplacementRY)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRZ){
		args.push(REAL)
		args.push(this.RotationalDisplacementRZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadSingleDisplacementDistortion {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DisplacementX: IfcLengthMeasure | null, DisplacementY: IfcLengthMeasure | null, DisplacementZ: IfcLengthMeasure | null, RotationalDisplacementRX: IfcPlaneAngleMeasure | null, RotationalDisplacementRY: IfcPlaneAngleMeasure | null, RotationalDisplacementRZ: IfcPlaneAngleMeasure | null, Distortion: IfcCurvatureMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DisplacementX = DisplacementX;
		this.DisplacementY = DisplacementY;
		this.DisplacementZ = DisplacementZ;
		this.RotationalDisplacementRX = RotationalDisplacementRX;
		this.RotationalDisplacementRY = RotationalDisplacementRY;
		this.RotationalDisplacementRZ = RotationalDisplacementRZ;
		this.Distortion = Distortion;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DisplacementX: IfcLengthMeasure | null;
	DisplacementY: IfcLengthMeasure | null;
	DisplacementZ: IfcLengthMeasure | null;
	RotationalDisplacementRX: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRY: IfcPlaneAngleMeasure | null;
	RotationalDisplacementRZ: IfcPlaneAngleMeasure | null;
	Distortion: IfcCurvatureMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleDisplacementDistortion
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DisplacementX;
		if (tape[ptr]) {
		DisplacementX = tape[ptr++];
		} else { DisplacementX = null; ptr++; }
		let DisplacementY;
		if (tape[ptr]) {
		DisplacementY = tape[ptr++];
		} else { DisplacementY = null; ptr++; }
		let DisplacementZ;
		if (tape[ptr]) {
		DisplacementZ = tape[ptr++];
		} else { DisplacementZ = null; ptr++; }
		let RotationalDisplacementRX;
		if (tape[ptr]) {
		RotationalDisplacementRX = tape[ptr++];
		} else { RotationalDisplacementRX = null; ptr++; }
		let RotationalDisplacementRY;
		if (tape[ptr]) {
		RotationalDisplacementRY = tape[ptr++];
		} else { RotationalDisplacementRY = null; ptr++; }
		let RotationalDisplacementRZ;
		if (tape[ptr]) {
		RotationalDisplacementRZ = tape[ptr++];
		} else { RotationalDisplacementRZ = null; ptr++; }
		let Distortion;
		if (tape[ptr]) {
		Distortion = tape[ptr++];
		} else { Distortion = null; ptr++; }
		return new IfcStructuralLoadSingleDisplacementDistortion(expressID, type, Name, DisplacementX, DisplacementY, DisplacementZ, RotationalDisplacementRX, RotationalDisplacementRY, RotationalDisplacementRZ, Distortion);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementX){
		args.push(REAL)
		args.push(this.DisplacementX)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementY){
		args.push(REAL)
		args.push(this.DisplacementY)
		}
		else{ args.push(EMPTY); }
		if(this.DisplacementZ){
		args.push(REAL)
		args.push(this.DisplacementZ)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRX){
		args.push(REAL)
		args.push(this.RotationalDisplacementRX)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRY){
		args.push(REAL)
		args.push(this.RotationalDisplacementRY)
		}
		else{ args.push(EMPTY); }
		if(this.RotationalDisplacementRZ){
		args.push(REAL)
		args.push(this.RotationalDisplacementRZ)
		}
		else{ args.push(EMPTY); }
		if(this.Distortion){
		args.push(REAL)
		args.push(this.Distortion)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadSingleForce {
	constructor(expressID: number, type: number, Name: IfcLabel | null, ForceX: IfcForceMeasure | null, ForceY: IfcForceMeasure | null, ForceZ: IfcForceMeasure | null, MomentX: IfcTorqueMeasure | null, MomentY: IfcTorqueMeasure | null, MomentZ: IfcTorqueMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	ForceX: IfcForceMeasure | null;
	ForceY: IfcForceMeasure | null;
	ForceZ: IfcForceMeasure | null;
	MomentX: IfcTorqueMeasure | null;
	MomentY: IfcTorqueMeasure | null;
	MomentZ: IfcTorqueMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForce
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let ForceX;
		if (tape[ptr]) {
		ForceX = tape[ptr++];
		} else { ForceX = null; ptr++; }
		let ForceY;
		if (tape[ptr]) {
		ForceY = tape[ptr++];
		} else { ForceY = null; ptr++; }
		let ForceZ;
		if (tape[ptr]) {
		ForceZ = tape[ptr++];
		} else { ForceZ = null; ptr++; }
		let MomentX;
		if (tape[ptr]) {
		MomentX = tape[ptr++];
		} else { MomentX = null; ptr++; }
		let MomentY;
		if (tape[ptr]) {
		MomentY = tape[ptr++];
		} else { MomentY = null; ptr++; }
		let MomentZ;
		if (tape[ptr]) {
		MomentZ = tape[ptr++];
		} else { MomentZ = null; ptr++; }
		return new IfcStructuralLoadSingleForce(expressID, type, Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.ForceX){
		args.push(REAL)
		args.push(this.ForceX)
		}
		else{ args.push(EMPTY); }
		if(this.ForceY){
		args.push(REAL)
		args.push(this.ForceY)
		}
		else{ args.push(EMPTY); }
		if(this.ForceZ){
		args.push(REAL)
		args.push(this.ForceZ)
		}
		else{ args.push(EMPTY); }
		if(this.MomentX){
		args.push(REAL)
		args.push(this.MomentX)
		}
		else{ args.push(EMPTY); }
		if(this.MomentY){
		args.push(REAL)
		args.push(this.MomentY)
		}
		else{ args.push(EMPTY); }
		if(this.MomentZ){
		args.push(REAL)
		args.push(this.MomentZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadSingleForceWarping {
	constructor(expressID: number, type: number, Name: IfcLabel | null, ForceX: IfcForceMeasure | null, ForceY: IfcForceMeasure | null, ForceZ: IfcForceMeasure | null, MomentX: IfcTorqueMeasure | null, MomentY: IfcTorqueMeasure | null, MomentZ: IfcTorqueMeasure | null, WarpingMoment: IfcWarpingMomentMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.ForceX = ForceX;
		this.ForceY = ForceY;
		this.ForceZ = ForceZ;
		this.MomentX = MomentX;
		this.MomentY = MomentY;
		this.MomentZ = MomentZ;
		this.WarpingMoment = WarpingMoment;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	ForceX: IfcForceMeasure | null;
	ForceY: IfcForceMeasure | null;
	ForceZ: IfcForceMeasure | null;
	MomentX: IfcTorqueMeasure | null;
	MomentY: IfcTorqueMeasure | null;
	MomentZ: IfcTorqueMeasure | null;
	WarpingMoment: IfcWarpingMomentMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadSingleForceWarping
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let ForceX;
		if (tape[ptr]) {
		ForceX = tape[ptr++];
		} else { ForceX = null; ptr++; }
		let ForceY;
		if (tape[ptr]) {
		ForceY = tape[ptr++];
		} else { ForceY = null; ptr++; }
		let ForceZ;
		if (tape[ptr]) {
		ForceZ = tape[ptr++];
		} else { ForceZ = null; ptr++; }
		let MomentX;
		if (tape[ptr]) {
		MomentX = tape[ptr++];
		} else { MomentX = null; ptr++; }
		let MomentY;
		if (tape[ptr]) {
		MomentY = tape[ptr++];
		} else { MomentY = null; ptr++; }
		let MomentZ;
		if (tape[ptr]) {
		MomentZ = tape[ptr++];
		} else { MomentZ = null; ptr++; }
		let WarpingMoment;
		if (tape[ptr]) {
		WarpingMoment = tape[ptr++];
		} else { WarpingMoment = null; ptr++; }
		return new IfcStructuralLoadSingleForceWarping(expressID, type, Name, ForceX, ForceY, ForceZ, MomentX, MomentY, MomentZ, WarpingMoment);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.ForceX){
		args.push(REAL)
		args.push(this.ForceX)
		}
		else{ args.push(EMPTY); }
		if(this.ForceY){
		args.push(REAL)
		args.push(this.ForceY)
		}
		else{ args.push(EMPTY); }
		if(this.ForceZ){
		args.push(REAL)
		args.push(this.ForceZ)
		}
		else{ args.push(EMPTY); }
		if(this.MomentX){
		args.push(REAL)
		args.push(this.MomentX)
		}
		else{ args.push(EMPTY); }
		if(this.MomentY){
		args.push(REAL)
		args.push(this.MomentY)
		}
		else{ args.push(EMPTY); }
		if(this.MomentZ){
		args.push(REAL)
		args.push(this.MomentZ)
		}
		else{ args.push(EMPTY); }
		if(this.WarpingMoment){
		args.push(REAL)
		args.push(this.WarpingMoment)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadStatic {
	constructor(expressID: number, type: number, Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadStatic
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcStructuralLoadStatic(expressID, type, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralLoadTemperature {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DeltaTConstant: IfcThermodynamicTemperatureMeasure | null, DeltaTY: IfcThermodynamicTemperatureMeasure | null, DeltaTZ: IfcThermodynamicTemperatureMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DeltaTConstant = DeltaTConstant;
		this.DeltaTY = DeltaTY;
		this.DeltaTZ = DeltaTZ;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DeltaTConstant: IfcThermodynamicTemperatureMeasure | null;
	DeltaTY: IfcThermodynamicTemperatureMeasure | null;
	DeltaTZ: IfcThermodynamicTemperatureMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralLoadTemperature
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DeltaTConstant;
		if (tape[ptr]) {
		DeltaTConstant = tape[ptr++];
		} else { DeltaTConstant = null; ptr++; }
		let DeltaTY;
		if (tape[ptr]) {
		DeltaTY = tape[ptr++];
		} else { DeltaTY = null; ptr++; }
		let DeltaTZ;
		if (tape[ptr]) {
		DeltaTZ = tape[ptr++];
		} else { DeltaTZ = null; ptr++; }
		return new IfcStructuralLoadTemperature(expressID, type, Name, DeltaTConstant, DeltaTY, DeltaTZ);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DeltaTConstant){
		args.push(REAL)
		args.push(this.DeltaTConstant)
		}
		else{ args.push(EMPTY); }
		if(this.DeltaTY){
		args.push(REAL)
		args.push(this.DeltaTY)
		}
		else{ args.push(EMPTY); }
		if(this.DeltaTZ){
		args.push(REAL)
		args.push(this.DeltaTZ)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralMember {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralMember
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		return new IfcStructuralMember(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralPlanarAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPlanarAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		let ProjectedOrTrue;
		if (tape[ptr]) {
		ProjectedOrTrue = new IfcProjectedOrTrueLengthEnum(tape[ptr++]);
		} else { ProjectedOrTrue = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralSurfaceActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralPlanarAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		if(this.ProjectedOrTrue){
		args.push(ENUM);
		args.push(this.ProjectedOrTrue.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralPointAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		return new IfcStructuralPointAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralPointConnection {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null, ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
		this.ConditionCoordinateSystem = ConditionCoordinateSystem;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	ConditionCoordinateSystem: Handle<IfcAxis2Placement3D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointConnection
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		let ConditionCoordinateSystem;
		if (tape[ptr]) {
		ConditionCoordinateSystem = tape[ptr++];
		} else { ConditionCoordinateSystem = null; ptr++; }
		return new IfcStructuralPointConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition, ConditionCoordinateSystem);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		if(this.ConditionCoordinateSystem){
		args.push(REF)
		args.push(this.ConditionCoordinateSystem)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralPointReaction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralPointReaction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		return new IfcStructuralPointReaction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		return args;
	}
};
export class IfcStructuralReaction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralReaction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		return new IfcStructuralReaction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		return args;
	}
};
export class IfcStructuralResultGroup {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, TheoryType: IfcAnalysisTheoryTypeEnum , ResultForLoadGroup: Handle<IfcStructuralLoadGroup> | null, IsLinear: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.TheoryType = TheoryType;
		this.ResultForLoadGroup = ResultForLoadGroup;
		this.IsLinear = IsLinear;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	TheoryType: IfcAnalysisTheoryTypeEnum ;
	ResultForLoadGroup: Handle<IfcStructuralLoadGroup> | null;
	IsLinear: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralResultGroup
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let TheoryType;
		if (tape[ptr]) {
		TheoryType = new IfcAnalysisTheoryTypeEnum(tape[ptr++]);
		} else { TheoryType = null; ptr++; }
		let ResultForLoadGroup;
		if (tape[ptr]) {
		ResultForLoadGroup = tape[ptr++];
		} else { ResultForLoadGroup = null; ptr++; }
		let IsLinear;
		if (tape[ptr]) {
		IsLinear = tape[ptr++];
		} else { IsLinear = null; ptr++; }
		return new IfcStructuralResultGroup(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, TheoryType, ResultForLoadGroup, IsLinear);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.TheoryType.value)
		if(this.ResultForLoadGroup){
		args.push(REF)
		args.push(this.ResultForLoadGroup)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralSurfaceAction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , DestabilizingLoad: IfcBoolean | null, ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null, PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.DestabilizingLoad = DestabilizingLoad;
		this.ProjectedOrTrue = ProjectedOrTrue;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	DestabilizingLoad: IfcBoolean | null;
	ProjectedOrTrue: IfcProjectedOrTrueLengthEnum | null;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceAction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let DestabilizingLoad;
		if (tape[ptr]) {
		DestabilizingLoad = tape[ptr++];
		} else { DestabilizingLoad = null; ptr++; }
		let ProjectedOrTrue;
		if (tape[ptr]) {
		ProjectedOrTrue = new IfcProjectedOrTrueLengthEnum(tape[ptr++]);
		} else { ProjectedOrTrue = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralSurfaceActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralSurfaceAction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, DestabilizingLoad, ProjectedOrTrue, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		if(this.DestabilizingLoad){
		}
		else{ args.push(EMPTY); }
		if(this.ProjectedOrTrue){
		args.push(ENUM);
		args.push(this.ProjectedOrTrue.value)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStructuralSurfaceConnection {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedCondition: Handle<IfcBoundaryCondition> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedCondition = AppliedCondition;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedCondition: Handle<IfcBoundaryCondition> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceConnection
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedCondition;
		if (tape[ptr]) {
		AppliedCondition = tape[ptr++];
		} else { AppliedCondition = null; ptr++; }
		return new IfcStructuralSurfaceConnection(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedCondition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.AppliedCondition){
		args.push(REF)
		args.push(this.AppliedCondition)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralSurfaceMember {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralSurfaceMemberTypeEnum , Thickness: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Thickness = Thickness;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralSurfaceMemberTypeEnum ;
	Thickness: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMember
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralSurfaceMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Thickness;
		if (tape[ptr]) {
		Thickness = tape[ptr++];
		} else { Thickness = null; ptr++; }
		return new IfcStructuralSurfaceMember(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.Thickness){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralSurfaceMemberVarying {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, PredefinedType: IfcStructuralSurfaceMemberTypeEnum , Thickness: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.PredefinedType = PredefinedType;
		this.Thickness = Thickness;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	PredefinedType: IfcStructuralSurfaceMemberTypeEnum ;
	Thickness: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceMemberVarying
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralSurfaceMemberTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let Thickness;
		if (tape[ptr]) {
		Thickness = tape[ptr++];
		} else { Thickness = null; ptr++; }
		return new IfcStructuralSurfaceMemberVarying(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, PredefinedType, Thickness);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.Thickness){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStructuralSurfaceReaction {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, AppliedLoad: Handle<IfcStructuralLoad> , GlobalOrLocal: IfcGlobalOrLocalEnum , PredefinedType: IfcStructuralSurfaceActivityTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.AppliedLoad = AppliedLoad;
		this.GlobalOrLocal = GlobalOrLocal;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	AppliedLoad: Handle<IfcStructuralLoad> ;
	GlobalOrLocal: IfcGlobalOrLocalEnum ;
	PredefinedType: IfcStructuralSurfaceActivityTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStructuralSurfaceReaction
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let AppliedLoad;
		if (tape[ptr]) {
		AppliedLoad = tape[ptr++];
		} else { AppliedLoad = null; ptr++; }
		let GlobalOrLocal;
		if (tape[ptr]) {
		GlobalOrLocal = new IfcGlobalOrLocalEnum(tape[ptr++]);
		} else { GlobalOrLocal = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcStructuralSurfaceActivityTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcStructuralSurfaceReaction(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, AppliedLoad, GlobalOrLocal, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AppliedLoad)
		args.push(ENUM);
		args.push(this.GlobalOrLocal.value)
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcStyleModel {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStyleModel
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcStyleModel(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcStyledItem {
	constructor(expressID: number, type: number, Item: Handle<IfcRepresentationItem> | null, Styles: IfcStyleAssignmentSelect[] , Name: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Item = Item;
		this.Styles = Styles;
		this.Name = Name;
	}
	expressID: number;
	type: number;
	Item: Handle<IfcRepresentationItem> | null;
	Styles: IfcStyleAssignmentSelect[] ;
	Name: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStyledItem
	{
		let ptr = 0;
		let Item;
		if (tape[ptr]) {
		Item = tape[ptr++];
		} else { Item = null; ptr++; }
		let Styles;
		if (tape[ptr]) {
		Styles = [];
		let Styles_index = 0;
		while (Styles_index < tape[ptr].length) {
			Styles.push(tape[ptr][Styles_index++]);
		}
	ptr++;
		} else { Styles = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		return new IfcStyledItem(expressID, type, Item, Styles, Name);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Item){
		args.push(REF)
		args.push(this.Item)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcStyledRepresentation {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcStyledRepresentation
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcStyledRepresentation(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSubContractResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Usage: Handle<IfcResourceTime> | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcSubContractResourceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Usage = Usage;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Usage: Handle<IfcResourceTime> | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcSubContractResourceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSubContractResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Usage;
		if (tape[ptr]) {
		Usage = tape[ptr++];
		} else { Usage = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSubContractResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSubContractResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Usage, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Usage){
		args.push(REF)
		args.push(this.Usage)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSubContractResourceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null, BaseCosts: Handle<IfcAppliedValue>[] | null, BaseQuantity: Handle<IfcPhysicalQuantity> | null, PredefinedType: IfcSubContractResourceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
		this.BaseCosts = BaseCosts;
		this.BaseQuantity = BaseQuantity;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	BaseCosts: Handle<IfcAppliedValue>[] | null;
	BaseQuantity: Handle<IfcPhysicalQuantity> | null;
	PredefinedType: IfcSubContractResourceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSubContractResourceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		let BaseCosts;
		if (tape[ptr]) {
		BaseCosts = [];
		let BaseCosts_index = 0;
		while (BaseCosts_index < tape[ptr].length) {
			BaseCosts.push(tape[ptr][BaseCosts_index++]);
		}
	ptr++;
		} else { BaseCosts = null; ptr++; }
		let BaseQuantity;
		if (tape[ptr]) {
		BaseQuantity = tape[ptr++];
		} else { BaseQuantity = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSubContractResourceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSubContractResourceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType, BaseCosts, BaseQuantity, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		if(this.BaseCosts){
		args.push(SET_BEGIN)
		this.BaseCosts.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.BaseQuantity){
		args.push(REF)
		args.push(this.BaseQuantity)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSubedge {
	constructor(expressID: number, type: number, EdgeStart: Handle<IfcVertex> , EdgeEnd: Handle<IfcVertex> , ParentEdge: Handle<IfcEdge> )
	{
		this.expressID = expressID;
		this.type = type;
		this.EdgeStart = EdgeStart;
		this.EdgeEnd = EdgeEnd;
		this.ParentEdge = ParentEdge;
	}
	expressID: number;
	type: number;
	EdgeStart: Handle<IfcVertex> ;
	EdgeEnd: Handle<IfcVertex> ;
	ParentEdge: Handle<IfcEdge> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSubedge
	{
		let ptr = 0;
		let EdgeStart;
		if (tape[ptr]) {
		EdgeStart = tape[ptr++];
		} else { EdgeStart = null; ptr++; }
		let EdgeEnd;
		if (tape[ptr]) {
		EdgeEnd = tape[ptr++];
		} else { EdgeEnd = null; ptr++; }
		let ParentEdge;
		if (tape[ptr]) {
		ParentEdge = tape[ptr++];
		} else { ParentEdge = null; ptr++; }
		return new IfcSubedge(expressID, type, EdgeStart, EdgeEnd, ParentEdge);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.EdgeStart)
		args.push(REF)
		args.push(this.EdgeEnd)
		args.push(REF)
		args.push(this.ParentEdge)
		return args;
	}
};
export class IfcSurface {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurface
	{
		let ptr = 0;
		return new IfcSurface(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcSurfaceCurve {
	constructor(expressID: number, type: number, Curve3D: Handle<IfcCurve> , AssociatedGeometry: Handle<IfcPcurve>[] , MasterRepresentation: IfcPreferredSurfaceCurveRepresentation )
	{
		this.expressID = expressID;
		this.type = type;
		this.Curve3D = Curve3D;
		this.AssociatedGeometry = AssociatedGeometry;
		this.MasterRepresentation = MasterRepresentation;
	}
	expressID: number;
	type: number;
	Curve3D: Handle<IfcCurve> ;
	AssociatedGeometry: Handle<IfcPcurve>[] ;
	MasterRepresentation: IfcPreferredSurfaceCurveRepresentation ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceCurve
	{
		let ptr = 0;
		let Curve3D;
		if (tape[ptr]) {
		Curve3D = tape[ptr++];
		} else { Curve3D = null; ptr++; }
		let AssociatedGeometry;
		if (tape[ptr]) {
		AssociatedGeometry = [];
		let AssociatedGeometry_index = 0;
		while (AssociatedGeometry_index < tape[ptr].length) {
			AssociatedGeometry.push(tape[ptr][AssociatedGeometry_index++]);
		}
	ptr++;
		} else { AssociatedGeometry = null; ptr++; }
		let MasterRepresentation;
		if (tape[ptr]) {
		MasterRepresentation = new IfcPreferredSurfaceCurveRepresentation(tape[ptr++]);
		} else { MasterRepresentation = null; ptr++; }
		return new IfcSurfaceCurve(expressID, type, Curve3D, AssociatedGeometry, MasterRepresentation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Curve3D)
		args.push(SET_BEGIN)
		this.AssociatedGeometry.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(ENUM);
		args.push(this.MasterRepresentation.value)
		return args;
	}
};
export class IfcSurfaceCurveSweptAreaSolid {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, Directrix: Handle<IfcCurve> , StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, ReferenceSurface: Handle<IfcSurface> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
		this.Directrix = Directrix;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.ReferenceSurface = ReferenceSurface;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	Directrix: Handle<IfcCurve> ;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	ReferenceSurface: Handle<IfcSurface> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceCurveSweptAreaSolid
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let StartParam;
		if (tape[ptr]) {
		StartParam = tape[ptr++];
		} else { StartParam = null; ptr++; }
		let EndParam;
		if (tape[ptr]) {
		EndParam = tape[ptr++];
		} else { EndParam = null; ptr++; }
		let ReferenceSurface;
		if (tape[ptr]) {
		ReferenceSurface = tape[ptr++];
		} else { ReferenceSurface = null; ptr++; }
		return new IfcSurfaceCurveSweptAreaSolid(expressID, type, SweptArea, Position, Directrix, StartParam, EndParam, ReferenceSurface);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Directrix)
		if(this.StartParam){
		args.push(REAL)
		args.push(this.StartParam)
		}
		else{ args.push(EMPTY); }
		if(this.EndParam){
		args.push(REAL)
		args.push(this.EndParam)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ReferenceSurface)
		return args;
	}
};
export class IfcSurfaceFeature {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSurfaceFeatureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSurfaceFeatureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceFeature
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSurfaceFeatureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSurfaceFeature(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSurfaceOfLinearExtrusion {
	constructor(expressID: number, type: number, SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, ExtrudedDirection: Handle<IfcDirection> , Depth: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptCurve = SweptCurve;
		this.Position = Position;
		this.ExtrudedDirection = ExtrudedDirection;
		this.Depth = Depth;
	}
	expressID: number;
	type: number;
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	ExtrudedDirection: Handle<IfcDirection> ;
	Depth: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfLinearExtrusion
	{
		let ptr = 0;
		let SweptCurve;
		if (tape[ptr]) {
		SweptCurve = tape[ptr++];
		} else { SweptCurve = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let ExtrudedDirection;
		if (tape[ptr]) {
		ExtrudedDirection = tape[ptr++];
		} else { ExtrudedDirection = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		return new IfcSurfaceOfLinearExtrusion(expressID, type, SweptCurve, Position, ExtrudedDirection, Depth);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptCurve)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.ExtrudedDirection)
		args.push(REAL)
		args.push(this.Depth)
		return args;
	}
};
export class IfcSurfaceOfRevolution {
	constructor(expressID: number, type: number, SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null, AxisPosition: Handle<IfcAxis1Placement> )
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptCurve = SweptCurve;
		this.Position = Position;
		this.AxisPosition = AxisPosition;
	}
	expressID: number;
	type: number;
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	AxisPosition: Handle<IfcAxis1Placement> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceOfRevolution
	{
		let ptr = 0;
		let SweptCurve;
		if (tape[ptr]) {
		SweptCurve = tape[ptr++];
		} else { SweptCurve = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let AxisPosition;
		if (tape[ptr]) {
		AxisPosition = tape[ptr++];
		} else { AxisPosition = null; ptr++; }
		return new IfcSurfaceOfRevolution(expressID, type, SweptCurve, Position, AxisPosition);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptCurve)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.AxisPosition)
		return args;
	}
};
export class IfcSurfaceReinforcementArea {
	constructor(expressID: number, type: number, Name: IfcLabel | null, SurfaceReinforcement1: IfcLengthMeasure[] | null, SurfaceReinforcement2: IfcLengthMeasure[] | null, ShearReinforcement: IfcRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.SurfaceReinforcement1 = SurfaceReinforcement1;
		this.SurfaceReinforcement2 = SurfaceReinforcement2;
		this.ShearReinforcement = ShearReinforcement;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	SurfaceReinforcement1: IfcLengthMeasure[] | null;
	SurfaceReinforcement2: IfcLengthMeasure[] | null;
	ShearReinforcement: IfcRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceReinforcementArea
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let SurfaceReinforcement1;
		if (tape[ptr]) {
		SurfaceReinforcement1 = [];
		let SurfaceReinforcement1_index = 0;
		while (SurfaceReinforcement1_index < tape[ptr].length) {
			SurfaceReinforcement1.push(tape[ptr][SurfaceReinforcement1_index++]);
		}
	ptr++;
		} else { SurfaceReinforcement1 = null; ptr++; }
		let SurfaceReinforcement2;
		if (tape[ptr]) {
		SurfaceReinforcement2 = [];
		let SurfaceReinforcement2_index = 0;
		while (SurfaceReinforcement2_index < tape[ptr].length) {
			SurfaceReinforcement2.push(tape[ptr][SurfaceReinforcement2_index++]);
		}
	ptr++;
		} else { SurfaceReinforcement2 = null; ptr++; }
		let ShearReinforcement;
		if (tape[ptr]) {
		ShearReinforcement = tape[ptr++];
		} else { ShearReinforcement = null; ptr++; }
		return new IfcSurfaceReinforcementArea(expressID, type, Name, SurfaceReinforcement1, SurfaceReinforcement2, ShearReinforcement);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.SurfaceReinforcement1){
		args.push(REAL)
		args.push(...this.SurfaceReinforcement1)
		}
		else{ args.push(EMPTY); }
		if(this.SurfaceReinforcement2){
		args.push(REAL)
		args.push(...this.SurfaceReinforcement2)
		}
		else{ args.push(EMPTY); }
		if(this.ShearReinforcement){
		args.push(REAL)
		args.push(this.ShearReinforcement)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSurfaceStyle {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Side: IfcSurfaceSide , Styles: IfcSurfaceStyleElementSelect[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Side = Side;
		this.Styles = Styles;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Side: IfcSurfaceSide ;
	Styles: IfcSurfaceStyleElementSelect[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Side;
		if (tape[ptr]) {
		Side = new IfcSurfaceSide(tape[ptr++]);
		} else { Side = null; ptr++; }
		let Styles;
		if (tape[ptr]) {
		Styles = [];
		let Styles_index = 0;
		while (Styles_index < tape[ptr].length) {
			Styles.push(tape[ptr][Styles_index++]);
		}
	ptr++;
		} else { Styles = null; ptr++; }
		return new IfcSurfaceStyle(expressID, type, Name, Side, Styles);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.Side.value)
		return args;
	}
};
export class IfcSurfaceStyleLighting {
	constructor(expressID: number, type: number, DiffuseTransmissionColour: Handle<IfcColourRgb> , DiffuseReflectionColour: Handle<IfcColourRgb> , TransmissionColour: Handle<IfcColourRgb> , ReflectanceColour: Handle<IfcColourRgb> )
	{
		this.expressID = expressID;
		this.type = type;
		this.DiffuseTransmissionColour = DiffuseTransmissionColour;
		this.DiffuseReflectionColour = DiffuseReflectionColour;
		this.TransmissionColour = TransmissionColour;
		this.ReflectanceColour = ReflectanceColour;
	}
	expressID: number;
	type: number;
	DiffuseTransmissionColour: Handle<IfcColourRgb> ;
	DiffuseReflectionColour: Handle<IfcColourRgb> ;
	TransmissionColour: Handle<IfcColourRgb> ;
	ReflectanceColour: Handle<IfcColourRgb> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleLighting
	{
		let ptr = 0;
		let DiffuseTransmissionColour;
		if (tape[ptr]) {
		DiffuseTransmissionColour = tape[ptr++];
		} else { DiffuseTransmissionColour = null; ptr++; }
		let DiffuseReflectionColour;
		if (tape[ptr]) {
		DiffuseReflectionColour = tape[ptr++];
		} else { DiffuseReflectionColour = null; ptr++; }
		let TransmissionColour;
		if (tape[ptr]) {
		TransmissionColour = tape[ptr++];
		} else { TransmissionColour = null; ptr++; }
		let ReflectanceColour;
		if (tape[ptr]) {
		ReflectanceColour = tape[ptr++];
		} else { ReflectanceColour = null; ptr++; }
		return new IfcSurfaceStyleLighting(expressID, type, DiffuseTransmissionColour, DiffuseReflectionColour, TransmissionColour, ReflectanceColour);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.DiffuseTransmissionColour)
		args.push(REF)
		args.push(this.DiffuseReflectionColour)
		args.push(REF)
		args.push(this.TransmissionColour)
		args.push(REF)
		args.push(this.ReflectanceColour)
		return args;
	}
};
export class IfcSurfaceStyleRefraction {
	constructor(expressID: number, type: number, RefractionIndex: IfcReal | null, DispersionFactor: IfcReal | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.RefractionIndex = RefractionIndex;
		this.DispersionFactor = DispersionFactor;
	}
	expressID: number;
	type: number;
	RefractionIndex: IfcReal | null;
	DispersionFactor: IfcReal | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRefraction
	{
		let ptr = 0;
		let RefractionIndex;
		if (tape[ptr]) {
		RefractionIndex = tape[ptr++];
		} else { RefractionIndex = null; ptr++; }
		let DispersionFactor;
		if (tape[ptr]) {
		DispersionFactor = tape[ptr++];
		} else { DispersionFactor = null; ptr++; }
		return new IfcSurfaceStyleRefraction(expressID, type, RefractionIndex, DispersionFactor);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.RefractionIndex){
		args.push(REAL)
		args.push(this.RefractionIndex)
		}
		else{ args.push(EMPTY); }
		if(this.DispersionFactor){
		args.push(REAL)
		args.push(this.DispersionFactor)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSurfaceStyleRendering {
	constructor(expressID: number, type: number, SurfaceColour: Handle<IfcColourRgb> , Transparency: IfcNormalisedRatioMeasure | null, DiffuseColour: IfcColourOrFactor | null, TransmissionColour: IfcColourOrFactor | null, DiffuseTransmissionColour: IfcColourOrFactor | null, ReflectionColour: IfcColourOrFactor | null, SpecularColour: IfcColourOrFactor | null, SpecularHighlight: IfcSpecularHighlightSelect | null, ReflectanceMethod: IfcReflectanceMethodEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.SurfaceColour = SurfaceColour;
		this.Transparency = Transparency;
		this.DiffuseColour = DiffuseColour;
		this.TransmissionColour = TransmissionColour;
		this.DiffuseTransmissionColour = DiffuseTransmissionColour;
		this.ReflectionColour = ReflectionColour;
		this.SpecularColour = SpecularColour;
		this.SpecularHighlight = SpecularHighlight;
		this.ReflectanceMethod = ReflectanceMethod;
	}
	expressID: number;
	type: number;
	SurfaceColour: Handle<IfcColourRgb> ;
	Transparency: IfcNormalisedRatioMeasure | null;
	DiffuseColour: IfcColourOrFactor | null;
	TransmissionColour: IfcColourOrFactor | null;
	DiffuseTransmissionColour: IfcColourOrFactor | null;
	ReflectionColour: IfcColourOrFactor | null;
	SpecularColour: IfcColourOrFactor | null;
	SpecularHighlight: IfcSpecularHighlightSelect | null;
	ReflectanceMethod: IfcReflectanceMethodEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleRendering
	{
		let ptr = 0;
		let SurfaceColour;
		if (tape[ptr]) {
		SurfaceColour = tape[ptr++];
		} else { SurfaceColour = null; ptr++; }
		let Transparency;
		if (tape[ptr]) {
		Transparency = tape[ptr++];
		} else { Transparency = null; ptr++; }
		let DiffuseColour;
		if (tape[ptr]) {
		DiffuseColour = tape[ptr++];
		} else { DiffuseColour = null; ptr++; }
		let TransmissionColour;
		if (tape[ptr]) {
		TransmissionColour = tape[ptr++];
		} else { TransmissionColour = null; ptr++; }
		let DiffuseTransmissionColour;
		if (tape[ptr]) {
		DiffuseTransmissionColour = tape[ptr++];
		} else { DiffuseTransmissionColour = null; ptr++; }
		let ReflectionColour;
		if (tape[ptr]) {
		ReflectionColour = tape[ptr++];
		} else { ReflectionColour = null; ptr++; }
		let SpecularColour;
		if (tape[ptr]) {
		SpecularColour = tape[ptr++];
		} else { SpecularColour = null; ptr++; }
		let SpecularHighlight;
		if (tape[ptr]) {
		SpecularHighlight = tape[ptr++];
		} else { SpecularHighlight = null; ptr++; }
		let ReflectanceMethod;
		if (tape[ptr]) {
		ReflectanceMethod = new IfcReflectanceMethodEnum(tape[ptr++]);
		} else { ReflectanceMethod = null; ptr++; }
		return new IfcSurfaceStyleRendering(expressID, type, SurfaceColour, Transparency, DiffuseColour, TransmissionColour, DiffuseTransmissionColour, ReflectionColour, SpecularColour, SpecularHighlight, ReflectanceMethod);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SurfaceColour)
		if(this.Transparency){
		}
		else{ args.push(EMPTY); }
		if(this.DiffuseColour){
		}
		else{ args.push(EMPTY); }
		if(this.TransmissionColour){
		}
		else{ args.push(EMPTY); }
		if(this.DiffuseTransmissionColour){
		}
		else{ args.push(EMPTY); }
		if(this.ReflectionColour){
		}
		else{ args.push(EMPTY); }
		if(this.SpecularColour){
		}
		else{ args.push(EMPTY); }
		if(this.SpecularHighlight){
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ReflectanceMethod.value)
		return args;
	}
};
export class IfcSurfaceStyleShading {
	constructor(expressID: number, type: number, SurfaceColour: Handle<IfcColourRgb> , Transparency: IfcNormalisedRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SurfaceColour = SurfaceColour;
		this.Transparency = Transparency;
	}
	expressID: number;
	type: number;
	SurfaceColour: Handle<IfcColourRgb> ;
	Transparency: IfcNormalisedRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleShading
	{
		let ptr = 0;
		let SurfaceColour;
		if (tape[ptr]) {
		SurfaceColour = tape[ptr++];
		} else { SurfaceColour = null; ptr++; }
		let Transparency;
		if (tape[ptr]) {
		Transparency = tape[ptr++];
		} else { Transparency = null; ptr++; }
		return new IfcSurfaceStyleShading(expressID, type, SurfaceColour, Transparency);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SurfaceColour)
		if(this.Transparency){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSurfaceStyleWithTextures {
	constructor(expressID: number, type: number, Textures: Handle<IfcSurfaceTexture>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Textures = Textures;
	}
	expressID: number;
	type: number;
	Textures: Handle<IfcSurfaceTexture>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceStyleWithTextures
	{
		let ptr = 0;
		let Textures;
		if (tape[ptr]) {
		Textures = [];
		let Textures_index = 0;
		while (Textures_index < tape[ptr].length) {
			Textures.push(tape[ptr][Textures_index++]);
		}
	ptr++;
		} else { Textures = null; ptr++; }
		return new IfcSurfaceStyleWithTextures(expressID, type, Textures);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Textures.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcSurfaceTexture {
	constructor(expressID: number, type: number, RepeatS: IfcBoolean , RepeatT: IfcBoolean , Mode: IfcIdentifier | null, TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null, Parameter: IfcIdentifier[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.RepeatS = RepeatS;
		this.RepeatT = RepeatT;
		this.Mode = Mode;
		this.TextureTransform = TextureTransform;
		this.Parameter = Parameter;
	}
	expressID: number;
	type: number;
	RepeatS: IfcBoolean ;
	RepeatT: IfcBoolean ;
	Mode: IfcIdentifier | null;
	TextureTransform: Handle<IfcCartesianTransformationOperator2D> | null;
	Parameter: IfcIdentifier[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSurfaceTexture
	{
		let ptr = 0;
		let RepeatS;
		if (tape[ptr]) {
		RepeatS = tape[ptr++];
		} else { RepeatS = null; ptr++; }
		let RepeatT;
		if (tape[ptr]) {
		RepeatT = tape[ptr++];
		} else { RepeatT = null; ptr++; }
		let Mode;
		if (tape[ptr]) {
		Mode = tape[ptr++];
		} else { Mode = null; ptr++; }
		let TextureTransform;
		if (tape[ptr]) {
		TextureTransform = tape[ptr++];
		} else { TextureTransform = null; ptr++; }
		let Parameter;
		if (tape[ptr]) {
		Parameter = [];
		let Parameter_index = 0;
		while (Parameter_index < tape[ptr].length) {
			Parameter.push(tape[ptr][Parameter_index++]);
		}
	ptr++;
		} else { Parameter = null; ptr++; }
		return new IfcSurfaceTexture(expressID, type, RepeatS, RepeatT, Mode, TextureTransform, Parameter);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Mode){
		args.push(STRING)
		args.push(this.Mode)
		}
		else{ args.push(EMPTY); }
		if(this.TextureTransform){
		args.push(REF)
		args.push(this.TextureTransform)
		}
		else{ args.push(EMPTY); }
		if(this.Parameter){
		args.push(STRING)
		args.push(...this.Parameter)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSweptAreaSolid {
	constructor(expressID: number, type: number, SweptArea: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptArea = SweptArea;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	SweptArea: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSweptAreaSolid
	{
		let ptr = 0;
		let SweptArea;
		if (tape[ptr]) {
		SweptArea = tape[ptr++];
		} else { SweptArea = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcSweptAreaSolid(expressID, type, SweptArea, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptArea)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSweptDiskSolid {
	constructor(expressID: number, type: number, Directrix: Handle<IfcCurve> , Radius: IfcPositiveLengthMeasure , InnerRadius: IfcPositiveLengthMeasure | null, StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Directrix = Directrix;
		this.Radius = Radius;
		this.InnerRadius = InnerRadius;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
	}
	expressID: number;
	type: number;
	Directrix: Handle<IfcCurve> ;
	Radius: IfcPositiveLengthMeasure ;
	InnerRadius: IfcPositiveLengthMeasure | null;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSweptDiskSolid
	{
		let ptr = 0;
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let InnerRadius;
		if (tape[ptr]) {
		InnerRadius = tape[ptr++];
		} else { InnerRadius = null; ptr++; }
		let StartParam;
		if (tape[ptr]) {
		StartParam = tape[ptr++];
		} else { StartParam = null; ptr++; }
		let EndParam;
		if (tape[ptr]) {
		EndParam = tape[ptr++];
		} else { EndParam = null; ptr++; }
		return new IfcSweptDiskSolid(expressID, type, Directrix, Radius, InnerRadius, StartParam, EndParam);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Directrix)
		if(this.InnerRadius){
		}
		else{ args.push(EMPTY); }
		if(this.StartParam){
		args.push(REAL)
		args.push(this.StartParam)
		}
		else{ args.push(EMPTY); }
		if(this.EndParam){
		args.push(REAL)
		args.push(this.EndParam)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSweptDiskSolidPolygonal {
	constructor(expressID: number, type: number, Directrix: Handle<IfcCurve> , Radius: IfcPositiveLengthMeasure , InnerRadius: IfcPositiveLengthMeasure | null, StartParam: IfcParameterValue | null, EndParam: IfcParameterValue | null, FilletRadius: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Directrix = Directrix;
		this.Radius = Radius;
		this.InnerRadius = InnerRadius;
		this.StartParam = StartParam;
		this.EndParam = EndParam;
		this.FilletRadius = FilletRadius;
	}
	expressID: number;
	type: number;
	Directrix: Handle<IfcCurve> ;
	Radius: IfcPositiveLengthMeasure ;
	InnerRadius: IfcPositiveLengthMeasure | null;
	StartParam: IfcParameterValue | null;
	EndParam: IfcParameterValue | null;
	FilletRadius: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSweptDiskSolidPolygonal
	{
		let ptr = 0;
		let Directrix;
		if (tape[ptr]) {
		Directrix = tape[ptr++];
		} else { Directrix = null; ptr++; }
		let Radius;
		if (tape[ptr]) {
		Radius = tape[ptr++];
		} else { Radius = null; ptr++; }
		let InnerRadius;
		if (tape[ptr]) {
		InnerRadius = tape[ptr++];
		} else { InnerRadius = null; ptr++; }
		let StartParam;
		if (tape[ptr]) {
		StartParam = tape[ptr++];
		} else { StartParam = null; ptr++; }
		let EndParam;
		if (tape[ptr]) {
		EndParam = tape[ptr++];
		} else { EndParam = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		return new IfcSweptDiskSolidPolygonal(expressID, type, Directrix, Radius, InnerRadius, StartParam, EndParam, FilletRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Directrix)
		if(this.InnerRadius){
		}
		else{ args.push(EMPTY); }
		if(this.StartParam){
		args.push(REAL)
		args.push(this.StartParam)
		}
		else{ args.push(EMPTY); }
		if(this.EndParam){
		args.push(REAL)
		args.push(this.EndParam)
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSweptSurface {
	constructor(expressID: number, type: number, SweptCurve: Handle<IfcProfileDef> , Position: Handle<IfcAxis2Placement3D> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.SweptCurve = SweptCurve;
		this.Position = Position;
	}
	expressID: number;
	type: number;
	SweptCurve: Handle<IfcProfileDef> ;
	Position: Handle<IfcAxis2Placement3D> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSweptSurface
	{
		let ptr = 0;
		let SweptCurve;
		if (tape[ptr]) {
		SweptCurve = tape[ptr++];
		} else { SweptCurve = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		return new IfcSweptSurface(expressID, type, SweptCurve, Position);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.SweptCurve)
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSwitchingDevice {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSwitchingDeviceTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSwitchingDeviceTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSwitchingDevice
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSwitchingDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSwitchingDevice(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSwitchingDeviceType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSwitchingDeviceTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSwitchingDeviceTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSwitchingDeviceType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSwitchingDeviceTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSwitchingDeviceType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcSystem {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSystem
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		return new IfcSystem(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSystemFurnitureElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcSystemFurnitureElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcSystemFurnitureElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSystemFurnitureElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSystemFurnitureElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSystemFurnitureElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcSystemFurnitureElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcSystemFurnitureElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcSystemFurnitureElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcSystemFurnitureElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcSystemFurnitureElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcSystemFurnitureElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null, WebEdgeRadius: IfcNonNegativeLengthMeasure | null, WebSlope: IfcPlaneAngleMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.FlangeEdgeRadius = FlangeEdgeRadius;
		this.WebEdgeRadius = WebEdgeRadius;
		this.WebSlope = WebSlope;
		this.FlangeSlope = FlangeSlope;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	FlangeEdgeRadius: IfcNonNegativeLengthMeasure | null;
	WebEdgeRadius: IfcNonNegativeLengthMeasure | null;
	WebSlope: IfcPlaneAngleMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let FlangeWidth;
		if (tape[ptr]) {
		FlangeWidth = tape[ptr++];
		} else { FlangeWidth = null; ptr++; }
		let WebThickness;
		if (tape[ptr]) {
		WebThickness = tape[ptr++];
		} else { WebThickness = null; ptr++; }
		let FlangeThickness;
		if (tape[ptr]) {
		FlangeThickness = tape[ptr++];
		} else { FlangeThickness = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		let FlangeEdgeRadius;
		if (tape[ptr]) {
		FlangeEdgeRadius = tape[ptr++];
		} else { FlangeEdgeRadius = null; ptr++; }
		let WebEdgeRadius;
		if (tape[ptr]) {
		WebEdgeRadius = tape[ptr++];
		} else { WebEdgeRadius = null; ptr++; }
		let WebSlope;
		if (tape[ptr]) {
		WebSlope = tape[ptr++];
		} else { WebSlope = null; ptr++; }
		let FlangeSlope;
		if (tape[ptr]) {
		FlangeSlope = tape[ptr++];
		} else { FlangeSlope = null; ptr++; }
		return new IfcTShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, FlangeWidth, WebThickness, FlangeThickness, FilletRadius, FlangeEdgeRadius, WebEdgeRadius, WebSlope, FlangeSlope);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.FlangeEdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.WebEdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.WebSlope){
		args.push(REAL)
		args.push(this.WebSlope)
		}
		else{ args.push(EMPTY); }
		if(this.FlangeSlope){
		args.push(REAL)
		args.push(this.FlangeSlope)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTable {
	constructor(expressID: number, type: number, Name: IfcLabel | null, Rows: Handle<IfcTableRow>[] | null, Columns: Handle<IfcTableColumn>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Rows = Rows;
		this.Columns = Columns;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	Rows: Handle<IfcTableRow>[] | null;
	Columns: Handle<IfcTableColumn>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTable
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Rows;
		if (tape[ptr]) {
		Rows = [];
		let Rows_index = 0;
		while (Rows_index < tape[ptr].length) {
			Rows.push(tape[ptr][Rows_index++]);
		}
	ptr++;
		} else { Rows = null; ptr++; }
		let Columns;
		if (tape[ptr]) {
		Columns = [];
		let Columns_index = 0;
		while (Columns_index < tape[ptr].length) {
			Columns.push(tape[ptr][Columns_index++]);
		}
	ptr++;
		} else { Columns = null; ptr++; }
		return new IfcTable(expressID, type, Name, Rows, Columns);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Rows){
		args.push(SET_BEGIN)
		this.Rows.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Columns){
		args.push(SET_BEGIN)
		this.Columns.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTableColumn {
	constructor(expressID: number, type: number, Identifier: IfcIdentifier | null, Name: IfcLabel | null, Description: IfcText | null, Unit: IfcUnit | null, ReferencePath: Handle<IfcReference> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Identifier = Identifier;
		this.Name = Name;
		this.Description = Description;
		this.Unit = Unit;
		this.ReferencePath = ReferencePath;
	}
	expressID: number;
	type: number;
	Identifier: IfcIdentifier | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	Unit: IfcUnit | null;
	ReferencePath: Handle<IfcReference> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTableColumn
	{
		let ptr = 0;
		let Identifier;
		if (tape[ptr]) {
		Identifier = tape[ptr++];
		} else { Identifier = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		let ReferencePath;
		if (tape[ptr]) {
		ReferencePath = tape[ptr++];
		} else { ReferencePath = null; ptr++; }
		return new IfcTableColumn(expressID, type, Identifier, Name, Description, Unit, ReferencePath);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Identifier){
		args.push(STRING)
		args.push(this.Identifier)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		if(this.ReferencePath){
		args.push(REF)
		args.push(this.ReferencePath)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTableRow {
	constructor(expressID: number, type: number, RowCells: IfcValue[] | null, IsHeading: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.RowCells = RowCells;
		this.IsHeading = IsHeading;
	}
	expressID: number;
	type: number;
	RowCells: IfcValue[] | null;
	IsHeading: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTableRow
	{
		let ptr = 0;
		let RowCells;
		if (tape[ptr]) {
		RowCells = [];
		let RowCells_index = 0;
		while (RowCells_index < tape[ptr].length) {
			RowCells.push(tape[ptr][RowCells_index++]);
		}
	ptr++;
		} else { RowCells = null; ptr++; }
		let IsHeading;
		if (tape[ptr]) {
		IsHeading = tape[ptr++];
		} else { IsHeading = null; ptr++; }
		return new IfcTableRow(expressID, type, RowCells, IsHeading);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.RowCells){
		}
		else{ args.push(EMPTY); }
		if(this.IsHeading){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTank {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTankTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTankTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTank
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTankTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTank(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTankType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTankTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTankTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTankType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTankTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTankType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTask {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, Status: IfcLabel | null, WorkMethod: IfcLabel | null, IsMilestone: IfcBoolean , Priority: IfcInteger | null, TaskTime: Handle<IfcTaskTime> | null, PredefinedType: IfcTaskTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.Status = Status;
		this.WorkMethod = WorkMethod;
		this.IsMilestone = IsMilestone;
		this.Priority = Priority;
		this.TaskTime = TaskTime;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	Status: IfcLabel | null;
	WorkMethod: IfcLabel | null;
	IsMilestone: IfcBoolean ;
	Priority: IfcInteger | null;
	TaskTime: Handle<IfcTaskTime> | null;
	PredefinedType: IfcTaskTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTask
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let Status;
		if (tape[ptr]) {
		Status = tape[ptr++];
		} else { Status = null; ptr++; }
		let WorkMethod;
		if (tape[ptr]) {
		WorkMethod = tape[ptr++];
		} else { WorkMethod = null; ptr++; }
		let IsMilestone;
		if (tape[ptr]) {
		IsMilestone = tape[ptr++];
		} else { IsMilestone = null; ptr++; }
		let Priority;
		if (tape[ptr]) {
		Priority = tape[ptr++];
		} else { Priority = null; ptr++; }
		let TaskTime;
		if (tape[ptr]) {
		TaskTime = tape[ptr++];
		} else { TaskTime = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTaskTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTask(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, LongDescription, Status, WorkMethod, IsMilestone, Priority, TaskTime, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.Status){
		args.push(STRING)
		args.push(this.Status)
		}
		else{ args.push(EMPTY); }
		if(this.WorkMethod){
		args.push(STRING)
		args.push(this.WorkMethod)
		}
		else{ args.push(EMPTY); }
		if(this.Priority){
		args.push(REAL)
		args.push(this.Priority)
		}
		else{ args.push(EMPTY); }
		if(this.TaskTime){
		args.push(REF)
		args.push(this.TaskTime)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTaskTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, DurationType: IfcTaskDurationEnum | null, ScheduleDuration: IfcDuration | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, EarlyStart: IfcDateTime | null, EarlyFinish: IfcDateTime | null, LateStart: IfcDateTime | null, LateFinish: IfcDateTime | null, FreeFloat: IfcDuration | null, TotalFloat: IfcDuration | null, IsCritical: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualDuration: IfcDuration | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingTime: IfcDuration | null, Completion: IfcPositiveRatioMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	DurationType: IfcTaskDurationEnum | null;
	ScheduleDuration: IfcDuration | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	EarlyStart: IfcDateTime | null;
	EarlyFinish: IfcDateTime | null;
	LateStart: IfcDateTime | null;
	LateFinish: IfcDateTime | null;
	FreeFloat: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	IsCritical: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualDuration: IfcDuration | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingTime: IfcDuration | null;
	Completion: IfcPositiveRatioMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTaskTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let DurationType;
		if (tape[ptr]) {
		DurationType = new IfcTaskDurationEnum(tape[ptr++]);
		} else { DurationType = null; ptr++; }
		let ScheduleDuration;
		if (tape[ptr]) {
		ScheduleDuration = tape[ptr++];
		} else { ScheduleDuration = null; ptr++; }
		let ScheduleStart;
		if (tape[ptr]) {
		ScheduleStart = tape[ptr++];
		} else { ScheduleStart = null; ptr++; }
		let ScheduleFinish;
		if (tape[ptr]) {
		ScheduleFinish = tape[ptr++];
		} else { ScheduleFinish = null; ptr++; }
		let EarlyStart;
		if (tape[ptr]) {
		EarlyStart = tape[ptr++];
		} else { EarlyStart = null; ptr++; }
		let EarlyFinish;
		if (tape[ptr]) {
		EarlyFinish = tape[ptr++];
		} else { EarlyFinish = null; ptr++; }
		let LateStart;
		if (tape[ptr]) {
		LateStart = tape[ptr++];
		} else { LateStart = null; ptr++; }
		let LateFinish;
		if (tape[ptr]) {
		LateFinish = tape[ptr++];
		} else { LateFinish = null; ptr++; }
		let FreeFloat;
		if (tape[ptr]) {
		FreeFloat = tape[ptr++];
		} else { FreeFloat = null; ptr++; }
		let TotalFloat;
		if (tape[ptr]) {
		TotalFloat = tape[ptr++];
		} else { TotalFloat = null; ptr++; }
		let IsCritical;
		if (tape[ptr]) {
		IsCritical = tape[ptr++];
		} else { IsCritical = null; ptr++; }
		let StatusTime;
		if (tape[ptr]) {
		StatusTime = tape[ptr++];
		} else { StatusTime = null; ptr++; }
		let ActualDuration;
		if (tape[ptr]) {
		ActualDuration = tape[ptr++];
		} else { ActualDuration = null; ptr++; }
		let ActualStart;
		if (tape[ptr]) {
		ActualStart = tape[ptr++];
		} else { ActualStart = null; ptr++; }
		let ActualFinish;
		if (tape[ptr]) {
		ActualFinish = tape[ptr++];
		} else { ActualFinish = null; ptr++; }
		let RemainingTime;
		if (tape[ptr]) {
		RemainingTime = tape[ptr++];
		} else { RemainingTime = null; ptr++; }
		let Completion;
		if (tape[ptr]) {
		Completion = tape[ptr++];
		} else { Completion = null; ptr++; }
		return new IfcTaskTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, DurationType, ScheduleDuration, ScheduleStart, ScheduleFinish, EarlyStart, EarlyFinish, LateStart, LateFinish, FreeFloat, TotalFloat, IsCritical, StatusTime, ActualDuration, ActualStart, ActualFinish, RemainingTime, Completion);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.DurationType){
		args.push(ENUM);
		args.push(this.DurationType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleDuration){
		args.push(STRING)
		args.push(this.ScheduleDuration)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleStart){
		args.push(STRING)
		args.push(this.ScheduleStart)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleFinish){
		args.push(STRING)
		args.push(this.ScheduleFinish)
		}
		else{ args.push(EMPTY); }
		if(this.EarlyStart){
		args.push(STRING)
		args.push(this.EarlyStart)
		}
		else{ args.push(EMPTY); }
		if(this.EarlyFinish){
		args.push(STRING)
		args.push(this.EarlyFinish)
		}
		else{ args.push(EMPTY); }
		if(this.LateStart){
		args.push(STRING)
		args.push(this.LateStart)
		}
		else{ args.push(EMPTY); }
		if(this.LateFinish){
		args.push(STRING)
		args.push(this.LateFinish)
		}
		else{ args.push(EMPTY); }
		if(this.FreeFloat){
		args.push(STRING)
		args.push(this.FreeFloat)
		}
		else{ args.push(EMPTY); }
		if(this.TotalFloat){
		args.push(STRING)
		args.push(this.TotalFloat)
		}
		else{ args.push(EMPTY); }
		if(this.IsCritical){
		}
		else{ args.push(EMPTY); }
		if(this.StatusTime){
		args.push(STRING)
		args.push(this.StatusTime)
		}
		else{ args.push(EMPTY); }
		if(this.ActualDuration){
		args.push(STRING)
		args.push(this.ActualDuration)
		}
		else{ args.push(EMPTY); }
		if(this.ActualStart){
		args.push(STRING)
		args.push(this.ActualStart)
		}
		else{ args.push(EMPTY); }
		if(this.ActualFinish){
		args.push(STRING)
		args.push(this.ActualFinish)
		}
		else{ args.push(EMPTY); }
		if(this.RemainingTime){
		args.push(STRING)
		args.push(this.RemainingTime)
		}
		else{ args.push(EMPTY); }
		if(this.Completion){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTaskTimeRecurring {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, DurationType: IfcTaskDurationEnum | null, ScheduleDuration: IfcDuration | null, ScheduleStart: IfcDateTime | null, ScheduleFinish: IfcDateTime | null, EarlyStart: IfcDateTime | null, EarlyFinish: IfcDateTime | null, LateStart: IfcDateTime | null, LateFinish: IfcDateTime | null, FreeFloat: IfcDuration | null, TotalFloat: IfcDuration | null, IsCritical: IfcBoolean | null, StatusTime: IfcDateTime | null, ActualDuration: IfcDuration | null, ActualStart: IfcDateTime | null, ActualFinish: IfcDateTime | null, RemainingTime: IfcDuration | null, Completion: IfcPositiveRatioMeasure | null, Recurrence: Handle<IfcRecurrencePattern> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.DurationType = DurationType;
		this.ScheduleDuration = ScheduleDuration;
		this.ScheduleStart = ScheduleStart;
		this.ScheduleFinish = ScheduleFinish;
		this.EarlyStart = EarlyStart;
		this.EarlyFinish = EarlyFinish;
		this.LateStart = LateStart;
		this.LateFinish = LateFinish;
		this.FreeFloat = FreeFloat;
		this.TotalFloat = TotalFloat;
		this.IsCritical = IsCritical;
		this.StatusTime = StatusTime;
		this.ActualDuration = ActualDuration;
		this.ActualStart = ActualStart;
		this.ActualFinish = ActualFinish;
		this.RemainingTime = RemainingTime;
		this.Completion = Completion;
		this.Recurrence = Recurrence;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	DurationType: IfcTaskDurationEnum | null;
	ScheduleDuration: IfcDuration | null;
	ScheduleStart: IfcDateTime | null;
	ScheduleFinish: IfcDateTime | null;
	EarlyStart: IfcDateTime | null;
	EarlyFinish: IfcDateTime | null;
	LateStart: IfcDateTime | null;
	LateFinish: IfcDateTime | null;
	FreeFloat: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	IsCritical: IfcBoolean | null;
	StatusTime: IfcDateTime | null;
	ActualDuration: IfcDuration | null;
	ActualStart: IfcDateTime | null;
	ActualFinish: IfcDateTime | null;
	RemainingTime: IfcDuration | null;
	Completion: IfcPositiveRatioMeasure | null;
	Recurrence: Handle<IfcRecurrencePattern> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTaskTimeRecurring
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let DurationType;
		if (tape[ptr]) {
		DurationType = new IfcTaskDurationEnum(tape[ptr++]);
		} else { DurationType = null; ptr++; }
		let ScheduleDuration;
		if (tape[ptr]) {
		ScheduleDuration = tape[ptr++];
		} else { ScheduleDuration = null; ptr++; }
		let ScheduleStart;
		if (tape[ptr]) {
		ScheduleStart = tape[ptr++];
		} else { ScheduleStart = null; ptr++; }
		let ScheduleFinish;
		if (tape[ptr]) {
		ScheduleFinish = tape[ptr++];
		} else { ScheduleFinish = null; ptr++; }
		let EarlyStart;
		if (tape[ptr]) {
		EarlyStart = tape[ptr++];
		} else { EarlyStart = null; ptr++; }
		let EarlyFinish;
		if (tape[ptr]) {
		EarlyFinish = tape[ptr++];
		} else { EarlyFinish = null; ptr++; }
		let LateStart;
		if (tape[ptr]) {
		LateStart = tape[ptr++];
		} else { LateStart = null; ptr++; }
		let LateFinish;
		if (tape[ptr]) {
		LateFinish = tape[ptr++];
		} else { LateFinish = null; ptr++; }
		let FreeFloat;
		if (tape[ptr]) {
		FreeFloat = tape[ptr++];
		} else { FreeFloat = null; ptr++; }
		let TotalFloat;
		if (tape[ptr]) {
		TotalFloat = tape[ptr++];
		} else { TotalFloat = null; ptr++; }
		let IsCritical;
		if (tape[ptr]) {
		IsCritical = tape[ptr++];
		} else { IsCritical = null; ptr++; }
		let StatusTime;
		if (tape[ptr]) {
		StatusTime = tape[ptr++];
		} else { StatusTime = null; ptr++; }
		let ActualDuration;
		if (tape[ptr]) {
		ActualDuration = tape[ptr++];
		} else { ActualDuration = null; ptr++; }
		let ActualStart;
		if (tape[ptr]) {
		ActualStart = tape[ptr++];
		} else { ActualStart = null; ptr++; }
		let ActualFinish;
		if (tape[ptr]) {
		ActualFinish = tape[ptr++];
		} else { ActualFinish = null; ptr++; }
		let RemainingTime;
		if (tape[ptr]) {
		RemainingTime = tape[ptr++];
		} else { RemainingTime = null; ptr++; }
		let Completion;
		if (tape[ptr]) {
		Completion = tape[ptr++];
		} else { Completion = null; ptr++; }
		let Recurrence;
		if (tape[ptr]) {
		Recurrence = tape[ptr++];
		} else { Recurrence = null; ptr++; }
		return new IfcTaskTimeRecurring(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, DurationType, ScheduleDuration, ScheduleStart, ScheduleFinish, EarlyStart, EarlyFinish, LateStart, LateFinish, FreeFloat, TotalFloat, IsCritical, StatusTime, ActualDuration, ActualStart, ActualFinish, RemainingTime, Completion, Recurrence);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.DurationType){
		args.push(ENUM);
		args.push(this.DurationType.value)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleDuration){
		args.push(STRING)
		args.push(this.ScheduleDuration)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleStart){
		args.push(STRING)
		args.push(this.ScheduleStart)
		}
		else{ args.push(EMPTY); }
		if(this.ScheduleFinish){
		args.push(STRING)
		args.push(this.ScheduleFinish)
		}
		else{ args.push(EMPTY); }
		if(this.EarlyStart){
		args.push(STRING)
		args.push(this.EarlyStart)
		}
		else{ args.push(EMPTY); }
		if(this.EarlyFinish){
		args.push(STRING)
		args.push(this.EarlyFinish)
		}
		else{ args.push(EMPTY); }
		if(this.LateStart){
		args.push(STRING)
		args.push(this.LateStart)
		}
		else{ args.push(EMPTY); }
		if(this.LateFinish){
		args.push(STRING)
		args.push(this.LateFinish)
		}
		else{ args.push(EMPTY); }
		if(this.FreeFloat){
		args.push(STRING)
		args.push(this.FreeFloat)
		}
		else{ args.push(EMPTY); }
		if(this.TotalFloat){
		args.push(STRING)
		args.push(this.TotalFloat)
		}
		else{ args.push(EMPTY); }
		if(this.IsCritical){
		}
		else{ args.push(EMPTY); }
		if(this.StatusTime){
		args.push(STRING)
		args.push(this.StatusTime)
		}
		else{ args.push(EMPTY); }
		if(this.ActualDuration){
		args.push(STRING)
		args.push(this.ActualDuration)
		}
		else{ args.push(EMPTY); }
		if(this.ActualStart){
		args.push(STRING)
		args.push(this.ActualStart)
		}
		else{ args.push(EMPTY); }
		if(this.ActualFinish){
		args.push(STRING)
		args.push(this.ActualFinish)
		}
		else{ args.push(EMPTY); }
		if(this.RemainingTime){
		args.push(STRING)
		args.push(this.RemainingTime)
		}
		else{ args.push(EMPTY); }
		if(this.Completion){
		}
		else{ args.push(EMPTY); }
		args.push(REF)
		args.push(this.Recurrence)
		return args;
	}
};
export class IfcTaskType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null, PredefinedType: IfcTaskTypeEnum , WorkMethod: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
		this.PredefinedType = PredefinedType;
		this.WorkMethod = WorkMethod;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	PredefinedType: IfcTaskTypeEnum ;
	WorkMethod: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTaskType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ProcessType;
		if (tape[ptr]) {
		ProcessType = tape[ptr++];
		} else { ProcessType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTaskTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let WorkMethod;
		if (tape[ptr]) {
		WorkMethod = tape[ptr++];
		} else { WorkMethod = null; ptr++; }
		return new IfcTaskType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType, PredefinedType, WorkMethod);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ProcessType){
		args.push(STRING)
		args.push(this.ProcessType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.WorkMethod){
		args.push(STRING)
		args.push(this.WorkMethod)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTelecomAddress {
	constructor(expressID: number, type: number, Purpose: IfcAddressTypeEnum | null, Description: IfcText | null, UserDefinedPurpose: IfcLabel | null, TelephoneNumbers: IfcLabel[] | null, FacsimileNumbers: IfcLabel[] | null, PagerNumber: IfcLabel | null, ElectronicMailAddresses: IfcLabel[] | null, WWWHomePageURL: IfcURIReference | null, MessagingIDs: IfcURIReference[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Purpose = Purpose;
		this.Description = Description;
		this.UserDefinedPurpose = UserDefinedPurpose;
		this.TelephoneNumbers = TelephoneNumbers;
		this.FacsimileNumbers = FacsimileNumbers;
		this.PagerNumber = PagerNumber;
		this.ElectronicMailAddresses = ElectronicMailAddresses;
		this.WWWHomePageURL = WWWHomePageURL;
		this.MessagingIDs = MessagingIDs;
	}
	expressID: number;
	type: number;
	Purpose: IfcAddressTypeEnum | null;
	Description: IfcText | null;
	UserDefinedPurpose: IfcLabel | null;
	TelephoneNumbers: IfcLabel[] | null;
	FacsimileNumbers: IfcLabel[] | null;
	PagerNumber: IfcLabel | null;
	ElectronicMailAddresses: IfcLabel[] | null;
	WWWHomePageURL: IfcURIReference | null;
	MessagingIDs: IfcURIReference[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTelecomAddress
	{
		let ptr = 0;
		let Purpose;
		if (tape[ptr]) {
		Purpose = new IfcAddressTypeEnum(tape[ptr++]);
		} else { Purpose = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let UserDefinedPurpose;
		if (tape[ptr]) {
		UserDefinedPurpose = tape[ptr++];
		} else { UserDefinedPurpose = null; ptr++; }
		let TelephoneNumbers;
		if (tape[ptr]) {
		TelephoneNumbers = [];
		let TelephoneNumbers_index = 0;
		while (TelephoneNumbers_index < tape[ptr].length) {
			TelephoneNumbers.push(tape[ptr][TelephoneNumbers_index++]);
		}
	ptr++;
		} else { TelephoneNumbers = null; ptr++; }
		let FacsimileNumbers;
		if (tape[ptr]) {
		FacsimileNumbers = [];
		let FacsimileNumbers_index = 0;
		while (FacsimileNumbers_index < tape[ptr].length) {
			FacsimileNumbers.push(tape[ptr][FacsimileNumbers_index++]);
		}
	ptr++;
		} else { FacsimileNumbers = null; ptr++; }
		let PagerNumber;
		if (tape[ptr]) {
		PagerNumber = tape[ptr++];
		} else { PagerNumber = null; ptr++; }
		let ElectronicMailAddresses;
		if (tape[ptr]) {
		ElectronicMailAddresses = [];
		let ElectronicMailAddresses_index = 0;
		while (ElectronicMailAddresses_index < tape[ptr].length) {
			ElectronicMailAddresses.push(tape[ptr][ElectronicMailAddresses_index++]);
		}
	ptr++;
		} else { ElectronicMailAddresses = null; ptr++; }
		let WWWHomePageURL;
		if (tape[ptr]) {
		WWWHomePageURL = tape[ptr++];
		} else { WWWHomePageURL = null; ptr++; }
		let MessagingIDs;
		if (tape[ptr]) {
		MessagingIDs = [];
		let MessagingIDs_index = 0;
		while (MessagingIDs_index < tape[ptr].length) {
			MessagingIDs.push(tape[ptr][MessagingIDs_index++]);
		}
	ptr++;
		} else { MessagingIDs = null; ptr++; }
		return new IfcTelecomAddress(expressID, type, Purpose, Description, UserDefinedPurpose, TelephoneNumbers, FacsimileNumbers, PagerNumber, ElectronicMailAddresses, WWWHomePageURL, MessagingIDs);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Purpose){
		args.push(ENUM);
		args.push(this.Purpose.value)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPurpose){
		args.push(STRING)
		args.push(this.UserDefinedPurpose)
		}
		else{ args.push(EMPTY); }
		if(this.TelephoneNumbers){
		args.push(STRING)
		args.push(...this.TelephoneNumbers)
		}
		else{ args.push(EMPTY); }
		if(this.FacsimileNumbers){
		args.push(STRING)
		args.push(...this.FacsimileNumbers)
		}
		else{ args.push(EMPTY); }
		if(this.PagerNumber){
		args.push(STRING)
		args.push(this.PagerNumber)
		}
		else{ args.push(EMPTY); }
		if(this.ElectronicMailAddresses){
		args.push(STRING)
		args.push(...this.ElectronicMailAddresses)
		}
		else{ args.push(EMPTY); }
		if(this.WWWHomePageURL){
		args.push(STRING)
		args.push(this.WWWHomePageURL)
		}
		else{ args.push(EMPTY); }
		if(this.MessagingIDs){
		args.push(STRING)
		args.push(...this.MessagingIDs)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTendon {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonTypeEnum | null, NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, TensionForce: IfcForceMeasure | null, PreStress: IfcPressureMeasure | null, FrictionCoefficient: IfcNormalisedRatioMeasure | null, AnchorageSlip: IfcPositiveLengthMeasure | null, MinCurvatureRadius: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.TensionForce = TensionForce;
		this.PreStress = PreStress;
		this.FrictionCoefficient = FrictionCoefficient;
		this.AnchorageSlip = AnchorageSlip;
		this.MinCurvatureRadius = MinCurvatureRadius;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonTypeEnum | null;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	TensionForce: IfcForceMeasure | null;
	PreStress: IfcPressureMeasure | null;
	FrictionCoefficient: IfcNormalisedRatioMeasure | null;
	AnchorageSlip: IfcPositiveLengthMeasure | null;
	MinCurvatureRadius: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendon
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let CrossSectionArea;
		if (tape[ptr]) {
		CrossSectionArea = tape[ptr++];
		} else { CrossSectionArea = null; ptr++; }
		let TensionForce;
		if (tape[ptr]) {
		TensionForce = tape[ptr++];
		} else { TensionForce = null; ptr++; }
		let PreStress;
		if (tape[ptr]) {
		PreStress = tape[ptr++];
		} else { PreStress = null; ptr++; }
		let FrictionCoefficient;
		if (tape[ptr]) {
		FrictionCoefficient = tape[ptr++];
		} else { FrictionCoefficient = null; ptr++; }
		let AnchorageSlip;
		if (tape[ptr]) {
		AnchorageSlip = tape[ptr++];
		} else { AnchorageSlip = null; ptr++; }
		let MinCurvatureRadius;
		if (tape[ptr]) {
		MinCurvatureRadius = tape[ptr++];
		} else { MinCurvatureRadius = null; ptr++; }
		return new IfcTendon(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade, PredefinedType, NominalDiameter, CrossSectionArea, TensionForce, PreStress, FrictionCoefficient, AnchorageSlip, MinCurvatureRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.CrossSectionArea){
		args.push(REAL)
		args.push(this.CrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.TensionForce){
		args.push(REAL)
		args.push(this.TensionForce)
		}
		else{ args.push(EMPTY); }
		if(this.PreStress){
		args.push(REAL)
		args.push(this.PreStress)
		}
		else{ args.push(EMPTY); }
		if(this.FrictionCoefficient){
		}
		else{ args.push(EMPTY); }
		if(this.AnchorageSlip){
		}
		else{ args.push(EMPTY); }
		if(this.MinCurvatureRadius){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTendonAnchor {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonAnchorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonAnchorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendonAnchor
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonAnchorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTendonAnchor(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTendonAnchorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonAnchorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonAnchorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendonAnchorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonAnchorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTendonAnchorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTendonConduit {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, SteelGrade: IfcLabel | null, PredefinedType: IfcTendonConduitTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.SteelGrade = SteelGrade;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	SteelGrade: IfcLabel | null;
	PredefinedType: IfcTendonConduitTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendonConduit
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let SteelGrade;
		if (tape[ptr]) {
		SteelGrade = tape[ptr++];
		} else { SteelGrade = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonConduitTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTendonConduit(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, SteelGrade, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.SteelGrade){
		args.push(STRING)
		args.push(this.SteelGrade)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTendonConduitType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonConduitTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonConduitTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendonConduitType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonConduitTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTendonConduitType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTendonType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTendonTypeEnum , NominalDiameter: IfcPositiveLengthMeasure | null, CrossSectionArea: IfcAreaMeasure | null, SheathDiameter: IfcPositiveLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.NominalDiameter = NominalDiameter;
		this.CrossSectionArea = CrossSectionArea;
		this.SheathDiameter = SheathDiameter;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTendonTypeEnum ;
	NominalDiameter: IfcPositiveLengthMeasure | null;
	CrossSectionArea: IfcAreaMeasure | null;
	SheathDiameter: IfcPositiveLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTendonType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTendonTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let NominalDiameter;
		if (tape[ptr]) {
		NominalDiameter = tape[ptr++];
		} else { NominalDiameter = null; ptr++; }
		let CrossSectionArea;
		if (tape[ptr]) {
		CrossSectionArea = tape[ptr++];
		} else { CrossSectionArea = null; ptr++; }
		let SheathDiameter;
		if (tape[ptr]) {
		SheathDiameter = tape[ptr++];
		} else { SheathDiameter = null; ptr++; }
		return new IfcTendonType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, NominalDiameter, CrossSectionArea, SheathDiameter);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		if(this.NominalDiameter){
		}
		else{ args.push(EMPTY); }
		if(this.CrossSectionArea){
		args.push(REAL)
		args.push(this.CrossSectionArea)
		}
		else{ args.push(EMPTY); }
		if(this.SheathDiameter){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTessellatedFaceSet {
	constructor(expressID: number, type: number, Coordinates: Handle<IfcCartesianPointList3D> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
	}
	expressID: number;
	type: number;
	Coordinates: Handle<IfcCartesianPointList3D> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTessellatedFaceSet
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = tape[ptr++];
		} else { Coordinates = null; ptr++; }
		return new IfcTessellatedFaceSet(expressID, type, Coordinates);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Coordinates)
		return args;
	}
};
export class IfcTessellatedItem {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTessellatedItem
	{
		let ptr = 0;
		return new IfcTessellatedItem(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcTextLiteral {
	constructor(expressID: number, type: number, Literal: IfcPresentableText , Placement: IfcAxis2Placement , Path: IfcTextPath )
	{
		this.expressID = expressID;
		this.type = type;
		this.Literal = Literal;
		this.Placement = Placement;
		this.Path = Path;
	}
	expressID: number;
	type: number;
	Literal: IfcPresentableText ;
	Placement: IfcAxis2Placement ;
	Path: IfcTextPath ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteral
	{
		let ptr = 0;
		let Literal;
		if (tape[ptr]) {
		Literal = tape[ptr++];
		} else { Literal = null; ptr++; }
		let Placement;
		if (tape[ptr]) {
		Placement = tape[ptr++];
		} else { Placement = null; ptr++; }
		let Path;
		if (tape[ptr]) {
		Path = new IfcTextPath(tape[ptr++]);
		} else { Path = null; ptr++; }
		return new IfcTextLiteral(expressID, type, Literal, Placement, Path);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Literal)
		args.push(ENUM);
		args.push(this.Path.value)
		return args;
	}
};
export class IfcTextLiteralWithExtent {
	constructor(expressID: number, type: number, Literal: IfcPresentableText , Placement: IfcAxis2Placement , Path: IfcTextPath , Extent: Handle<IfcPlanarExtent> , BoxAlignment: IfcBoxAlignment )
	{
		this.expressID = expressID;
		this.type = type;
		this.Literal = Literal;
		this.Placement = Placement;
		this.Path = Path;
		this.Extent = Extent;
		this.BoxAlignment = BoxAlignment;
	}
	expressID: number;
	type: number;
	Literal: IfcPresentableText ;
	Placement: IfcAxis2Placement ;
	Path: IfcTextPath ;
	Extent: Handle<IfcPlanarExtent> ;
	BoxAlignment: IfcBoxAlignment ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextLiteralWithExtent
	{
		let ptr = 0;
		let Literal;
		if (tape[ptr]) {
		Literal = tape[ptr++];
		} else { Literal = null; ptr++; }
		let Placement;
		if (tape[ptr]) {
		Placement = tape[ptr++];
		} else { Placement = null; ptr++; }
		let Path;
		if (tape[ptr]) {
		Path = new IfcTextPath(tape[ptr++]);
		} else { Path = null; ptr++; }
		let Extent;
		if (tape[ptr]) {
		Extent = tape[ptr++];
		} else { Extent = null; ptr++; }
		let BoxAlignment;
		if (tape[ptr]) {
		BoxAlignment = tape[ptr++];
		} else { BoxAlignment = null; ptr++; }
		return new IfcTextLiteralWithExtent(expressID, type, Literal, Placement, Path, Extent, BoxAlignment);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Literal)
		args.push(ENUM);
		args.push(this.Path.value)
		args.push(REF)
		args.push(this.Extent)
		return args;
	}
};
export class IfcTextStyle {
	constructor(expressID: number, type: number, Name: IfcLabel | null, TextCharacterAppearance: Handle<IfcTextStyleForDefinedFont> | null, TextStyle: Handle<IfcTextStyleTextModel> | null, TextFontStyle: IfcTextFontSelect , ModelOrDraughting: IfcBoolean | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.TextCharacterAppearance = TextCharacterAppearance;
		this.TextStyle = TextStyle;
		this.TextFontStyle = TextFontStyle;
		this.ModelOrDraughting = ModelOrDraughting;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	TextCharacterAppearance: Handle<IfcTextStyleForDefinedFont> | null;
	TextStyle: Handle<IfcTextStyleTextModel> | null;
	TextFontStyle: IfcTextFontSelect ;
	ModelOrDraughting: IfcBoolean | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyle
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let TextCharacterAppearance;
		if (tape[ptr]) {
		TextCharacterAppearance = tape[ptr++];
		} else { TextCharacterAppearance = null; ptr++; }
		let TextStyle;
		if (tape[ptr]) {
		TextStyle = tape[ptr++];
		} else { TextStyle = null; ptr++; }
		let TextFontStyle;
		if (tape[ptr]) {
		TextFontStyle = tape[ptr++];
		} else { TextFontStyle = null; ptr++; }
		let ModelOrDraughting;
		if (tape[ptr]) {
		ModelOrDraughting = tape[ptr++];
		} else { ModelOrDraughting = null; ptr++; }
		return new IfcTextStyle(expressID, type, Name, TextCharacterAppearance, TextStyle, TextFontStyle, ModelOrDraughting);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.TextCharacterAppearance){
		args.push(REF)
		args.push(this.TextCharacterAppearance)
		}
		else{ args.push(EMPTY); }
		if(this.TextStyle){
		args.push(REF)
		args.push(this.TextStyle)
		}
		else{ args.push(EMPTY); }
		if(this.ModelOrDraughting){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTextStyleFontModel {
	constructor(expressID: number, type: number, Name: IfcLabel , FontFamily: IfcTextFontName[] , FontStyle: IfcFontStyle | null, FontVariant: IfcFontVariant | null, FontWeight: IfcFontWeight | null, FontSize: IfcSizeSelect )
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.FontFamily = FontFamily;
		this.FontStyle = FontStyle;
		this.FontVariant = FontVariant;
		this.FontWeight = FontWeight;
		this.FontSize = FontSize;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	FontFamily: IfcTextFontName[] ;
	FontStyle: IfcFontStyle | null;
	FontVariant: IfcFontVariant | null;
	FontWeight: IfcFontWeight | null;
	FontSize: IfcSizeSelect ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleFontModel
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let FontFamily;
		if (tape[ptr]) {
		FontFamily = [];
		let FontFamily_index = 0;
		while (FontFamily_index < tape[ptr].length) {
			FontFamily.push(tape[ptr][FontFamily_index++]);
		}
	ptr++;
		} else { FontFamily = null; ptr++; }
		let FontStyle;
		if (tape[ptr]) {
		FontStyle = tape[ptr++];
		} else { FontStyle = null; ptr++; }
		let FontVariant;
		if (tape[ptr]) {
		FontVariant = tape[ptr++];
		} else { FontVariant = null; ptr++; }
		let FontWeight;
		if (tape[ptr]) {
		FontWeight = tape[ptr++];
		} else { FontWeight = null; ptr++; }
		let FontSize;
		if (tape[ptr]) {
		FontSize = tape[ptr++];
		} else { FontSize = null; ptr++; }
		return new IfcTextStyleFontModel(expressID, type, Name, FontFamily, FontStyle, FontVariant, FontWeight, FontSize);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		args.push(STRING)
		args.push(...this.FontFamily)
		if(this.FontStyle){
		args.push(STRING)
		args.push(this.FontStyle)
		}
		else{ args.push(EMPTY); }
		if(this.FontVariant){
		args.push(STRING)
		args.push(this.FontVariant)
		}
		else{ args.push(EMPTY); }
		if(this.FontWeight){
		args.push(STRING)
		args.push(this.FontWeight)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTextStyleForDefinedFont {
	constructor(expressID: number, type: number, Colour: IfcColour , BackgroundColour: IfcColour | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Colour = Colour;
		this.BackgroundColour = BackgroundColour;
	}
	expressID: number;
	type: number;
	Colour: IfcColour ;
	BackgroundColour: IfcColour | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleForDefinedFont
	{
		let ptr = 0;
		let Colour;
		if (tape[ptr]) {
		Colour = tape[ptr++];
		} else { Colour = null; ptr++; }
		let BackgroundColour;
		if (tape[ptr]) {
		BackgroundColour = tape[ptr++];
		} else { BackgroundColour = null; ptr++; }
		return new IfcTextStyleForDefinedFont(expressID, type, Colour, BackgroundColour);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.BackgroundColour){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTextStyleTextModel {
	constructor(expressID: number, type: number, TextIndent: IfcSizeSelect | null, TextAlign: IfcTextAlignment | null, TextDecoration: IfcTextDecoration | null, LetterSpacing: IfcSizeSelect | null, WordSpacing: IfcSizeSelect | null, TextTransform: IfcTextTransformation | null, LineHeight: IfcSizeSelect | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.TextIndent = TextIndent;
		this.TextAlign = TextAlign;
		this.TextDecoration = TextDecoration;
		this.LetterSpacing = LetterSpacing;
		this.WordSpacing = WordSpacing;
		this.TextTransform = TextTransform;
		this.LineHeight = LineHeight;
	}
	expressID: number;
	type: number;
	TextIndent: IfcSizeSelect | null;
	TextAlign: IfcTextAlignment | null;
	TextDecoration: IfcTextDecoration | null;
	LetterSpacing: IfcSizeSelect | null;
	WordSpacing: IfcSizeSelect | null;
	TextTransform: IfcTextTransformation | null;
	LineHeight: IfcSizeSelect | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextStyleTextModel
	{
		let ptr = 0;
		let TextIndent;
		if (tape[ptr]) {
		TextIndent = tape[ptr++];
		} else { TextIndent = null; ptr++; }
		let TextAlign;
		if (tape[ptr]) {
		TextAlign = tape[ptr++];
		} else { TextAlign = null; ptr++; }
		let TextDecoration;
		if (tape[ptr]) {
		TextDecoration = tape[ptr++];
		} else { TextDecoration = null; ptr++; }
		let LetterSpacing;
		if (tape[ptr]) {
		LetterSpacing = tape[ptr++];
		} else { LetterSpacing = null; ptr++; }
		let WordSpacing;
		if (tape[ptr]) {
		WordSpacing = tape[ptr++];
		} else { WordSpacing = null; ptr++; }
		let TextTransform;
		if (tape[ptr]) {
		TextTransform = tape[ptr++];
		} else { TextTransform = null; ptr++; }
		let LineHeight;
		if (tape[ptr]) {
		LineHeight = tape[ptr++];
		} else { LineHeight = null; ptr++; }
		return new IfcTextStyleTextModel(expressID, type, TextIndent, TextAlign, TextDecoration, LetterSpacing, WordSpacing, TextTransform, LineHeight);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.TextIndent){
		}
		else{ args.push(EMPTY); }
		if(this.TextAlign){
		args.push(STRING)
		args.push(this.TextAlign)
		}
		else{ args.push(EMPTY); }
		if(this.TextDecoration){
		args.push(STRING)
		args.push(this.TextDecoration)
		}
		else{ args.push(EMPTY); }
		if(this.LetterSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.WordSpacing){
		}
		else{ args.push(EMPTY); }
		if(this.TextTransform){
		args.push(STRING)
		args.push(this.TextTransform)
		}
		else{ args.push(EMPTY); }
		if(this.LineHeight){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTextureCoordinate {
	constructor(expressID: number, type: number, Maps: Handle<IfcSurfaceTexture>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
	}
	expressID: number;
	type: number;
	Maps: Handle<IfcSurfaceTexture>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinate
	{
		let ptr = 0;
		let Maps;
		if (tape[ptr]) {
		Maps = [];
		let Maps_index = 0;
		while (Maps_index < tape[ptr].length) {
			Maps.push(tape[ptr][Maps_index++]);
		}
	ptr++;
		} else { Maps = null; ptr++; }
		return new IfcTextureCoordinate(expressID, type, Maps);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Maps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcTextureCoordinateGenerator {
	constructor(expressID: number, type: number, Maps: Handle<IfcSurfaceTexture>[] , Mode: IfcLabel , Parameter: IfcReal[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.Mode = Mode;
		this.Parameter = Parameter;
	}
	expressID: number;
	type: number;
	Maps: Handle<IfcSurfaceTexture>[] ;
	Mode: IfcLabel ;
	Parameter: IfcReal[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextureCoordinateGenerator
	{
		let ptr = 0;
		let Maps;
		if (tape[ptr]) {
		Maps = [];
		let Maps_index = 0;
		while (Maps_index < tape[ptr].length) {
			Maps.push(tape[ptr][Maps_index++]);
		}
	ptr++;
		} else { Maps = null; ptr++; }
		let Mode;
		if (tape[ptr]) {
		Mode = tape[ptr++];
		} else { Mode = null; ptr++; }
		let Parameter;
		if (tape[ptr]) {
		Parameter = [];
		let Parameter_index = 0;
		while (Parameter_index < tape[ptr].length) {
			Parameter.push(tape[ptr][Parameter_index++]);
		}
	ptr++;
		} else { Parameter = null; ptr++; }
		return new IfcTextureCoordinateGenerator(expressID, type, Maps, Mode, Parameter);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Maps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(STRING)
		args.push(this.Mode)
		if(this.Parameter){
		args.push(REAL)
		args.push(...this.Parameter)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTextureMap {
	constructor(expressID: number, type: number, Maps: Handle<IfcSurfaceTexture>[] , Vertices: Handle<IfcTextureVertex>[] , MappedTo: Handle<IfcFace> )
	{
		this.expressID = expressID;
		this.type = type;
		this.Maps = Maps;
		this.Vertices = Vertices;
		this.MappedTo = MappedTo;
	}
	expressID: number;
	type: number;
	Maps: Handle<IfcSurfaceTexture>[] ;
	Vertices: Handle<IfcTextureVertex>[] ;
	MappedTo: Handle<IfcFace> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextureMap
	{
		let ptr = 0;
		let Maps;
		if (tape[ptr]) {
		Maps = [];
		let Maps_index = 0;
		while (Maps_index < tape[ptr].length) {
			Maps.push(tape[ptr][Maps_index++]);
		}
	ptr++;
		} else { Maps = null; ptr++; }
		let Vertices;
		if (tape[ptr]) {
		Vertices = [];
		let Vertices_index = 0;
		while (Vertices_index < tape[ptr].length) {
			Vertices.push(tape[ptr][Vertices_index++]);
		}
	ptr++;
		} else { Vertices = null; ptr++; }
		let MappedTo;
		if (tape[ptr]) {
		MappedTo = tape[ptr++];
		} else { MappedTo = null; ptr++; }
		return new IfcTextureMap(expressID, type, Maps, Vertices, MappedTo);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.Maps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(SET_BEGIN)
		this.Vertices.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REF)
		args.push(this.MappedTo)
		return args;
	}
};
export class IfcTextureVertex {
	constructor(expressID: number, type: number, Coordinates: IfcParameterValue[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
	}
	expressID: number;
	type: number;
	Coordinates: IfcParameterValue[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextureVertex
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = [];
		let Coordinates_index = 0;
		while (Coordinates_index < tape[ptr].length) {
			Coordinates.push(tape[ptr][Coordinates_index++]);
		}
	ptr++;
		} else { Coordinates = null; ptr++; }
		return new IfcTextureVertex(expressID, type, Coordinates);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.Coordinates)
		return args;
	}
};
export class IfcTextureVertexList {
	constructor(expressID: number, type: number, TexCoordsList: IfcParameterValue[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.TexCoordsList = TexCoordsList;
	}
	expressID: number;
	type: number;
	TexCoordsList: IfcParameterValue[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTextureVertexList
	{
		let ptr = 0;
		let TexCoordsList;
		if (tape[ptr]) {
		TexCoordsList = [];
		let TexCoordsList_index = 0;
		while (TexCoordsList_index < tape[ptr].length) {
			TexCoordsList.push(tape[ptr][TexCoordsList_index++]);
		}
	ptr++;
		} else { TexCoordsList = null; ptr++; }
		return new IfcTextureVertexList(expressID, type, TexCoordsList);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REAL)
		args.push(...this.TexCoordsList)
		return args;
	}
};
export class IfcTimePeriod {
	constructor(expressID: number, type: number, StartTime: IfcTime , EndTime: IfcTime )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
	}
	expressID: number;
	type: number;
	StartTime: IfcTime ;
	EndTime: IfcTime ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTimePeriod
	{
		let ptr = 0;
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let EndTime;
		if (tape[ptr]) {
		EndTime = tape[ptr++];
		} else { EndTime = null; ptr++; }
		return new IfcTimePeriod(expressID, type, StartTime, EndTime);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.StartTime)
		args.push(STRING)
		args.push(this.EndTime)
		return args;
	}
};
export class IfcTimeSeries {
	constructor(expressID: number, type: number, Name: IfcLabel , Description: IfcText | null, StartTime: IfcDateTime , EndTime: IfcDateTime , TimeSeriesDataType: IfcTimeSeriesDataTypeEnum , DataOrigin: IfcDataOriginEnum , UserDefinedDataOrigin: IfcLabel | null, Unit: IfcUnit | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.Description = Description;
		this.StartTime = StartTime;
		this.EndTime = EndTime;
		this.TimeSeriesDataType = TimeSeriesDataType;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.Unit = Unit;
	}
	expressID: number;
	type: number;
	Name: IfcLabel ;
	Description: IfcText | null;
	StartTime: IfcDateTime ;
	EndTime: IfcDateTime ;
	TimeSeriesDataType: IfcTimeSeriesDataTypeEnum ;
	DataOrigin: IfcDataOriginEnum ;
	UserDefinedDataOrigin: IfcLabel | null;
	Unit: IfcUnit | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeries
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let EndTime;
		if (tape[ptr]) {
		EndTime = tape[ptr++];
		} else { EndTime = null; ptr++; }
		let TimeSeriesDataType;
		if (tape[ptr]) {
		TimeSeriesDataType = new IfcTimeSeriesDataTypeEnum(tape[ptr++]);
		} else { TimeSeriesDataType = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let Unit;
		if (tape[ptr]) {
		Unit = tape[ptr++];
		} else { Unit = null; ptr++; }
		return new IfcTimeSeries(expressID, type, Name, Description, StartTime, EndTime, TimeSeriesDataType, DataOrigin, UserDefinedDataOrigin, Unit);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.Name)
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		args.push(STRING)
		args.push(this.EndTime)
		args.push(ENUM);
		args.push(this.TimeSeriesDataType.value)
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.Unit){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTimeSeriesValue {
	constructor(expressID: number, type: number, ListValues: IfcValue[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ListValues = ListValues;
	}
	expressID: number;
	type: number;
	ListValues: IfcValue[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTimeSeriesValue
	{
		let ptr = 0;
		let ListValues;
		if (tape[ptr]) {
		ListValues = [];
		let ListValues_index = 0;
		while (ListValues_index < tape[ptr].length) {
			ListValues.push(tape[ptr][ListValues_index++]);
		}
	ptr++;
		} else { ListValues = null; ptr++; }
		return new IfcTimeSeriesValue(expressID, type, ListValues);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcTopologicalRepresentationItem {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTopologicalRepresentationItem
	{
		let ptr = 0;
		return new IfcTopologicalRepresentationItem(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcTopologyRepresentation {
	constructor(expressID: number, type: number, ContextOfItems: Handle<IfcRepresentationContext> , RepresentationIdentifier: IfcLabel | null, RepresentationType: IfcLabel | null, Items: Handle<IfcRepresentationItem>[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.ContextOfItems = ContextOfItems;
		this.RepresentationIdentifier = RepresentationIdentifier;
		this.RepresentationType = RepresentationType;
		this.Items = Items;
	}
	expressID: number;
	type: number;
	ContextOfItems: Handle<IfcRepresentationContext> ;
	RepresentationIdentifier: IfcLabel | null;
	RepresentationType: IfcLabel | null;
	Items: Handle<IfcRepresentationItem>[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTopologyRepresentation
	{
		let ptr = 0;
		let ContextOfItems;
		if (tape[ptr]) {
		ContextOfItems = tape[ptr++];
		} else { ContextOfItems = null; ptr++; }
		let RepresentationIdentifier;
		if (tape[ptr]) {
		RepresentationIdentifier = tape[ptr++];
		} else { RepresentationIdentifier = null; ptr++; }
		let RepresentationType;
		if (tape[ptr]) {
		RepresentationType = tape[ptr++];
		} else { RepresentationType = null; ptr++; }
		let Items;
		if (tape[ptr]) {
		Items = [];
		let Items_index = 0;
		while (Items_index < tape[ptr].length) {
			Items.push(tape[ptr][Items_index++]);
		}
	ptr++;
		} else { Items = null; ptr++; }
		return new IfcTopologyRepresentation(expressID, type, ContextOfItems, RepresentationIdentifier, RepresentationType, Items);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.ContextOfItems)
		if(this.RepresentationIdentifier){
		args.push(STRING)
		args.push(this.RepresentationIdentifier)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationType){
		args.push(STRING)
		args.push(this.RepresentationType)
		}
		else{ args.push(EMPTY); }
		args.push(SET_BEGIN)
		this.Items.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		return args;
	}
};
export class IfcToroidalSurface {
	constructor(expressID: number, type: number, Position: Handle<IfcAxis2Placement3D> , MajorRadius: IfcPositiveLengthMeasure , MinorRadius: IfcPositiveLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Position = Position;
		this.MajorRadius = MajorRadius;
		this.MinorRadius = MinorRadius;
	}
	expressID: number;
	type: number;
	Position: Handle<IfcAxis2Placement3D> ;
	MajorRadius: IfcPositiveLengthMeasure ;
	MinorRadius: IfcPositiveLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcToroidalSurface
	{
		let ptr = 0;
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let MajorRadius;
		if (tape[ptr]) {
		MajorRadius = tape[ptr++];
		} else { MajorRadius = null; ptr++; }
		let MinorRadius;
		if (tape[ptr]) {
		MinorRadius = tape[ptr++];
		} else { MinorRadius = null; ptr++; }
		return new IfcToroidalSurface(expressID, type, Position, MajorRadius, MinorRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Position)
		return args;
	}
};
export class IfcTransformer {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTransformerTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTransformerTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTransformer
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTransformerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTransformer(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTransformerType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTransformerTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTransformerTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTransformerType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTransformerTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTransformerType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTransitionCurveSegment2D {
	constructor(expressID: number, type: number, StartPoint: Handle<IfcCartesianPoint> , StartDirection: IfcPlaneAngleMeasure , SegmentLength: IfcPositiveLengthMeasure , StartRadius: IfcPositiveLengthMeasure | null, EndRadius: IfcPositiveLengthMeasure | null, IsStartRadiusCCW: IfcBoolean , IsEndRadiusCCW: IfcBoolean , TransitionCurveType: IfcTransitionCurveType )
	{
		this.expressID = expressID;
		this.type = type;
		this.StartPoint = StartPoint;
		this.StartDirection = StartDirection;
		this.SegmentLength = SegmentLength;
		this.StartRadius = StartRadius;
		this.EndRadius = EndRadius;
		this.IsStartRadiusCCW = IsStartRadiusCCW;
		this.IsEndRadiusCCW = IsEndRadiusCCW;
		this.TransitionCurveType = TransitionCurveType;
	}
	expressID: number;
	type: number;
	StartPoint: Handle<IfcCartesianPoint> ;
	StartDirection: IfcPlaneAngleMeasure ;
	SegmentLength: IfcPositiveLengthMeasure ;
	StartRadius: IfcPositiveLengthMeasure | null;
	EndRadius: IfcPositiveLengthMeasure | null;
	IsStartRadiusCCW: IfcBoolean ;
	IsEndRadiusCCW: IfcBoolean ;
	TransitionCurveType: IfcTransitionCurveType ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTransitionCurveSegment2D
	{
		let ptr = 0;
		let StartPoint;
		if (tape[ptr]) {
		StartPoint = tape[ptr++];
		} else { StartPoint = null; ptr++; }
		let StartDirection;
		if (tape[ptr]) {
		StartDirection = tape[ptr++];
		} else { StartDirection = null; ptr++; }
		let SegmentLength;
		if (tape[ptr]) {
		SegmentLength = tape[ptr++];
		} else { SegmentLength = null; ptr++; }
		let StartRadius;
		if (tape[ptr]) {
		StartRadius = tape[ptr++];
		} else { StartRadius = null; ptr++; }
		let EndRadius;
		if (tape[ptr]) {
		EndRadius = tape[ptr++];
		} else { EndRadius = null; ptr++; }
		let IsStartRadiusCCW;
		if (tape[ptr]) {
		IsStartRadiusCCW = tape[ptr++];
		} else { IsStartRadiusCCW = null; ptr++; }
		let IsEndRadiusCCW;
		if (tape[ptr]) {
		IsEndRadiusCCW = tape[ptr++];
		} else { IsEndRadiusCCW = null; ptr++; }
		let TransitionCurveType;
		if (tape[ptr]) {
		TransitionCurveType = new IfcTransitionCurveType(tape[ptr++]);
		} else { TransitionCurveType = null; ptr++; }
		return new IfcTransitionCurveSegment2D(expressID, type, StartPoint, StartDirection, SegmentLength, StartRadius, EndRadius, IsStartRadiusCCW, IsEndRadiusCCW, TransitionCurveType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.StartPoint)
		args.push(REAL)
		args.push(this.StartDirection)
		if(this.StartRadius){
		}
		else{ args.push(EMPTY); }
		if(this.EndRadius){
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.TransitionCurveType.value)
		return args;
	}
};
export class IfcTransportElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTransportElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTransportElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTransportElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTransportElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTransportElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTransportElementTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTransportElementTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTransportElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTransportElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTransportElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTrapeziumProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, BottomXDim: IfcPositiveLengthMeasure , TopXDim: IfcPositiveLengthMeasure , YDim: IfcPositiveLengthMeasure , TopXOffset: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.BottomXDim = BottomXDim;
		this.TopXDim = TopXDim;
		this.YDim = YDim;
		this.TopXOffset = TopXOffset;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	BottomXDim: IfcPositiveLengthMeasure ;
	TopXDim: IfcPositiveLengthMeasure ;
	YDim: IfcPositiveLengthMeasure ;
	TopXOffset: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTrapeziumProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let BottomXDim;
		if (tape[ptr]) {
		BottomXDim = tape[ptr++];
		} else { BottomXDim = null; ptr++; }
		let TopXDim;
		if (tape[ptr]) {
		TopXDim = tape[ptr++];
		} else { TopXDim = null; ptr++; }
		let YDim;
		if (tape[ptr]) {
		YDim = tape[ptr++];
		} else { YDim = null; ptr++; }
		let TopXOffset;
		if (tape[ptr]) {
		TopXOffset = tape[ptr++];
		} else { TopXOffset = null; ptr++; }
		return new IfcTrapeziumProfileDef(expressID, type, ProfileType, ProfileName, Position, BottomXDim, TopXDim, YDim, TopXOffset);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(this.TopXOffset)
		return args;
	}
};
export class IfcTriangulatedFaceSet {
	constructor(expressID: number, type: number, Coordinates: Handle<IfcCartesianPointList3D> , Normals: IfcParameterValue[] | null, Closed: IfcBoolean | null, CoordIndex: IfcPositiveInteger[] , PnIndex: IfcPositiveInteger[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.PnIndex = PnIndex;
	}
	expressID: number;
	type: number;
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Normals: IfcParameterValue[] | null;
	Closed: IfcBoolean | null;
	CoordIndex: IfcPositiveInteger[] ;
	PnIndex: IfcPositiveInteger[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTriangulatedFaceSet
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = tape[ptr++];
		} else { Coordinates = null; ptr++; }
		let Normals;
		if (tape[ptr]) {
		Normals = [];
		let Normals_index = 0;
		while (Normals_index < tape[ptr].length) {
			Normals.push(tape[ptr][Normals_index++]);
		}
	ptr++;
		} else { Normals = null; ptr++; }
		let Closed;
		if (tape[ptr]) {
		Closed = tape[ptr++];
		} else { Closed = null; ptr++; }
		let CoordIndex;
		if (tape[ptr]) {
		CoordIndex = [];
		let CoordIndex_index = 0;
		while (CoordIndex_index < tape[ptr].length) {
			CoordIndex.push(tape[ptr][CoordIndex_index++]);
		}
	ptr++;
		} else { CoordIndex = null; ptr++; }
		let PnIndex;
		if (tape[ptr]) {
		PnIndex = [];
		let PnIndex_index = 0;
		while (PnIndex_index < tape[ptr].length) {
			PnIndex.push(tape[ptr][PnIndex_index++]);
		}
	ptr++;
		} else { PnIndex = null; ptr++; }
		return new IfcTriangulatedFaceSet(expressID, type, Coordinates, Normals, Closed, CoordIndex, PnIndex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Coordinates)
		if(this.Normals){
		args.push(REAL)
		args.push(...this.Normals)
		}
		else{ args.push(EMPTY); }
		if(this.Closed){
		}
		else{ args.push(EMPTY); }
		if(this.PnIndex){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTriangulatedIrregularNetwork {
	constructor(expressID: number, type: number, Coordinates: Handle<IfcCartesianPointList3D> , Normals: IfcParameterValue[] | null, Closed: IfcBoolean | null, CoordIndex: IfcPositiveInteger[] , PnIndex: IfcPositiveInteger[] | null, Flags: IfcInteger[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Coordinates = Coordinates;
		this.Normals = Normals;
		this.Closed = Closed;
		this.CoordIndex = CoordIndex;
		this.PnIndex = PnIndex;
		this.Flags = Flags;
	}
	expressID: number;
	type: number;
	Coordinates: Handle<IfcCartesianPointList3D> ;
	Normals: IfcParameterValue[] | null;
	Closed: IfcBoolean | null;
	CoordIndex: IfcPositiveInteger[] ;
	PnIndex: IfcPositiveInteger[] | null;
	Flags: IfcInteger[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTriangulatedIrregularNetwork
	{
		let ptr = 0;
		let Coordinates;
		if (tape[ptr]) {
		Coordinates = tape[ptr++];
		} else { Coordinates = null; ptr++; }
		let Normals;
		if (tape[ptr]) {
		Normals = [];
		let Normals_index = 0;
		while (Normals_index < tape[ptr].length) {
			Normals.push(tape[ptr][Normals_index++]);
		}
	ptr++;
		} else { Normals = null; ptr++; }
		let Closed;
		if (tape[ptr]) {
		Closed = tape[ptr++];
		} else { Closed = null; ptr++; }
		let CoordIndex;
		if (tape[ptr]) {
		CoordIndex = [];
		let CoordIndex_index = 0;
		while (CoordIndex_index < tape[ptr].length) {
			CoordIndex.push(tape[ptr][CoordIndex_index++]);
		}
	ptr++;
		} else { CoordIndex = null; ptr++; }
		let PnIndex;
		if (tape[ptr]) {
		PnIndex = [];
		let PnIndex_index = 0;
		while (PnIndex_index < tape[ptr].length) {
			PnIndex.push(tape[ptr][PnIndex_index++]);
		}
	ptr++;
		} else { PnIndex = null; ptr++; }
		let Flags;
		if (tape[ptr]) {
		Flags = [];
		let Flags_index = 0;
		while (Flags_index < tape[ptr].length) {
			Flags.push(tape[ptr][Flags_index++]);
		}
	ptr++;
		} else { Flags = null; ptr++; }
		return new IfcTriangulatedIrregularNetwork(expressID, type, Coordinates, Normals, Closed, CoordIndex, PnIndex, Flags);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Coordinates)
		if(this.Normals){
		args.push(REAL)
		args.push(...this.Normals)
		}
		else{ args.push(EMPTY); }
		if(this.Closed){
		}
		else{ args.push(EMPTY); }
		if(this.PnIndex){
		}
		else{ args.push(EMPTY); }
		args.push(REAL)
		args.push(...this.Flags)
		return args;
	}
};
export class IfcTrimmedCurve {
	constructor(expressID: number, type: number, BasisCurve: Handle<IfcCurve> , Trim1: IfcTrimmingSelect[] , Trim2: IfcTrimmingSelect[] , SenseAgreement: IfcBoolean , MasterRepresentation: IfcTrimmingPreference )
	{
		this.expressID = expressID;
		this.type = type;
		this.BasisCurve = BasisCurve;
		this.Trim1 = Trim1;
		this.Trim2 = Trim2;
		this.SenseAgreement = SenseAgreement;
		this.MasterRepresentation = MasterRepresentation;
	}
	expressID: number;
	type: number;
	BasisCurve: Handle<IfcCurve> ;
	Trim1: IfcTrimmingSelect[] ;
	Trim2: IfcTrimmingSelect[] ;
	SenseAgreement: IfcBoolean ;
	MasterRepresentation: IfcTrimmingPreference ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTrimmedCurve
	{
		let ptr = 0;
		let BasisCurve;
		if (tape[ptr]) {
		BasisCurve = tape[ptr++];
		} else { BasisCurve = null; ptr++; }
		let Trim1;
		if (tape[ptr]) {
		Trim1 = [];
		let Trim1_index = 0;
		while (Trim1_index < tape[ptr].length) {
			Trim1.push(tape[ptr][Trim1_index++]);
		}
	ptr++;
		} else { Trim1 = null; ptr++; }
		let Trim2;
		if (tape[ptr]) {
		Trim2 = [];
		let Trim2_index = 0;
		while (Trim2_index < tape[ptr].length) {
			Trim2.push(tape[ptr][Trim2_index++]);
		}
	ptr++;
		} else { Trim2 = null; ptr++; }
		let SenseAgreement;
		if (tape[ptr]) {
		SenseAgreement = tape[ptr++];
		} else { SenseAgreement = null; ptr++; }
		let MasterRepresentation;
		if (tape[ptr]) {
		MasterRepresentation = new IfcTrimmingPreference(tape[ptr++]);
		} else { MasterRepresentation = null; ptr++; }
		return new IfcTrimmedCurve(expressID, type, BasisCurve, Trim1, Trim2, SenseAgreement, MasterRepresentation);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.BasisCurve)
		args.push(ENUM);
		args.push(this.MasterRepresentation.value)
		return args;
	}
};
export class IfcTubeBundle {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcTubeBundleTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcTubeBundleTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTubeBundle
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTubeBundleTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTubeBundle(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTubeBundleType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcTubeBundleTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcTubeBundleTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTubeBundleType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcTubeBundleTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcTubeBundleType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcTypeObject {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTypeObject
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		return new IfcTypeObject(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTypeProcess {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ProcessType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ProcessType = ProcessType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ProcessType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTypeProcess
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ProcessType;
		if (tape[ptr]) {
		ProcessType = tape[ptr++];
		} else { ProcessType = null; ptr++; }
		return new IfcTypeProcess(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ProcessType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ProcessType){
		args.push(STRING)
		args.push(this.ProcessType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTypeProduct {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTypeProduct
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcTypeProduct(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcTypeResource {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, Identification: IfcIdentifier | null, LongDescription: IfcText | null, ResourceType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.Identification = Identification;
		this.LongDescription = LongDescription;
		this.ResourceType = ResourceType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	Identification: IfcIdentifier | null;
	LongDescription: IfcText | null;
	ResourceType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcTypeResource
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let LongDescription;
		if (tape[ptr]) {
		LongDescription = tape[ptr++];
		} else { LongDescription = null; ptr++; }
		let ResourceType;
		if (tape[ptr]) {
		ResourceType = tape[ptr++];
		} else { ResourceType = null; ptr++; }
		return new IfcTypeResource(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, Identification, LongDescription, ResourceType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.LongDescription){
		args.push(STRING)
		args.push(this.LongDescription)
		}
		else{ args.push(EMPTY); }
		if(this.ResourceType){
		args.push(STRING)
		args.push(this.ResourceType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcUShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null, FlangeSlope: IfcPlaneAngleMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
		this.FlangeSlope = FlangeSlope;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	FlangeSlope: IfcPlaneAngleMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let FlangeWidth;
		if (tape[ptr]) {
		FlangeWidth = tape[ptr++];
		} else { FlangeWidth = null; ptr++; }
		let WebThickness;
		if (tape[ptr]) {
		WebThickness = tape[ptr++];
		} else { WebThickness = null; ptr++; }
		let FlangeThickness;
		if (tape[ptr]) {
		FlangeThickness = tape[ptr++];
		} else { FlangeThickness = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		let EdgeRadius;
		if (tape[ptr]) {
		EdgeRadius = tape[ptr++];
		} else { EdgeRadius = null; ptr++; }
		let FlangeSlope;
		if (tape[ptr]) {
		FlangeSlope = tape[ptr++];
		} else { FlangeSlope = null; ptr++; }
		return new IfcUShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, FlangeWidth, WebThickness, FlangeThickness, FilletRadius, EdgeRadius, FlangeSlope);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.EdgeRadius){
		}
		else{ args.push(EMPTY); }
		if(this.FlangeSlope){
		args.push(REAL)
		args.push(this.FlangeSlope)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcUnitAssignment {
	constructor(expressID: number, type: number, Units: IfcUnit[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.Units = Units;
	}
	expressID: number;
	type: number;
	Units: IfcUnit[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUnitAssignment
	{
		let ptr = 0;
		let Units;
		if (tape[ptr]) {
		Units = [];
		let Units_index = 0;
		while (Units_index < tape[ptr].length) {
			Units.push(tape[ptr][Units_index++]);
		}
	ptr++;
		} else { Units = null; ptr++; }
		return new IfcUnitAssignment(expressID, type, Units);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcUnitaryControlElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcUnitaryControlElementTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcUnitaryControlElementTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryControlElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcUnitaryControlElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcUnitaryControlElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcUnitaryControlElementType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcUnitaryControlElementTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcUnitaryControlElementTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryControlElementType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcUnitaryControlElementTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcUnitaryControlElementType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcUnitaryEquipment {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcUnitaryEquipmentTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcUnitaryEquipmentTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryEquipment
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcUnitaryEquipmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcUnitaryEquipment(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcUnitaryEquipmentType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcUnitaryEquipmentTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcUnitaryEquipmentTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcUnitaryEquipmentType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcUnitaryEquipmentTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcUnitaryEquipmentType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcValve {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcValveTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcValveTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcValve
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcValveTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcValve(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcValveType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcValveTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcValveTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcValveType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcValveTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcValveType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcVector {
	constructor(expressID: number, type: number, Orientation: Handle<IfcDirection> , Magnitude: IfcLengthMeasure )
	{
		this.expressID = expressID;
		this.type = type;
		this.Orientation = Orientation;
		this.Magnitude = Magnitude;
	}
	expressID: number;
	type: number;
	Orientation: Handle<IfcDirection> ;
	Magnitude: IfcLengthMeasure ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVector
	{
		let ptr = 0;
		let Orientation;
		if (tape[ptr]) {
		Orientation = tape[ptr++];
		} else { Orientation = null; ptr++; }
		let Magnitude;
		if (tape[ptr]) {
		Magnitude = tape[ptr++];
		} else { Magnitude = null; ptr++; }
		return new IfcVector(expressID, type, Orientation, Magnitude);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.Orientation)
		args.push(REAL)
		args.push(this.Magnitude)
		return args;
	}
};
export class IfcVertex {
	constructor(expressID: number, type: number, )
	{
		this.expressID = expressID;
		this.type = type;
	}
	expressID: number;
	type: number;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVertex
	{
		let ptr = 0;
		return new IfcVertex(expressID, type, );
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		return args;
	}
};
export class IfcVertexLoop {
	constructor(expressID: number, type: number, LoopVertex: Handle<IfcVertex> )
	{
		this.expressID = expressID;
		this.type = type;
		this.LoopVertex = LoopVertex;
	}
	expressID: number;
	type: number;
	LoopVertex: Handle<IfcVertex> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVertexLoop
	{
		let ptr = 0;
		let LoopVertex;
		if (tape[ptr]) {
		LoopVertex = tape[ptr++];
		} else { LoopVertex = null; ptr++; }
		return new IfcVertexLoop(expressID, type, LoopVertex);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.LoopVertex)
		return args;
	}
};
export class IfcVertexPoint {
	constructor(expressID: number, type: number, VertexGeometry: Handle<IfcPoint> )
	{
		this.expressID = expressID;
		this.type = type;
		this.VertexGeometry = VertexGeometry;
	}
	expressID: number;
	type: number;
	VertexGeometry: Handle<IfcPoint> ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVertexPoint
	{
		let ptr = 0;
		let VertexGeometry;
		if (tape[ptr]) {
		VertexGeometry = tape[ptr++];
		} else { VertexGeometry = null; ptr++; }
		return new IfcVertexPoint(expressID, type, VertexGeometry);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(REF)
		args.push(this.VertexGeometry)
		return args;
	}
};
export class IfcVibrationDamper {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVibrationDamperTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVibrationDamperTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationDamper
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcVibrationDamperTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcVibrationDamper(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcVibrationDamperType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcVibrationDamperTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcVibrationDamperTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationDamperType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcVibrationDamperTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcVibrationDamperType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcVibrationIsolator {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVibrationIsolatorTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVibrationIsolatorTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationIsolator
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcVibrationIsolatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcVibrationIsolator(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcVibrationIsolatorType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcVibrationIsolatorTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcVibrationIsolatorTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVibrationIsolatorType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcVibrationIsolatorTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcVibrationIsolatorType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcVirtualElement {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualElement
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		return new IfcVirtualElement(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcVirtualGridIntersection {
	constructor(expressID: number, type: number, IntersectingAxes: Handle<IfcGridAxis>[] , OffsetDistances: IfcLengthMeasure[] )
	{
		this.expressID = expressID;
		this.type = type;
		this.IntersectingAxes = IntersectingAxes;
		this.OffsetDistances = OffsetDistances;
	}
	expressID: number;
	type: number;
	IntersectingAxes: Handle<IfcGridAxis>[] ;
	OffsetDistances: IfcLengthMeasure[] ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVirtualGridIntersection
	{
		let ptr = 0;
		let IntersectingAxes;
		if (tape[ptr]) {
		IntersectingAxes = [];
		let IntersectingAxes_index = 0;
		while (IntersectingAxes_index < tape[ptr].length) {
			IntersectingAxes.push(tape[ptr][IntersectingAxes_index++]);
		}
	ptr++;
		} else { IntersectingAxes = null; ptr++; }
		let OffsetDistances;
		if (tape[ptr]) {
		OffsetDistances = [];
		let OffsetDistances_index = 0;
		while (OffsetDistances_index < tape[ptr].length) {
			OffsetDistances.push(tape[ptr][OffsetDistances_index++]);
		}
	ptr++;
		} else { OffsetDistances = null; ptr++; }
		return new IfcVirtualGridIntersection(expressID, type, IntersectingAxes, OffsetDistances);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(SET_BEGIN)
		this.IntersectingAxes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		args.push(REAL)
		args.push(...this.OffsetDistances)
		return args;
	}
};
export class IfcVoidingFeature {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcVoidingFeatureTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcVoidingFeatureTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcVoidingFeature
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcVoidingFeatureTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcVoidingFeature(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWall {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWall
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWall(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWallElementedCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWallElementedCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWallElementedCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWallStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWallTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWallTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWallStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWallStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWallType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWallTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWallTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWallType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWallTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWallType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcWasteTerminal {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, PredefinedType: IfcWasteTerminalTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	PredefinedType: IfcWasteTerminalTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWasteTerminal
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWasteTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWasteTerminal(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWasteTerminalType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWasteTerminalTypeEnum )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWasteTerminalTypeEnum ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWasteTerminalType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWasteTerminalTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWasteTerminalType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		return args;
	}
};
export class IfcWindow {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcWindowTypeEnum | null, PartitioningType: IfcWindowTypePartitioningEnum | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcWindowTypeEnum | null;
	PartitioningType: IfcWindowTypePartitioningEnum | null;
	UserDefinedPartitioningType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindow
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let OverallHeight;
		if (tape[ptr]) {
		OverallHeight = tape[ptr++];
		} else { OverallHeight = null; ptr++; }
		let OverallWidth;
		if (tape[ptr]) {
		OverallWidth = tape[ptr++];
		} else { OverallWidth = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWindowTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let PartitioningType;
		if (tape[ptr]) {
		PartitioningType = new IfcWindowTypePartitioningEnum(tape[ptr++]);
		} else { PartitioningType = null; ptr++; }
		let UserDefinedPartitioningType;
		if (tape[ptr]) {
		UserDefinedPartitioningType = tape[ptr++];
		} else { UserDefinedPartitioningType = null; ptr++; }
		return new IfcWindow(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, PartitioningType, UserDefinedPartitioningType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.OverallHeight){
		}
		else{ args.push(EMPTY); }
		if(this.OverallWidth){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PartitioningType){
		args.push(ENUM);
		args.push(this.PartitioningType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPartitioningType){
		args.push(STRING)
		args.push(this.UserDefinedPartitioningType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWindowLiningProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, LiningDepth: IfcPositiveLengthMeasure | null, LiningThickness: IfcNonNegativeLengthMeasure | null, TransomThickness: IfcNonNegativeLengthMeasure | null, MullionThickness: IfcNonNegativeLengthMeasure | null, FirstTransomOffset: IfcNormalisedRatioMeasure | null, SecondTransomOffset: IfcNormalisedRatioMeasure | null, FirstMullionOffset: IfcNormalisedRatioMeasure | null, SecondMullionOffset: IfcNormalisedRatioMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null, LiningOffset: IfcLengthMeasure | null, LiningToPanelOffsetX: IfcLengthMeasure | null, LiningToPanelOffsetY: IfcLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.LiningDepth = LiningDepth;
		this.LiningThickness = LiningThickness;
		this.TransomThickness = TransomThickness;
		this.MullionThickness = MullionThickness;
		this.FirstTransomOffset = FirstTransomOffset;
		this.SecondTransomOffset = SecondTransomOffset;
		this.FirstMullionOffset = FirstMullionOffset;
		this.SecondMullionOffset = SecondMullionOffset;
		this.ShapeAspectStyle = ShapeAspectStyle;
		this.LiningOffset = LiningOffset;
		this.LiningToPanelOffsetX = LiningToPanelOffsetX;
		this.LiningToPanelOffsetY = LiningToPanelOffsetY;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	LiningDepth: IfcPositiveLengthMeasure | null;
	LiningThickness: IfcNonNegativeLengthMeasure | null;
	TransomThickness: IfcNonNegativeLengthMeasure | null;
	MullionThickness: IfcNonNegativeLengthMeasure | null;
	FirstTransomOffset: IfcNormalisedRatioMeasure | null;
	SecondTransomOffset: IfcNormalisedRatioMeasure | null;
	FirstMullionOffset: IfcNormalisedRatioMeasure | null;
	SecondMullionOffset: IfcNormalisedRatioMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	LiningOffset: IfcLengthMeasure | null;
	LiningToPanelOffsetX: IfcLengthMeasure | null;
	LiningToPanelOffsetY: IfcLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindowLiningProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let LiningDepth;
		if (tape[ptr]) {
		LiningDepth = tape[ptr++];
		} else { LiningDepth = null; ptr++; }
		let LiningThickness;
		if (tape[ptr]) {
		LiningThickness = tape[ptr++];
		} else { LiningThickness = null; ptr++; }
		let TransomThickness;
		if (tape[ptr]) {
		TransomThickness = tape[ptr++];
		} else { TransomThickness = null; ptr++; }
		let MullionThickness;
		if (tape[ptr]) {
		MullionThickness = tape[ptr++];
		} else { MullionThickness = null; ptr++; }
		let FirstTransomOffset;
		if (tape[ptr]) {
		FirstTransomOffset = tape[ptr++];
		} else { FirstTransomOffset = null; ptr++; }
		let SecondTransomOffset;
		if (tape[ptr]) {
		SecondTransomOffset = tape[ptr++];
		} else { SecondTransomOffset = null; ptr++; }
		let FirstMullionOffset;
		if (tape[ptr]) {
		FirstMullionOffset = tape[ptr++];
		} else { FirstMullionOffset = null; ptr++; }
		let SecondMullionOffset;
		if (tape[ptr]) {
		SecondMullionOffset = tape[ptr++];
		} else { SecondMullionOffset = null; ptr++; }
		let ShapeAspectStyle;
		if (tape[ptr]) {
		ShapeAspectStyle = tape[ptr++];
		} else { ShapeAspectStyle = null; ptr++; }
		let LiningOffset;
		if (tape[ptr]) {
		LiningOffset = tape[ptr++];
		} else { LiningOffset = null; ptr++; }
		let LiningToPanelOffsetX;
		if (tape[ptr]) {
		LiningToPanelOffsetX = tape[ptr++];
		} else { LiningToPanelOffsetX = null; ptr++; }
		let LiningToPanelOffsetY;
		if (tape[ptr]) {
		LiningToPanelOffsetY = tape[ptr++];
		} else { LiningToPanelOffsetY = null; ptr++; }
		return new IfcWindowLiningProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, LiningDepth, LiningThickness, TransomThickness, MullionThickness, FirstTransomOffset, SecondTransomOffset, FirstMullionOffset, SecondMullionOffset, ShapeAspectStyle, LiningOffset, LiningToPanelOffsetX, LiningToPanelOffsetY);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.LiningDepth){
		}
		else{ args.push(EMPTY); }
		if(this.LiningThickness){
		}
		else{ args.push(EMPTY); }
		if(this.TransomThickness){
		}
		else{ args.push(EMPTY); }
		if(this.MullionThickness){
		}
		else{ args.push(EMPTY); }
		if(this.FirstTransomOffset){
		}
		else{ args.push(EMPTY); }
		if(this.SecondTransomOffset){
		}
		else{ args.push(EMPTY); }
		if(this.FirstMullionOffset){
		}
		else{ args.push(EMPTY); }
		if(this.SecondMullionOffset){
		}
		else{ args.push(EMPTY); }
		if(this.ShapeAspectStyle){
		args.push(REF)
		args.push(this.ShapeAspectStyle)
		}
		else{ args.push(EMPTY); }
		if(this.LiningOffset){
		args.push(REAL)
		args.push(this.LiningOffset)
		}
		else{ args.push(EMPTY); }
		if(this.LiningToPanelOffsetX){
		args.push(REAL)
		args.push(this.LiningToPanelOffsetX)
		}
		else{ args.push(EMPTY); }
		if(this.LiningToPanelOffsetY){
		args.push(REAL)
		args.push(this.LiningToPanelOffsetY)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWindowPanelProperties {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, OperationType: IfcWindowPanelOperationEnum , PanelPosition: IfcWindowPanelPositionEnum , FrameDepth: IfcPositiveLengthMeasure | null, FrameThickness: IfcPositiveLengthMeasure | null, ShapeAspectStyle: Handle<IfcShapeAspect> | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.OperationType = OperationType;
		this.PanelPosition = PanelPosition;
		this.FrameDepth = FrameDepth;
		this.FrameThickness = FrameThickness;
		this.ShapeAspectStyle = ShapeAspectStyle;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	OperationType: IfcWindowPanelOperationEnum ;
	PanelPosition: IfcWindowPanelPositionEnum ;
	FrameDepth: IfcPositiveLengthMeasure | null;
	FrameThickness: IfcPositiveLengthMeasure | null;
	ShapeAspectStyle: Handle<IfcShapeAspect> | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindowPanelProperties
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcWindowPanelOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let PanelPosition;
		if (tape[ptr]) {
		PanelPosition = new IfcWindowPanelPositionEnum(tape[ptr++]);
		} else { PanelPosition = null; ptr++; }
		let FrameDepth;
		if (tape[ptr]) {
		FrameDepth = tape[ptr++];
		} else { FrameDepth = null; ptr++; }
		let FrameThickness;
		if (tape[ptr]) {
		FrameThickness = tape[ptr++];
		} else { FrameThickness = null; ptr++; }
		let ShapeAspectStyle;
		if (tape[ptr]) {
		ShapeAspectStyle = tape[ptr++];
		} else { ShapeAspectStyle = null; ptr++; }
		return new IfcWindowPanelProperties(expressID, type, GlobalId, OwnerHistory, Name, Description, OperationType, PanelPosition, FrameDepth, FrameThickness, ShapeAspectStyle);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.OperationType.value)
		args.push(ENUM);
		args.push(this.PanelPosition.value)
		if(this.FrameDepth){
		}
		else{ args.push(EMPTY); }
		if(this.FrameThickness){
		}
		else{ args.push(EMPTY); }
		if(this.ShapeAspectStyle){
		args.push(REF)
		args.push(this.ShapeAspectStyle)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWindowStandardCase {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, ObjectPlacement: Handle<IfcObjectPlacement> | null, Representation: Handle<IfcProductRepresentation> | null, Tag: IfcIdentifier | null, OverallHeight: IfcPositiveLengthMeasure | null, OverallWidth: IfcPositiveLengthMeasure | null, PredefinedType: IfcWindowTypeEnum | null, PartitioningType: IfcWindowTypePartitioningEnum | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.ObjectPlacement = ObjectPlacement;
		this.Representation = Representation;
		this.Tag = Tag;
		this.OverallHeight = OverallHeight;
		this.OverallWidth = OverallWidth;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	ObjectPlacement: Handle<IfcObjectPlacement> | null;
	Representation: Handle<IfcProductRepresentation> | null;
	Tag: IfcIdentifier | null;
	OverallHeight: IfcPositiveLengthMeasure | null;
	OverallWidth: IfcPositiveLengthMeasure | null;
	PredefinedType: IfcWindowTypeEnum | null;
	PartitioningType: IfcWindowTypePartitioningEnum | null;
	UserDefinedPartitioningType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindowStandardCase
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let ObjectPlacement;
		if (tape[ptr]) {
		ObjectPlacement = tape[ptr++];
		} else { ObjectPlacement = null; ptr++; }
		let Representation;
		if (tape[ptr]) {
		Representation = tape[ptr++];
		} else { Representation = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let OverallHeight;
		if (tape[ptr]) {
		OverallHeight = tape[ptr++];
		} else { OverallHeight = null; ptr++; }
		let OverallWidth;
		if (tape[ptr]) {
		OverallWidth = tape[ptr++];
		} else { OverallWidth = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWindowTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let PartitioningType;
		if (tape[ptr]) {
		PartitioningType = new IfcWindowTypePartitioningEnum(tape[ptr++]);
		} else { PartitioningType = null; ptr++; }
		let UserDefinedPartitioningType;
		if (tape[ptr]) {
		UserDefinedPartitioningType = tape[ptr++];
		} else { UserDefinedPartitioningType = null; ptr++; }
		return new IfcWindowStandardCase(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, ObjectPlacement, Representation, Tag, OverallHeight, OverallWidth, PredefinedType, PartitioningType, UserDefinedPartitioningType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectPlacement){
		args.push(REF)
		args.push(this.ObjectPlacement)
		}
		else{ args.push(EMPTY); }
		if(this.Representation){
		args.push(REF)
		args.push(this.Representation)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.OverallHeight){
		}
		else{ args.push(EMPTY); }
		if(this.OverallWidth){
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		if(this.PartitioningType){
		args.push(ENUM);
		args.push(this.PartitioningType.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPartitioningType){
		args.push(STRING)
		args.push(this.UserDefinedPartitioningType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWindowStyle {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ConstructionType: IfcWindowStyleConstructionEnum , OperationType: IfcWindowStyleOperationEnum , ParameterTakesPrecedence: IfcBoolean , Sizeable: IfcBoolean )
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ConstructionType = ConstructionType;
		this.OperationType = OperationType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.Sizeable = Sizeable;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ConstructionType: IfcWindowStyleConstructionEnum ;
	OperationType: IfcWindowStyleOperationEnum ;
	ParameterTakesPrecedence: IfcBoolean ;
	Sizeable: IfcBoolean ;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindowStyle
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ConstructionType;
		if (tape[ptr]) {
		ConstructionType = new IfcWindowStyleConstructionEnum(tape[ptr++]);
		} else { ConstructionType = null; ptr++; }
		let OperationType;
		if (tape[ptr]) {
		OperationType = new IfcWindowStyleOperationEnum(tape[ptr++]);
		} else { OperationType = null; ptr++; }
		let ParameterTakesPrecedence;
		if (tape[ptr]) {
		ParameterTakesPrecedence = tape[ptr++];
		} else { ParameterTakesPrecedence = null; ptr++; }
		let Sizeable;
		if (tape[ptr]) {
		Sizeable = tape[ptr++];
		} else { Sizeable = null; ptr++; }
		return new IfcWindowStyle(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ConstructionType, OperationType, ParameterTakesPrecedence, Sizeable);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.ConstructionType.value)
		args.push(ENUM);
		args.push(this.OperationType.value)
		return args;
	}
};
export class IfcWindowType {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ApplicableOccurrence: IfcIdentifier | null, HasPropertySets: Handle<IfcPropertySetDefinition>[] | null, RepresentationMaps: Handle<IfcRepresentationMap>[] | null, Tag: IfcLabel | null, ElementType: IfcLabel | null, PredefinedType: IfcWindowTypeEnum , PartitioningType: IfcWindowTypePartitioningEnum , ParameterTakesPrecedence: IfcBoolean | null, UserDefinedPartitioningType: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ApplicableOccurrence = ApplicableOccurrence;
		this.HasPropertySets = HasPropertySets;
		this.RepresentationMaps = RepresentationMaps;
		this.Tag = Tag;
		this.ElementType = ElementType;
		this.PredefinedType = PredefinedType;
		this.PartitioningType = PartitioningType;
		this.ParameterTakesPrecedence = ParameterTakesPrecedence;
		this.UserDefinedPartitioningType = UserDefinedPartitioningType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ApplicableOccurrence: IfcIdentifier | null;
	HasPropertySets: Handle<IfcPropertySetDefinition>[] | null;
	RepresentationMaps: Handle<IfcRepresentationMap>[] | null;
	Tag: IfcLabel | null;
	ElementType: IfcLabel | null;
	PredefinedType: IfcWindowTypeEnum ;
	PartitioningType: IfcWindowTypePartitioningEnum ;
	ParameterTakesPrecedence: IfcBoolean | null;
	UserDefinedPartitioningType: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWindowType
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ApplicableOccurrence;
		if (tape[ptr]) {
		ApplicableOccurrence = tape[ptr++];
		} else { ApplicableOccurrence = null; ptr++; }
		let HasPropertySets;
		if (tape[ptr]) {
		HasPropertySets = [];
		let HasPropertySets_index = 0;
		while (HasPropertySets_index < tape[ptr].length) {
			HasPropertySets.push(tape[ptr][HasPropertySets_index++]);
		}
	ptr++;
		} else { HasPropertySets = null; ptr++; }
		let RepresentationMaps;
		if (tape[ptr]) {
		RepresentationMaps = [];
		let RepresentationMaps_index = 0;
		while (RepresentationMaps_index < tape[ptr].length) {
			RepresentationMaps.push(tape[ptr][RepresentationMaps_index++]);
		}
	ptr++;
		} else { RepresentationMaps = null; ptr++; }
		let Tag;
		if (tape[ptr]) {
		Tag = tape[ptr++];
		} else { Tag = null; ptr++; }
		let ElementType;
		if (tape[ptr]) {
		ElementType = tape[ptr++];
		} else { ElementType = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWindowTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		let PartitioningType;
		if (tape[ptr]) {
		PartitioningType = new IfcWindowTypePartitioningEnum(tape[ptr++]);
		} else { PartitioningType = null; ptr++; }
		let ParameterTakesPrecedence;
		if (tape[ptr]) {
		ParameterTakesPrecedence = tape[ptr++];
		} else { ParameterTakesPrecedence = null; ptr++; }
		let UserDefinedPartitioningType;
		if (tape[ptr]) {
		UserDefinedPartitioningType = tape[ptr++];
		} else { UserDefinedPartitioningType = null; ptr++; }
		return new IfcWindowType(expressID, type, GlobalId, OwnerHistory, Name, Description, ApplicableOccurrence, HasPropertySets, RepresentationMaps, Tag, ElementType, PredefinedType, PartitioningType, ParameterTakesPrecedence, UserDefinedPartitioningType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ApplicableOccurrence){
		args.push(STRING)
		args.push(this.ApplicableOccurrence)
		}
		else{ args.push(EMPTY); }
		if(this.HasPropertySets){
		args.push(SET_BEGIN)
		this.HasPropertySets.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.RepresentationMaps){
		args.push(SET_BEGIN)
		this.RepresentationMaps.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Tag){
		args.push(STRING)
		args.push(this.Tag)
		}
		else{ args.push(EMPTY); }
		if(this.ElementType){
		args.push(STRING)
		args.push(this.ElementType)
		}
		else{ args.push(EMPTY); }
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		args.push(ENUM);
		args.push(this.PartitioningType.value)
		if(this.ParameterTakesPrecedence){
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedPartitioningType){
		args.push(STRING)
		args.push(this.UserDefinedPartitioningType)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWorkCalendar {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, WorkingTimes: Handle<IfcWorkTime>[] | null, ExceptionTimes: Handle<IfcWorkTime>[] | null, PredefinedType: IfcWorkCalendarTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.WorkingTimes = WorkingTimes;
		this.ExceptionTimes = ExceptionTimes;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	WorkingTimes: Handle<IfcWorkTime>[] | null;
	ExceptionTimes: Handle<IfcWorkTime>[] | null;
	PredefinedType: IfcWorkCalendarTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWorkCalendar
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let WorkingTimes;
		if (tape[ptr]) {
		WorkingTimes = [];
		let WorkingTimes_index = 0;
		while (WorkingTimes_index < tape[ptr].length) {
			WorkingTimes.push(tape[ptr][WorkingTimes_index++]);
		}
	ptr++;
		} else { WorkingTimes = null; ptr++; }
		let ExceptionTimes;
		if (tape[ptr]) {
		ExceptionTimes = [];
		let ExceptionTimes_index = 0;
		while (ExceptionTimes_index < tape[ptr].length) {
			ExceptionTimes.push(tape[ptr][ExceptionTimes_index++]);
		}
	ptr++;
		} else { ExceptionTimes = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWorkCalendarTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWorkCalendar(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, WorkingTimes, ExceptionTimes, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		if(this.WorkingTimes){
		args.push(SET_BEGIN)
		this.WorkingTimes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.ExceptionTimes){
		args.push(SET_BEGIN)
		this.ExceptionTimes.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWorkControl {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWorkControl
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let CreationDate;
		if (tape[ptr]) {
		CreationDate = tape[ptr++];
		} else { CreationDate = null; ptr++; }
		let Creators;
		if (tape[ptr]) {
		Creators = [];
		let Creators_index = 0;
		while (Creators_index < tape[ptr].length) {
			Creators.push(tape[ptr][Creators_index++]);
		}
	ptr++;
		} else { Creators = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		let Duration;
		if (tape[ptr]) {
		Duration = tape[ptr++];
		} else { Duration = null; ptr++; }
		let TotalFloat;
		if (tape[ptr]) {
		TotalFloat = tape[ptr++];
		} else { TotalFloat = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let FinishTime;
		if (tape[ptr]) {
		FinishTime = tape[ptr++];
		} else { FinishTime = null; ptr++; }
		return new IfcWorkControl(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.CreationDate)
		if(this.Creators){
		args.push(SET_BEGIN)
		this.Creators.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		if(this.Duration){
		args.push(STRING)
		args.push(this.Duration)
		}
		else{ args.push(EMPTY); }
		if(this.TotalFloat){
		args.push(STRING)
		args.push(this.TotalFloat)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		if(this.FinishTime){
		args.push(STRING)
		args.push(this.FinishTime)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWorkPlan {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null, PredefinedType: IfcWorkPlanTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	PredefinedType: IfcWorkPlanTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWorkPlan
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let CreationDate;
		if (tape[ptr]) {
		CreationDate = tape[ptr++];
		} else { CreationDate = null; ptr++; }
		let Creators;
		if (tape[ptr]) {
		Creators = [];
		let Creators_index = 0;
		while (Creators_index < tape[ptr].length) {
			Creators.push(tape[ptr][Creators_index++]);
		}
	ptr++;
		} else { Creators = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		let Duration;
		if (tape[ptr]) {
		Duration = tape[ptr++];
		} else { Duration = null; ptr++; }
		let TotalFloat;
		if (tape[ptr]) {
		TotalFloat = tape[ptr++];
		} else { TotalFloat = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let FinishTime;
		if (tape[ptr]) {
		FinishTime = tape[ptr++];
		} else { FinishTime = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWorkPlanTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWorkPlan(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.CreationDate)
		if(this.Creators){
		args.push(SET_BEGIN)
		this.Creators.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		if(this.Duration){
		args.push(STRING)
		args.push(this.Duration)
		}
		else{ args.push(EMPTY); }
		if(this.TotalFloat){
		args.push(STRING)
		args.push(this.TotalFloat)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		if(this.FinishTime){
		args.push(STRING)
		args.push(this.FinishTime)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWorkSchedule {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, Identification: IfcIdentifier | null, CreationDate: IfcDateTime , Creators: Handle<IfcPerson>[] | null, Purpose: IfcLabel | null, Duration: IfcDuration | null, TotalFloat: IfcDuration | null, StartTime: IfcDateTime , FinishTime: IfcDateTime | null, PredefinedType: IfcWorkScheduleTypeEnum | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.Identification = Identification;
		this.CreationDate = CreationDate;
		this.Creators = Creators;
		this.Purpose = Purpose;
		this.Duration = Duration;
		this.TotalFloat = TotalFloat;
		this.StartTime = StartTime;
		this.FinishTime = FinishTime;
		this.PredefinedType = PredefinedType;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	Identification: IfcIdentifier | null;
	CreationDate: IfcDateTime ;
	Creators: Handle<IfcPerson>[] | null;
	Purpose: IfcLabel | null;
	Duration: IfcDuration | null;
	TotalFloat: IfcDuration | null;
	StartTime: IfcDateTime ;
	FinishTime: IfcDateTime | null;
	PredefinedType: IfcWorkScheduleTypeEnum | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWorkSchedule
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let Identification;
		if (tape[ptr]) {
		Identification = tape[ptr++];
		} else { Identification = null; ptr++; }
		let CreationDate;
		if (tape[ptr]) {
		CreationDate = tape[ptr++];
		} else { CreationDate = null; ptr++; }
		let Creators;
		if (tape[ptr]) {
		Creators = [];
		let Creators_index = 0;
		while (Creators_index < tape[ptr].length) {
			Creators.push(tape[ptr][Creators_index++]);
		}
	ptr++;
		} else { Creators = null; ptr++; }
		let Purpose;
		if (tape[ptr]) {
		Purpose = tape[ptr++];
		} else { Purpose = null; ptr++; }
		let Duration;
		if (tape[ptr]) {
		Duration = tape[ptr++];
		} else { Duration = null; ptr++; }
		let TotalFloat;
		if (tape[ptr]) {
		TotalFloat = tape[ptr++];
		} else { TotalFloat = null; ptr++; }
		let StartTime;
		if (tape[ptr]) {
		StartTime = tape[ptr++];
		} else { StartTime = null; ptr++; }
		let FinishTime;
		if (tape[ptr]) {
		FinishTime = tape[ptr++];
		} else { FinishTime = null; ptr++; }
		let PredefinedType;
		if (tape[ptr]) {
		PredefinedType = new IfcWorkScheduleTypeEnum(tape[ptr++]);
		} else { PredefinedType = null; ptr++; }
		return new IfcWorkSchedule(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, Identification, CreationDate, Creators, Purpose, Duration, TotalFloat, StartTime, FinishTime, PredefinedType);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.Identification){
		args.push(STRING)
		args.push(this.Identification)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.CreationDate)
		if(this.Creators){
		args.push(SET_BEGIN)
		this.Creators.forEach((e) => { args.push(REF); args.push(e); });
		args.push(SET_END)
		}
		else{ args.push(EMPTY); }
		if(this.Purpose){
		args.push(STRING)
		args.push(this.Purpose)
		}
		else{ args.push(EMPTY); }
		if(this.Duration){
		args.push(STRING)
		args.push(this.Duration)
		}
		else{ args.push(EMPTY); }
		if(this.TotalFloat){
		args.push(STRING)
		args.push(this.TotalFloat)
		}
		else{ args.push(EMPTY); }
		args.push(STRING)
		args.push(this.StartTime)
		if(this.FinishTime){
		args.push(STRING)
		args.push(this.FinishTime)
		}
		else{ args.push(EMPTY); }
		if(this.PredefinedType){
		args.push(ENUM);
		args.push(this.PredefinedType.value)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcWorkTime {
	constructor(expressID: number, type: number, Name: IfcLabel | null, DataOrigin: IfcDataOriginEnum | null, UserDefinedDataOrigin: IfcLabel | null, RecurrencePattern: Handle<IfcRecurrencePattern> | null, Start: IfcDate | null, Finish: IfcDate | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.Name = Name;
		this.DataOrigin = DataOrigin;
		this.UserDefinedDataOrigin = UserDefinedDataOrigin;
		this.RecurrencePattern = RecurrencePattern;
		this.Start = Start;
		this.Finish = Finish;
	}
	expressID: number;
	type: number;
	Name: IfcLabel | null;
	DataOrigin: IfcDataOriginEnum | null;
	UserDefinedDataOrigin: IfcLabel | null;
	RecurrencePattern: Handle<IfcRecurrencePattern> | null;
	Start: IfcDate | null;
	Finish: IfcDate | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcWorkTime
	{
		let ptr = 0;
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let DataOrigin;
		if (tape[ptr]) {
		DataOrigin = new IfcDataOriginEnum(tape[ptr++]);
		} else { DataOrigin = null; ptr++; }
		let UserDefinedDataOrigin;
		if (tape[ptr]) {
		UserDefinedDataOrigin = tape[ptr++];
		} else { UserDefinedDataOrigin = null; ptr++; }
		let RecurrencePattern;
		if (tape[ptr]) {
		RecurrencePattern = tape[ptr++];
		} else { RecurrencePattern = null; ptr++; }
		let Start;
		if (tape[ptr]) {
		Start = tape[ptr++];
		} else { Start = null; ptr++; }
		let Finish;
		if (tape[ptr]) {
		Finish = tape[ptr++];
		} else { Finish = null; ptr++; }
		return new IfcWorkTime(expressID, type, Name, DataOrigin, UserDefinedDataOrigin, RecurrencePattern, Start, Finish);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.DataOrigin){
		args.push(ENUM);
		args.push(this.DataOrigin.value)
		}
		else{ args.push(EMPTY); }
		if(this.UserDefinedDataOrigin){
		args.push(STRING)
		args.push(this.UserDefinedDataOrigin)
		}
		else{ args.push(EMPTY); }
		if(this.RecurrencePattern){
		args.push(REF)
		args.push(this.RecurrencePattern)
		}
		else{ args.push(EMPTY); }
		if(this.Start){
		args.push(STRING)
		args.push(this.Start)
		}
		else{ args.push(EMPTY); }
		if(this.Finish){
		args.push(STRING)
		args.push(this.Finish)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcZShapeProfileDef {
	constructor(expressID: number, type: number, ProfileType: IfcProfileTypeEnum , ProfileName: IfcLabel | null, Position: Handle<IfcAxis2Placement2D> | null, Depth: IfcPositiveLengthMeasure , FlangeWidth: IfcPositiveLengthMeasure , WebThickness: IfcPositiveLengthMeasure , FlangeThickness: IfcPositiveLengthMeasure , FilletRadius: IfcNonNegativeLengthMeasure | null, EdgeRadius: IfcNonNegativeLengthMeasure | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.ProfileType = ProfileType;
		this.ProfileName = ProfileName;
		this.Position = Position;
		this.Depth = Depth;
		this.FlangeWidth = FlangeWidth;
		this.WebThickness = WebThickness;
		this.FlangeThickness = FlangeThickness;
		this.FilletRadius = FilletRadius;
		this.EdgeRadius = EdgeRadius;
	}
	expressID: number;
	type: number;
	ProfileType: IfcProfileTypeEnum ;
	ProfileName: IfcLabel | null;
	Position: Handle<IfcAxis2Placement2D> | null;
	Depth: IfcPositiveLengthMeasure ;
	FlangeWidth: IfcPositiveLengthMeasure ;
	WebThickness: IfcPositiveLengthMeasure ;
	FlangeThickness: IfcPositiveLengthMeasure ;
	FilletRadius: IfcNonNegativeLengthMeasure | null;
	EdgeRadius: IfcNonNegativeLengthMeasure | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcZShapeProfileDef
	{
		let ptr = 0;
		let ProfileType;
		if (tape[ptr]) {
		ProfileType = new IfcProfileTypeEnum(tape[ptr++]);
		} else { ProfileType = null; ptr++; }
		let ProfileName;
		if (tape[ptr]) {
		ProfileName = tape[ptr++];
		} else { ProfileName = null; ptr++; }
		let Position;
		if (tape[ptr]) {
		Position = tape[ptr++];
		} else { Position = null; ptr++; }
		let Depth;
		if (tape[ptr]) {
		Depth = tape[ptr++];
		} else { Depth = null; ptr++; }
		let FlangeWidth;
		if (tape[ptr]) {
		FlangeWidth = tape[ptr++];
		} else { FlangeWidth = null; ptr++; }
		let WebThickness;
		if (tape[ptr]) {
		WebThickness = tape[ptr++];
		} else { WebThickness = null; ptr++; }
		let FlangeThickness;
		if (tape[ptr]) {
		FlangeThickness = tape[ptr++];
		} else { FlangeThickness = null; ptr++; }
		let FilletRadius;
		if (tape[ptr]) {
		FilletRadius = tape[ptr++];
		} else { FilletRadius = null; ptr++; }
		let EdgeRadius;
		if (tape[ptr]) {
		EdgeRadius = tape[ptr++];
		} else { EdgeRadius = null; ptr++; }
		return new IfcZShapeProfileDef(expressID, type, ProfileType, ProfileName, Position, Depth, FlangeWidth, WebThickness, FlangeThickness, FilletRadius, EdgeRadius);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(ENUM);
		args.push(this.ProfileType.value)
		if(this.ProfileName){
		args.push(STRING)
		args.push(this.ProfileName)
		}
		else{ args.push(EMPTY); }
		if(this.Position){
		args.push(REF)
		args.push(this.Position)
		}
		else{ args.push(EMPTY); }
		if(this.FilletRadius){
		}
		else{ args.push(EMPTY); }
		if(this.EdgeRadius){
		}
		else{ args.push(EMPTY); }
		return args;
	}
};
export class IfcZone {
	constructor(expressID: number, type: number, GlobalId: IfcGloballyUniqueId , OwnerHistory: Handle<IfcOwnerHistory> | null, Name: IfcLabel | null, Description: IfcText | null, ObjectType: IfcLabel | null, LongName: IfcLabel | null)
	{
		this.expressID = expressID;
		this.type = type;
		this.GlobalId = GlobalId;
		this.OwnerHistory = OwnerHistory;
		this.Name = Name;
		this.Description = Description;
		this.ObjectType = ObjectType;
		this.LongName = LongName;
	}
	expressID: number;
	type: number;
	GlobalId: IfcGloballyUniqueId ;
	OwnerHistory: Handle<IfcOwnerHistory> | null;
	Name: IfcLabel | null;
	Description: IfcText | null;
	ObjectType: IfcLabel | null;
	LongName: IfcLabel | null;
	static FromTape(expressID: number, type: number, tape: any[]): IfcZone
	{
		let ptr = 0;
		let GlobalId;
		if (tape[ptr]) {
		GlobalId = tape[ptr++];
		} else { GlobalId = null; ptr++; }
		let OwnerHistory;
		if (tape[ptr]) {
		OwnerHistory = tape[ptr++];
		} else { OwnerHistory = null; ptr++; }
		let Name;
		if (tape[ptr]) {
		Name = tape[ptr++];
		} else { Name = null; ptr++; }
		let Description;
		if (tape[ptr]) {
		Description = tape[ptr++];
		} else { Description = null; ptr++; }
		let ObjectType;
		if (tape[ptr]) {
		ObjectType = tape[ptr++];
		} else { ObjectType = null; ptr++; }
		let LongName;
		if (tape[ptr]) {
		LongName = tape[ptr++];
		} else { LongName = null; ptr++; }
		return new IfcZone(expressID, type, GlobalId, OwnerHistory, Name, Description, ObjectType, LongName);
	}
	ToTape(): any[]
	{
		let args: any[] = [];
		args.push(STRING)
		args.push(this.GlobalId)
		if(this.OwnerHistory){
		args.push(REF)
		args.push(this.OwnerHistory)
		}
		else{ args.push(EMPTY); }
		if(this.Name){
		args.push(STRING)
		args.push(this.Name)
		}
		else{ args.push(EMPTY); }
		if(this.Description){
		args.push(STRING)
		args.push(this.Description)
		}
		else{ args.push(EMPTY); }
		if(this.ObjectType){
		args.push(STRING)
		args.push(this.ObjectType)
		}
		else{ args.push(EMPTY); }
		if(this.LongName){
		args.push(STRING)
		args.push(this.LongName)
		}
		else{ args.push(EMPTY); }
		return args;
	}
};